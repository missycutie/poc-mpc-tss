import BN from "bn.js";
import { curve, ec as EC } from "elliptic";
import { Socket } from "socket.io-client";
import { PointHex } from "./interfaces";
export declare function getEc(): EC;
export declare function getLagrangeCoeffs(_allIndexes: number[] | BN[], _myIndex: number | BN, _target?: number | BN): BN;
export declare function ecPoint(p: {
    x: string;
    y: string;
}): curve.base.BasePoint;
export declare const getAdditiveCoeff: (isUser: boolean, participatingServerIndexes: number[], userTSSIndex: number, serverIndex?: number) => BN;
export declare const getDenormaliseCoeff: (party: number, parties: number[]) => BN;
export declare const getDKLSCoeff: (isUser: boolean, participatingServerIndexes: number[], userTSSIndex: number, serverIndex?: number) => BN;
export declare const createSockets: (wsEndpoints: string[], sessionId: string) => Promise<Socket[]>;
type key = {
    x: string;
    y: string;
};
export declare function getTSSPubKey(dkgPubKey: PointHex, userSharePubKey: key, userTSSIndex: number): curve.base.BasePoint;
export declare const generateEndpoints: (parties: number, clientIndex: number) => {
    endpoints: string[];
    tssWSEndpoints: string[];
    partyIndexes: number[];
};
export declare const setupSockets: (tssWSEndpoints: string[], sessionId: string) => Promise<Socket<import("@socket.io/component-emitter").DefaultEventsMap, import("@socket.io/component-emitter").DefaultEventsMap>[]>;
export {};
