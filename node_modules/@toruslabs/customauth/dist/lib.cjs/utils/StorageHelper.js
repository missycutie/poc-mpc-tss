'use strict';

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var eccrypto = require('@toruslabs/eccrypto');
var httpHelpers = require('@toruslabs/http-helpers');
var metadataHelpers = require('@toruslabs/metadata-helpers');
var enums = require('./enums.js');
var helpers = require('./helpers.js');
var loglevel = require('./loglevel.js');

class StorageHelper {
  constructor(serverUrl) {
    _defineProperty(this, "currentStorageMethod", enums.REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE);
    _defineProperty(this, "isInitialized", false);
    _defineProperty(this, "storageServerUrl", "https://session.web3auth.io");
    _defineProperty(this, "localStorageAvailable", true);
    this.storageServerUrl = serverUrl;
  }
  get storageMethodUsed() {
    return this.currentStorageMethod;
  }
  init() {
    const support = helpers.are3PCSupported();
    const localStorageAvailable = helpers.storageAvailable(enums.REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE);
    this.localStorageAvailable = localStorageAvailable;
    if (support && localStorageAvailable) {
      // use local storage as default for storing stuff
      this.currentStorageMethod = enums.REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE;
    } else {
      // use server store as default for storing stuff
      this.currentStorageMethod = enums.REDIRECT_PARAMS_STORAGE_METHOD.SERVER;
    }
    this.isInitialized = true;
  }
  async storeLoginDetails(params, scope) {
    if (!this.isInitialized) throw new Error("StorageHelper is not initialized");
    if (this.currentStorageMethod === enums.REDIRECT_PARAMS_STORAGE_METHOD.SERVER) {
      const privKey = metadataHelpers.keccak256(Buffer.from(scope, "utf8"));
      const privKeyHex = privKey.toString("hex");
      const publicKeyHex = eccrypto.getPublic(privKey).toString("hex");
      const encData = await metadataHelpers.encryptData(privKeyHex, params);
      const signature = (await eccrypto.sign(privKey, metadataHelpers.keccak256(Buffer.from(encData, "utf8")))).toString("hex");
      await httpHelpers.post(`${this.storageServerUrl}/store/set`, {
        key: publicKeyHex,
        data: encData,
        signature
      });
    }
    if (this.localStorageAvailable) window.localStorage.setItem(`torus_login_${scope}`, JSON.stringify(params));
  }
  async retrieveLoginDetails(scope) {
    if (!this.isInitialized) throw new Error("StorageHelper is not initialized");
    if (this.localStorageAvailable) {
      const loginDetails = window.localStorage.getItem(`torus_login_${scope}`);
      if (loginDetails) return JSON.parse(loginDetails || "{}");
    }
    if (this.currentStorageMethod === enums.REDIRECT_PARAMS_STORAGE_METHOD.SERVER) {
      const privKey = metadataHelpers.keccak256(Buffer.from(scope, "utf8"));
      const privKeyHex = privKey.toString("hex");
      const publicKeyHex = eccrypto.getPublic(privKey).toString("hex");
      try {
        const encData = await httpHelpers.get(`${this.storageServerUrl}/store/get?key=${publicKeyHex}`);
        if (encData.message) {
          const currentLoginDetails = await metadataHelpers.decryptData(privKeyHex, encData.message);
          return currentLoginDetails;
        }
      } catch (error) {
        if (error.status === 404) {
          loglevel.warn(error, "Session likely expired");
        } else {
          throw error;
        }
      }
    }
  }
  clearLoginDetailsStorage(scope) {
    if (!this.isInitialized) throw new Error("StorageHelper is not initialized");
    if (this.localStorageAvailable) window.localStorage.removeItem(`torus_login_${scope}`);
    // No need to clear server details cause they auto expire and scope is never re-used for different login attempts
  }
  clearOrphanedLoginDetails() {
    if (!this.isInitialized) throw new Error("StorageHelper is not initialized");
    if (!this.localStorageAvailable) return;
    const allStorageKeys = Object.keys(window.localStorage);
    allStorageKeys.forEach(key => {
      if (key.startsWith("torus_login_")) {
        window.localStorage.removeItem(key);
      }
    });
    // No need to clear server details cause they auto expire and scope is never re-used for different login attempts
  }
}

module.exports = StorageHelper;
