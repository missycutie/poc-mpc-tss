'use strict';

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var httpHelpers = require('@toruslabs/http-helpers');
var deepmerge = require('deepmerge');
var helpers = require('../utils/helpers.js');
var loglevel = require('../utils/loglevel.js');
var AbstractLoginHandler = require('./AbstractLoginHandler.js');

const _excluded = ["access_token", "id_token"];
class PasswordlessHandler extends AbstractLoginHandler {
  constructor(params) {
    super(params);
    _defineProperty(this, "SCOPE", "openid profile email");
    _defineProperty(this, "RESPONSE_TYPE", "token id_token");
    _defineProperty(this, "PROMPT", "login");
    this.setFinalUrl();
  }
  setFinalUrl() {
    const {
      domain
    } = this.params.jwtParams;
    const domainUrl = helpers.validateAndConstructUrl(domain);
    domainUrl.pathname = "/passwordless/start";
    this.finalURL = domainUrl;
  }
  async getUserInfo(params) {
    const {
      idToken,
      accessToken
    } = params;
    const {
      domain,
      verifierIdField,
      isVerifierIdCaseSensitive
    } = this.params.jwtParams;
    try {
      const domainUrl = new URL(domain);
      const userInfo = await httpHelpers.get(`${helpers.padUrlString(domainUrl)}userinfo`, {
        headers: {
          Authorization: `Bearer ${accessToken}`
        }
      });
      const {
        picture,
        name,
        email
      } = userInfo;
      return {
        email,
        name,
        profileImage: picture,
        verifierId: helpers.getVerifierId(userInfo, this.params.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),
        verifier: this.params.verifier,
        typeOfLogin: this.params.typeOfLogin
      };
    } catch (error) {
      loglevel.error(error);
      const decodedToken = helpers.decodeToken(idToken).payload;
      const {
        name,
        email,
        picture
      } = decodedToken;
      return {
        profileImage: picture,
        name,
        email,
        verifierId: helpers.getVerifierId(decodedToken, this.params.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),
        verifier: this.params.verifier,
        typeOfLogin: this.params.typeOfLogin
      };
    }
  }
  async handleLoginWindow() {
    const {
      BroadcastChannel
    } = await import('@toruslabs/broadcast-channel');
    return new Promise((resolve, reject) => {
      if (this.params.redirectToOpener) {
        reject(new Error("Cannot use redirect to opener for passwordless"));
        return;
      }
      const handleData = ev => {
        try {
          const {
            error,
            data
          } = ev;
          const _ref = data || {},
            {
              instanceParams,
              hashParams: {
                access_token: accessToken,
                id_token: idToken
              }
            } = _ref,
            rest = _objectWithoutProperties(_ref.hashParams, _excluded);
          if (error) {
            loglevel.error(ev.error);
            reject(new Error(error));
            return;
          }
          if (ev.data && instanceParams.verifier === this.params.verifier) {
            loglevel.info(ev.data);
            resolve(_objectSpread(_objectSpread({
              accessToken,
              idToken: idToken || ""
            }, rest), {}, {
              state: instanceParams
            }));
          }
        } catch (error) {
          loglevel.error(error);
          reject(error);
        }
      };
      const bc = new BroadcastChannel(`redirect_channel_${this.nonce}`, helpers.broadcastChannelOptions);
      bc.addEventListener("message", async ev => {
        handleData(ev);
        bc.close();
      });
      try {
        const {
          connection = "email",
          login_hint
        } = this.params.jwtParams;
        const finalJwtParams = deepmerge({
          client_id: this.params.clientId,
          connection,
          email: connection === "email" ? login_hint : undefined,
          phone_number: connection === "sms" ? login_hint : undefined,
          send: "link",
          authParams: {
            scope: this.SCOPE,
            state: this.state,
            response_type: this.RESPONSE_TYPE,
            redirect_uri: this.params.redirect_uri,
            nonce: this.nonce,
            prompt: this.PROMPT
          }
        }, {
          authParams: this.params.jwtParams
        });
        // using stringify and parse to remove undefined params
        // This method is only resolved when the user clicks the email link
        httpHelpers.post(this.finalURL.href, JSON.parse(JSON.stringify(finalJwtParams))).then(response => {
          loglevel.info("posted", response);
          return undefined;
        }).catch(error => {
          loglevel.error(error);
          reject(error);
        });
      } catch (error) {
        loglevel.error(error);
        reject(error);
      }
    });
  }
}

module.exports = PasswordlessHandler;
