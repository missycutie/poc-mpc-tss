import { LOGIN } from '../utils/enums.js';
import DiscordHandler from './DiscordHandler.js';
import FacebookHandler from './FacebookHandler.js';
import GoogleHandler from './GoogleHandler.js';
import JwtHandler from './JwtHandler.js';
import MockLoginHandler from './MockLoginHandler.js';
import PasskeysHandler from './PasskeysHandler.js';
import PasswordlessHandler from './PasswordlessHandler.js';
import TwitchHandler from './TwitchHandler.js';
import Web3AuthPasswordlessHandler from './Web3AuthPasswordlessHandler.js';

const createHandler = params => {
  const {
    verifier,
    typeOfLogin,
    clientId,
    jwtParams
  } = params;
  if (!verifier || !typeOfLogin || !clientId) {
    throw new Error("Invalid params. Missing verifier, typeOfLogin or clientId");
  }
  const {
    domain,
    login_hint,
    id_token,
    access_token
  } = jwtParams || {};
  switch (typeOfLogin) {
    case LOGIN.GOOGLE:
      return new GoogleHandler(params);
    case LOGIN.FACEBOOK:
      return new FacebookHandler(params);
    case LOGIN.TWITCH:
      return new TwitchHandler(params);
    case LOGIN.DISCORD:
      return new DiscordHandler(params);
    case LOGIN.EMAIL_PASSWORDLESS:
    case LOGIN.SMS_PASSWORDLESS:
      if (!login_hint) throw new Error("Invalid params. Missing login_hint for web3auth passwordless login");
      return new Web3AuthPasswordlessHandler(params);
    case LOGIN.PASSWORDLESS:
      if (!domain || !login_hint) throw new Error("Invalid params. Missing domain or login_hint for passwordless login");
      return new PasswordlessHandler(params);
    case LOGIN.APPLE:
    case LOGIN.GITHUB:
    case LOGIN.LINKEDIN:
    case LOGIN.TWITTER:
    case LOGIN.WEIBO:
    case LOGIN.LINE:
    case LOGIN.EMAIL_PASSWORD:
    case LOGIN.JWT:
    case LOGIN.REDDIT:
      if (id_token || access_token) {
        return new MockLoginHandler(params);
      }
      if (!domain) throw new Error("Invalid params for jwt login. Missing domain");
      return new JwtHandler(params);
    case LOGIN.PASSKEYS:
      return new PasskeysHandler(params);
    default:
      throw new Error("Unsupported login type");
  }
};
var createHandler$1 = createHandler;

export { createHandler$1 as default };
