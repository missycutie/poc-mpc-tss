import { TORUS_SAPPHIRE_NETWORK, LEGACY_NETWORKS_ROUTE_MAP, KEY_TYPE } from '@toruslabs/constants';

const SAPPHIRE_NETWORK_URLS = {
  [TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET]: ["https://node-1.dev-node.web3auth.io", "https://node-2.dev-node.web3auth.io", "https://node-3.dev-node.web3auth.io", "https://node-4.dev-node.web3auth.io", "https://node-5.dev-node.web3auth.io"],
  [TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET]: ["https://node-1.node.web3auth.io", "https://node-2.node.web3auth.io", "https://node-3.node.web3auth.io", "https://node-4.node.web3auth.io", "https://node-5.node.web3auth.io"]
};
const getSSSEndpoints = (sapphireNetwork, legacyNetwork) => {
  const endpoints = SAPPHIRE_NETWORK_URLS[sapphireNetwork];
  if (!endpoints || endpoints.length === 0) {
    throw new Error(`Unsupported network: ${sapphireNetwork}`);
  }
  const routeIdentifier = LEGACY_NETWORKS_ROUTE_MAP[legacyNetwork];
  return endpoints.map(e => {
    if (routeIdentifier && routeIdentifier.networkIdentifier) {
      return `${e}/sss/${routeIdentifier.networkIdentifier}/jrpc`;
    }
    return `${e}/sss/jrpc`;
  });
};
const getRSSEndpoints = (sapphireNetwork, legacyNetwork) => {
  const endpoints = SAPPHIRE_NETWORK_URLS[sapphireNetwork];
  if (!endpoints || endpoints.length === 0) {
    throw new Error(`Unsupported network: ${sapphireNetwork}`);
  }
  const routeIdentifier = LEGACY_NETWORKS_ROUTE_MAP[legacyNetwork];
  return endpoints.map(e => {
    if (routeIdentifier && routeIdentifier.networkIdentifier) {
      return `${e}/rss/${routeIdentifier.networkIdentifier}`;
    }
    return `${e}/rss`;
  });
};
const getTSSEndpoints = (sapphireNetwork, legacyNetwork, keyType = KEY_TYPE.SECP256K1) => {
  const endpoints = SAPPHIRE_NETWORK_URLS[sapphireNetwork];
  if (!endpoints || endpoints.length === 0) {
    throw new Error(`Unsupported network: ${sapphireNetwork}`);
  }
  const tssPath = keyType === KEY_TYPE.ED25519 ? "tss-frost" : "tss";
  const routeIdentifier = LEGACY_NETWORKS_ROUTE_MAP[legacyNetwork];
  return endpoints.map(e => {
    if (routeIdentifier && routeIdentifier.networkIdentifier) {
      return `${e}/${tssPath}/${routeIdentifier.networkIdentifier}`;
    }
    return `${e}/${tssPath}`;
  });
};

export { SAPPHIRE_NETWORK_URLS, getRSSEndpoints, getSSSEndpoints, getTSSEndpoints };
