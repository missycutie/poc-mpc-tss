import BN from "bn.js";
import { KeyType, ServersInfo } from "./rss";
import { EncryptedMessage, PointHex } from "./utils";
type RSSRound1Request = {
    round_name: string;
    server_set: string;
    server_index: number;
    old_servers_info: ServersInfo;
    new_servers_info: ServersInfo;
    old_user_share_index: number;
    user_temp_pubkey: PointHex;
    target_index: number[];
    auth: unknown;
    key_type: KeyType;
};
type RSSRound1ResponseData = {
    master_poly_commits: PointHex[];
    server_poly_commits: PointHex[];
    target_encryptions: {
        user_enc: EncryptedMessage;
        server_encs: EncryptedMessage[];
    };
};
type RSSRound1Response = {
    target_index: number[];
    data: RSSRound1ResponseData[];
};
type RSSRound2RequestData = {
    master_commits: PointHex[];
    server_commits: PointHex[];
    server_encs: EncryptedMessage[];
    factor_pubkeys: PointHex[];
};
type RSSRound2Request = {
    round_name: string;
    server_index: number;
    target_index: number[];
    data: RSSRound2RequestData[];
    key_type: KeyType;
};
type RSSRound2ResponseData = {
    encs: EncryptedMessage[];
};
type RSSRound2Response = {
    target_index: number[];
    data: RSSRound2ResponseData[];
};
export declare function RSSRound1Handler(body: RSSRound1Request, getTSSShare: (label: string) => Promise<BN>): Promise<RSSRound1Response>;
export declare function RSSRound2Handler(body: RSSRound2Request, getPrivKey: () => Promise<BN>): Promise<RSSRound2Response>;
export declare class MockServer {
    pubKey: PointHex;
    shareDB: {
        [label: string]: BN;
    };
    store: {
        [key: string]: string;
    };
    tssNonce: {
        [vidAndTSSTag: string]: number;
    };
    constructor();
    getTSSShare(label: string): Promise<BN>;
    getPrivKey(): Promise<BN>;
    get(path: string): Promise<PointHex | Record<string, unknown>>;
    post(path: string, data: any): Promise<RSSRound1Response | RSSRound2Response | Record<string, unknown>>;
    RSSRound1Handler(body: RSSRound1Request, getTSSShare: (label: string) => Promise<BN>): Promise<RSSRound1Response>;
    RSSRound2Handler(body: RSSRound2Request, getPrivKey: () => Promise<BN>): Promise<RSSRound2Response>;
}
export {};
