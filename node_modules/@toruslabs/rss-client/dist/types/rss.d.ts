import { CustomOptions, Data } from "@toruslabs/http-helpers";
import BN from "bn.js";
import { curve, ec as EC } from "elliptic";
import { EncryptedMessage, PointHex } from "./utils";
export type KeyType = "secp256k1" | "ed25519";
export interface IMockServer {
    get(path: string): Promise<unknown>;
    post(path: string, data?: Data): Promise<unknown>;
}
export declare function getEndpoint<T>(endpoint: string | IMockServer, path: string, options_?: RequestInit, customOptions?: CustomOptions): Promise<unknown>;
export declare function postEndpoint<T>(endpoint: string | IMockServer, path: string, data?: Data, options_?: RequestInit, customOptions?: CustomOptions): Promise<T>;
export type ImportOptions = {
    importKey: BN;
    newLabel: string;
    sigs: string[];
    dkgNewPub: PointHex;
    targetIndexes: number[];
    selectedServers: number[];
    factorPubs: PointHex[];
};
export type RSSClientOptions = {
    tssPubKey: PointHex;
    serverEndpoints: string[] | IMockServer[];
    serverThreshold: number;
    serverPubKeys: PointHex[];
    keyType: KeyType;
    tempKey?: BN;
};
export type ServersInfo = {
    pubkeys: PointHex[];
    threshold: number;
    selected: number[];
};
export type RefreshOptions = {
    oldLabel: string;
    newLabel: string;
    sigs: string[];
    dkgNewPub: PointHex;
    inputShare: BN;
    inputIndex: number;
    targetIndexes: number[];
    selectedServers: number[];
    factorPubs: PointHex[];
};
export type RSSRound1ResponseData = {
    master_poly_commits: PointHex[];
    server_poly_commits: PointHex[];
    target_encryptions: {
        user_enc: EncryptedMessage;
        server_encs: EncryptedMessage[];
    };
};
export type RSSRound1Response = {
    target_index: number[];
    data: RSSRound1ResponseData[];
};
export type ServerFactorEnc = {
    data: EncryptedMessage[][];
    target_index: number[];
};
export type RefreshResponse = {
    targetIndex: number;
    factorPub: PointHex;
    serverFactorEncs: EncryptedMessage[];
    userFactorEnc: EncryptedMessage;
};
export type RecoverOptions = {
    factorKey: BN;
    serverEncs: EncryptedMessage[];
    userEnc: EncryptedMessage;
    selectedServers: number[];
    keyType: KeyType;
};
export type RecoverResponse = {
    tssShare: BN;
};
export type IData = {
    master_poly_commits: PointHex[];
    server_poly_commits: PointHex[];
    target_encryptions: {
        user_enc: EncryptedMessage;
        server_encs: EncryptedMessage[];
    };
}[];
export declare class RSSClient {
    tssPubKey: curve.base.BasePoint;
    tempPrivKey: BN;
    tempPubKey: curve.base.BasePoint;
    serverEndpoints: string[] | IMockServer[];
    serverThreshold: number;
    serverPubKeys: PointHex[];
    ecCurve: EC;
    keyType: KeyType;
    constructor(opts: RSSClientOptions);
    import(opts: ImportOptions): Promise<RefreshResponse[]>;
    refresh(opts: RefreshOptions): Promise<RefreshResponse[]>;
}
export declare function recover(opts: RecoverOptions): Promise<RecoverResponse>;
