import BN from "bn.js";
import { curve, ec as EC } from "elliptic";
export declare const ecCurveSecp256k1: EC;
export type PointHex = {
    x: string | null;
    y: string | null;
};
export declare function randomSelection(arr: number[], num: number): number[];
export declare function ecPoint(ecCurve: EC, p: PointHex): curve.base.BasePoint;
export declare function hexPoint(p: curve.base.BasePoint): PointHex;
export type EncryptedMessage = {
    ciphertext: string;
    ephemPublicKey: string;
    iv: string;
    mac: string;
};
export declare function encrypt(publicKey: Buffer, msg: Buffer): Promise<EncryptedMessage>;
export declare function decrypt(privKey: Buffer, msg: EncryptedMessage): Promise<Buffer>;
export declare function generatePolynomial(degree: number, yIntercept: BN, randomElement: () => BN): BN[];
export declare function getShare(polynomial: BN[], index: BN | number, modulus: BN): BN;
export declare function dotProduct(arr1: BN[], arr2: BN[], modulus?: BN): BN;
export declare function getLagrangeCoeff(_allIndexes: number[] | BN[], _myIndex: number | BN, _target: number | BN, modulus: BN): BN;
export declare function lagrangeInterpolation(shares: BN[], nodeIndex: BN[], modulus: BN): BN;
