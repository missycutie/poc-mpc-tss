/**
* `sign` runs the threshold signing protocol.
* @param {RngSeed} seed
* @param {any} mb
* @param {Uint32Array} counterparties
* @param {KeyShare} key
* @param {Uint8Array} msg
* @returns {Promise<Signature>}
*/
export function sign(seed: RngSeed, mb: any, counterparties: Uint32Array, key: KeyShare, msg: Uint8Array): Promise<Signature>;
/**
* `generate_key` runs the key generation protocol.
* @param {RngSeed} seed
* @param {any} mb
* @param {Uint32Array} counterparties
* @param {number} threshold
* @returns {Promise<KeyShare>}
*/
export function generate_key(seed: RngSeed, mb: any, counterparties: Uint32Array, threshold: number): Promise<KeyShare>;
/**
*/
export class KeyShare {
    static __wrap(ptr: any): any;
    /**
    * @param {number} x_coord
    * @param {string} key_share_hex
    * @param {string} pub_key_hex
    * @returns {KeyShare}
    */
    static from_raw(x_coord: number, key_share_hex: string, pub_key_hex: string): KeyShare;
    /**
    * @param {number} x_coord
    * @param {Scalar} key_share
    * @param {Point} pub_key
    */
    constructor(x_coord: number, key_share: Scalar, pub_key: Point);
    __destroy_into_raw(): number;
    ptr: number;
    free(): void;
}
/**
*/
export class Point {
    static __wrap(ptr: any): any;
    /**
    * Creates a Point from a hexadecimal string.
    * @param {string} val
    * @returns {Point}
    */
    static from_hex(val: string): Point;
    /**
    * @param {Uint8Array} val
    */
    constructor(val: Uint8Array);
    __destroy_into_raw(): number;
    ptr: number;
    free(): void;
}
/**
*/
export class RngSeed {
    static __wrap(ptr: any): any;
    /**
    * @param {Uint8Array} val
    */
    constructor(val: Uint8Array);
    __destroy_into_raw(): number;
    ptr: number;
    free(): void;
}
/**
*/
export class Scalar {
    static __wrap(ptr: any): any;
    /**
    * Creates a Scalar from a hexadecimal string.
    * @param {string} val
    * @returns {Scalar}
    */
    static from_hex(val: string): Scalar;
    /**
    * @param {Uint8Array} val
    */
    constructor(val: Uint8Array);
    __destroy_into_raw(): number;
    ptr: number;
    free(): void;
}
/**
*/
export class Signature {
    static __wrap(ptr: any): any;
    __destroy_into_raw(): number;
    ptr: number;
    free(): void;
    /**
    * @returns {Uint8Array}
    */
    to_bytes(): Uint8Array;
    /**
    * @returns {string}
    */
    to_hex(): string;
}
export default init;
export function initSync(module: any): any;
declare function init(input: any): Promise<any>;
