import BN from 'bn.js';
import EC from 'elliptic';

class Ed25519Curve extends EC.ec {
  constructor() {
    super("ed25519");
  }
  bufferToScalar(b) {
    return new BN(b, "le");
  }
  generateScalar() {
    return this.genKeyPair().getPrivate();
  }
  scalarToBuffer(s, buf) {
    s.toString("hex");
    return s.toArrayLike(buf, "le", 32);
  }
  pointToBuffer(p, buf) {
    // Each y has 2 possible x-values, x and -x. When compressing, it's enough to
    // store y and use the last byte to encode the sign of x.
    const x = p.getX();
    const y = p.getY();
    const b = y.toArrayLike(buf, "le", 32);
    b[b.length - 1] |= x.and(new BN(1)).eqn(1) ? 0x80 : 0x00;
    return b;
  }
}

export { Ed25519Curve };
//# sourceMappingURL=ellipticWrapper.esm.js.map
