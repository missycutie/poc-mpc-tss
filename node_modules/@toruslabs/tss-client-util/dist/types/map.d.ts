export declare class AwaitableMap<K, V> {
    private map;
    private queue;
    get size(): number;
    getSync(k: K): V | undefined;
    /**
     * Gets the value at key `k`, or waits for the duration of `timeout` for a
     * corresponding value to be set. If `timeout` is reached, returns
     * `undefined`.
     */
    get(k: K, timeout?: number): Promise<V | undefined>;
    set(k: K, v: V): void;
    delete(k: K): void;
    forEach(callbackfn: (value: V, key: K) => void): void;
    clear(): void;
}
export declare class MapQueue<K, V> {
    private buffer;
    private queue;
    /**
     * Pops the next value queued for key `k` from the buffer, or waits for the
     * duration of `timeout` for a corresponding value to arrive. If `timeout` is
     * reached, returns `undefined`.
     */
    pop(k: K, timeout?: number): Promise<V | undefined>;
    push(k: K, v: V): void;
    delete(k: K): void;
    forEach(callbackfn: (value: V, key: K) => void): void;
    clear(): void;
}
