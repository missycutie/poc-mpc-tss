import BN from "bn.js";
export declare function fraction(nom: BN, denom: BN, modulus: BN): BN;
export declare function lagrangeCoefficient(x_coords: BN[], target_coeff: number, target_x: BN, modulus: BN): BN;
export declare function lagrangeCoefficients(x_coords: BN[] | number[], target_x: BN | number, modulus: BN): BN[];
/**
 * Derive share coefficients for converting a 2-level Shamir secret sharing into
 * a 1-level Shamir secret sharing.
 *
 * Input:
 *
 * Level 1: [SERVERS, CLIENT]
 * Level 2: [SERVER_1, ... , SERVER_N]
 *
 * Ouput:
 *
 * Level 1: [SCOEFF_1 * SERVER_1, ..., SCOEFF_N * SERVER_N, C_COEFF * CLIENT]
 *
 * @param serverXCoords - The x-coordinates of the selected servers.
 * @param clientXCoord - The target x-coordinate of the client.
 * @param modulus - The finite field modulus.
 * @param serversXCoordL1 - The x-coordinate of the servers at level 1.
 * @param clientXCoordL1 - The x-coordinate of the client at level 1.
 * @returns - The share coefficients for the client and the servers.
 */
export declare function deriveShareCoefficients(serverXCoords: number[], clientXCoord: number, modulus: BN, serversXCoordL1?: number, clientXCoordL1?: number): {
    serverCoefficients: BN[];
    clientCoefficient: BN;
};
