/**
* @returns {number}
*/
export function batch_size(): number;
/**
* @param {string} state
* @returns {number}
*/
export function random_generator(state: string): number;
/**
* @param {number} rng
*/
export function random_generator_free(rng: number): void;
/**
* @param {string} session
* @param {number} player_index
* @param {number} player_count
* @param {number} threshold
* @param {string} share
* @param {string} pubkey
* @returns {number}
*/
export function threshold_signer(session: string, player_index: number, player_count: number, threshold: number, share: string, pubkey: string): number;
/**
* @param {number} signer
*/
export function threshold_signer_free(signer: number): void;
/**
* @param {number} signer
* @param {number} rng
* @returns {Promise<any>}
*/
export function setup(signer: number, rng: number): Promise<any>;
/**
* @param {Uint8Array} parties
* @param {number} signer
* @param {number} rng
* @returns {Promise<any>}
*/
export function precompute(parties: Uint8Array, signer: number, rng: number): Promise<any>;
/**
* @param {string} msg
* @param {boolean} hash_only
* @param {any} precompute
* @returns {any}
*/
export function local_sign(msg: string, hash_only: boolean, precompute: any): any;
/**
* @param {any} precompute
* @returns {any}
*/
export function get_r_from_precompute(precompute: any): any;
/**
* @param {string} msg
* @param {boolean} hash_only
* @param {any} r
* @param {any[]} sig_frags
* @param {string} pubkey
* @returns {any}
*/
export function local_verify(msg: string, hash_only: boolean, r: any, sig_frags: any[], pubkey: string): any;
/**
* @param {Uint8Array} counterparties
* @param {string} msg
* @param {boolean} hash_only
* @param {number} signer
* @param {number} rng
* @returns {Promise<any>}
*/
export function sign(counterparties: Uint8Array, msg: string, hash_only: boolean, signer: number, rng: number): Promise<any>;
export default init;
export function initSync(module: any): any;
declare function init(input: any): Promise<any>;
