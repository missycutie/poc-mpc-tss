import _defineProperty from '@babel/runtime/helpers/defineProperty';

function base64ToBytes(base64) {
  const binString = atob(base64);
  return Uint8Array.from(binString, m => m.codePointAt(0));
}
function bytesToBase64(bytes) {
  const binString = String.fromCodePoint(...bytes);
  return btoa(binString);
}

// MemoryManager helps with Wasm memory management. It keeps track of allocated
// objects and can free them conveniently altogether.
class MemoryManager {
  constructor() {
    _defineProperty(this, "items", void 0);
    this.items = [];
  }

  // Add object to collection.
  add(obj) {
    this.items.push(obj);
    return obj;
  }

  // Free all collected objects.
  free() {
    this.items.forEach(e => {
      try {
        e.free();
      } catch (err) {
        console.log(`Warning: freeing value: ${err}`);
      }
    });
    this.items = [];
  }
}

export { MemoryManager, base64ToBytes, bytesToBase64 };
