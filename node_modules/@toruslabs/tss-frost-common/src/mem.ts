interface Freeable {
  free(): void;
}

// MemoryManager helps with Wasm memory management. It keeps track of allocated
// objects and can free them conveniently altogether.
export class MemoryManager {
  items: Freeable[];

  constructor() {
    this.items = [];
  }

  // Add object to collection.
  add<T extends Freeable>(obj: T): T {
    this.items.push(obj);
    return obj;
  }

  // Free all collected objects.
  free() {
    this.items.forEach((e) => {
      try {
        e.free();
      } catch (err) {
        console.log(`Warning: freeing value: ${err}`);
      }
    });
    this.items = [];
  }
}
