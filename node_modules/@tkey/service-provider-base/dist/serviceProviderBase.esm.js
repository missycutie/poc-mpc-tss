import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { encrypt, decrypt, toPrivKeyECC, toPrivKeyEC, getPubKeyECC } from '@tkey/common-types';
import BN from 'bn.js';

class ServiceProviderBase {
  constructor({
    enableLogging = false,
    postboxKey
  }) {
    _defineProperty(this, "enableLogging", void 0);
    // For easy serialization
    _defineProperty(this, "postboxKey", void 0);
    _defineProperty(this, "serviceProviderName", void 0);
    _defineProperty(this, "migratableKey", null);
    this.enableLogging = enableLogging;
    this.postboxKey = new BN(postboxKey, "hex");
    this.serviceProviderName = "ServiceProviderBase";
  }
  static fromJSON(value) {
    const {
      enableLogging,
      postboxKey,
      serviceProviderName
    } = value;
    if (serviceProviderName !== "ServiceProviderBase") return undefined;
    return new ServiceProviderBase({
      enableLogging,
      postboxKey
    });
  }
  async encrypt(msg) {
    const publicKey = this.retrievePubKey("ecc");
    return encrypt(publicKey, msg);
  }
  async decrypt(msg) {
    return decrypt(toPrivKeyECC(this.postboxKey), msg);
  }
  retrievePubKeyPoint() {
    return toPrivKeyEC(this.postboxKey).getPublic();
  }
  retrievePubKey(type) {
    if (type === "ecc") {
      return getPubKeyECC(this.postboxKey);
    }
    throw new Error("Unsupported pub key type");
  }
  sign(msg) {
    const tmp = new BN(msg, "hex");
    const sig = toPrivKeyEC(this.postboxKey).sign(tmp.toString("hex"));
    return Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN(0).toString(16, 2), "hex").toString("base64");
  }
  toJSON() {
    return {
      enableLogging: this.enableLogging,
      postboxKey: this.postboxKey.toString("hex"),
      serviceProviderName: this.serviceProviderName
    };
  }
}
var ServiceProviderBase$1 = ServiceProviderBase;

export { ServiceProviderBase$1 as ServiceProviderBase };
