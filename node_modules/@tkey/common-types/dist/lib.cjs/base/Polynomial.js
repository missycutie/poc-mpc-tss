'use strict';

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var BN = require('bn.js');
var utils = require('../utils.js');
var BNUtils = require('./BNUtils.js');
var PublicPolynomial = require('./PublicPolynomial.js');
var Share = require('./Share.js');

// @flow

class Polynomial {
  constructor(polynomial) {
    _defineProperty(this, "polynomial", void 0);
    _defineProperty(this, "publicPolynomial", void 0);
    this.polynomial = polynomial;
  }
  static fromJSON(value) {
    const {
      polynomial
    } = value;
    return new Polynomial(polynomial.map(x => new BN(x, "hex")));
  }
  getThreshold() {
    return this.polynomial.length;
  }
  polyEval(x) {
    const tmpX = new BN(x, "hex");
    let xi = new BN(tmpX);
    let sum = new BN(0);
    sum = sum.add(this.polynomial[0]);
    for (let i = 1; i < this.polynomial.length; i += 1) {
      const tmp = xi.mul(this.polynomial[i]);
      sum = sum.add(tmp);
      sum = sum.umod(utils.secp256k1.curve.n);
      xi = xi.mul(new BN(tmpX));
      xi = xi.umod(utils.secp256k1.curve.n);
    }
    return sum;
  }
  generateShares(shareIndexes) {
    const newShareIndexes = shareIndexes.map(index => {
      if (typeof index === "number") {
        return new BN(index);
      }
      if (index instanceof BN) {
        return index;
      }
      if (typeof index === "string") {
        return new BN(index, "hex");
      }
      return index;
    });
    const shares = {};
    for (let x = 0; x < newShareIndexes.length; x += 1) {
      shares[newShareIndexes[x].toString("hex")] = new Share(newShareIndexes[x], this.polyEval(newShareIndexes[x]));
    }
    return shares;
  }
  getPublicPolynomial() {
    const polynomialCommitments = [];
    for (let i = 0; i < this.polynomial.length; i += 1) {
      polynomialCommitments.push(BNUtils.getPubKeyPoint(this.polynomial[i]));
    }
    this.publicPolynomial = new PublicPolynomial(polynomialCommitments);
    return this.publicPolynomial;
  }
  getPolynomialID() {
    return this.publicPolynomial.polynomialId;
  }
  toJSON() {
    return {
      polynomial: this.polynomial.map(x => x.toString("hex"))
    };
  }
}
var Polynomial$1 = Polynomial;

module.exports = Polynomial$1;
