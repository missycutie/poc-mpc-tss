import BN from "bn.js";
import { BNString, EllipticCurve, EllipticPoint, IPoint, StringifiedType } from "../baseTypes/commonTypes";
declare class Point implements IPoint {
    x: BN | null;
    y: BN | null;
    constructor(x: BNString, y: BNString);
    static fromScalar(s: BN, ec: EllipticCurve): Point;
    /**
     * @deprecated Use `fromSEC1` instead.
     */
    static fromCompressedPub(value: string): Point;
    static fromJSON(value: StringifiedType): Point;
    static fromElliptic(p: EllipticPoint): Point;
    /**
     * Construct a point from SEC1 format.
     */
    static fromSEC1(ec: EllipticCurve, encodedPoint: string): Point;
    /**
     * @deprecated Use `toSEC1` instead.
     *
     * complies with EC and elliptic pub key types
     */
    encode(enc: string): Buffer;
    toEllipticPoint(ec: EllipticCurve): EllipticPoint;
    /**
     * Returns this point encoded in SEC1 format.
     * @param ec - Curve which point is on.
     * @param compressed - Whether to use compressed format.
     * @returns The SEC1-encoded point.
     */
    toSEC1(ec: EllipticCurve, compressed?: boolean): Buffer;
    toJSON(): StringifiedType;
    isIdentity(): boolean;
    equals(p: Point): boolean;
}
export default Point;
