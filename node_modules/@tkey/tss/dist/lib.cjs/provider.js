'use strict';

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var commonTypes = require('@tkey/common-types');
var serviceProviderTorus = require('@tkey/service-provider-torus');
var util = require('./util.js');

class TSSTorusServiceProvider extends serviceProviderTorus.TorusServiceProvider {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "verifierName", void 0);
    _defineProperty(this, "verifierId", void 0);
  }
  async getRSSNodeDetails() {
    if (!this.verifierId) throw new Error("no verifierId, not logged in");
    if (!this.verifierName) throw new Error("no verifierName, not logged in");
    const {
      torusNodeRSSEndpoints: tssNodeEndpoints,
      torusNodePub: torusPubKeys
    } = await this.customAuthInstance.nodeDetailManager.getNodeDetails({
      verifier: this.verifierName,
      verifierId: this.verifierId
    });
    return {
      serverEndpoints: tssNodeEndpoints,
      serverPubKeys: torusPubKeys.map(key => {
        return {
          x: key.X,
          y: key.Y
        };
      }),
      serverThreshold: Math.ceil(tssNodeEndpoints.length / 2)
    };
  }
  async getTSSPubKey(tssTag, tssNonce) {
    if (!this.verifierName || !this.verifierId) throw new Error("verifier userinfo not found, not logged in yet");
    const nodeDetails = await this.customAuthInstance.nodeDetailManager.getNodeDetails({
      verifier: this.verifierName,
      verifierId: this.verifierId
    });
    const tssServerPub = await this.customAuthInstance.torus.getPublicAddress(nodeDetails.torusNodeSSSEndpoints, nodeDetails.torusNodePub, {
      verifier: this.verifierName,
      verifierId: this.verifierId,
      extendedVerifierId: util.getExtendedVerifierId(this.verifierId, tssTag, tssNonce)
    });
    return {
      pubKey: new commonTypes.Point(tssServerPub.finalKeyData.X, tssServerPub.finalKeyData.Y),
      nodeIndexes: tssServerPub.nodesData.nodeIndexes || []
    };
  }
  getVerifierNameVerifierId() {
    return `${this.verifierName}\u001c${this.verifierId}`;
  }
  async triggerLogin(params) {
    const obj = await super.triggerLogin(params);
    if (obj) {
      const {
        verifier,
        verifierId
      } = obj.userInfo;
      this.verifierName = verifier;
      this.verifierId = verifierId;
    }
    return obj;
  }
  async triggerAggregateLogin(params) {
    const obj = await super.triggerAggregateLogin(params);
    if (obj) {
      const {
        verifier,
        verifierId
      } = obj.userInfo[0];
      this.verifierName = verifier;
      this.verifierId = verifierId;
    }
    return obj;
  }
}

exports.TSSTorusServiceProvider = TSSTorusServiceProvider;
