'use strict';

var commonTypes = require('@tkey/common-types');
var BN = require('bn.js');

const kCombinations = (s, k) => {
  let set = s;
  if (typeof set === "number") {
    set = Array.from({
      length: set
    }, (_, i) => i);
  }
  if (k > set.length || k <= 0) {
    return [];
  }
  if (k === set.length) {
    return [set];
  }
  if (k === 1) {
    return set.reduce((acc, cur) => [...acc, [cur]], []);
  }
  const combs = [];
  let tailCombs = [];
  for (let i = 0; i <= set.length - k + 1; i += 1) {
    tailCombs = kCombinations(set.slice(i + 1), k - 1);
    for (let j = 0; j < tailCombs.length; j += 1) {
      combs.push([set[i], ...tailCombs[j]]);
    }
  }
  return combs;
};
function generateSalt(ec) {
  return ec.genKeyPair().getPrivate().toString("hex", 64);
}
function getLagrangeCoeffs(ecCurve, _allIndexes, _myIndex, _target = 0) {
  const allIndexes = _allIndexes.map(i => new BN(i));
  const myIndex = new BN(_myIndex);
  const target = new BN(_target);
  let upper = new BN(1);
  let lower = new BN(1);
  for (let j = 0; j < allIndexes.length; j += 1) {
    if (myIndex.cmp(allIndexes[j]) !== 0) {
      let tempUpper = target.sub(allIndexes[j]);
      tempUpper = tempUpper.umod(ecCurve.curve.n);
      upper = upper.mul(tempUpper);
      upper = upper.umod(ecCurve.curve.n);
      let tempLower = myIndex.sub(allIndexes[j]);
      tempLower = tempLower.umod(ecCurve.curve.n);
      lower = lower.mul(tempLower).umod(ecCurve.curve.n);
    }
  }
  return upper.mul(lower.invm(ecCurve.curve.n)).umod(ecCurve.curve.n);
}
function lagrangeInterpolation(ecCurve, shares, nodeIndex) {
  if (shares.length !== nodeIndex.length) {
    return null;
  }
  let secret = new BN(0);
  for (let i = 0; i < shares.length; i += 1) {
    let upper = new BN(1);
    let lower = new BN(1);
    for (let j = 0; j < shares.length; j += 1) {
      if (i !== j) {
        upper = upper.mul(nodeIndex[j].neg());
        upper = upper.umod(ecCurve.curve.n);
        let temp = nodeIndex[i].sub(nodeIndex[j]);
        temp = temp.umod(ecCurve.curve.n);
        lower = lower.mul(temp).umod(ecCurve.curve.n);
      }
    }
    let delta = upper.mul(lower.invm(ecCurve.curve.n)).umod(ecCurve.curve.n);
    delta = delta.mul(shares[i]).umod(ecCurve.curve.n);
    secret = secret.add(delta);
  }
  return secret.umod(ecCurve.curve.n);
}
function pointToHex(p) {
  return {
    x: p.x.toString(16, 64),
    y: p.y.toString(16, 64)
  };
}
function getPubKeyPoint(s, ec) {
  const p = ec.g.mul(s);
  return commonTypes.Point.fromElliptic(p);
}
const DELIMITERS = {
  Delimiter1: "\u001c",
  Delimiter2: "\u0015",
  Delimiter3: "\u0016",
  Delimiter4: "\u0017"
};
function getExtendedVerifierId(verifierId, tssTag, tssNonce) {
  return `${verifierId}${DELIMITERS.Delimiter2}${tssTag}${DELIMITERS.Delimiter3}${tssNonce}`;
}
function getEd25519SeedStoreDomainKey(tssTag) {
  return tssTag ? `ed25519Seed/${tssTag}` : "ed25519Seed";
}

exports.DELIMITERS = DELIMITERS;
exports.generateSalt = generateSalt;
exports.getEd25519SeedStoreDomainKey = getEd25519SeedStoreDomainKey;
exports.getExtendedVerifierId = getExtendedVerifierId;
exports.getLagrangeCoeffs = getLagrangeCoeffs;
exports.getPubKeyPoint = getPubKeyPoint;
exports.kCombinations = kCombinations;
exports.lagrangeInterpolation = lagrangeInterpolation;
exports.pointToHex = pointToHex;
