import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { Point, decrypt, KeyType, encrypt, secp256k1 } from '@tkey/common-types';
import { TorusServiceProvider } from '@tkey/service-provider-torus';
import BN from 'bn.js';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { TKey, CoreError } from '@tkey/core';
import { dotProduct, hexPoint, randomSelection, RSSClient, ecPoint } from '@toruslabs/rss-client';
export { randomSelection } from '@toruslabs/rss-client';
import { getEd25519ExtendedPublicKey, getSecpKeyFromEd25519 } from '@toruslabs/torus.js';
import { ec } from 'elliptic';
import { keccak256 } from 'ethereum-cryptography/keccak';

const kCombinations = (s, k) => {
  let set = s;
  if (typeof set === "number") {
    set = Array.from({
      length: set
    }, (_, i) => i);
  }
  if (k > set.length || k <= 0) {
    return [];
  }
  if (k === set.length) {
    return [set];
  }
  if (k === 1) {
    return set.reduce((acc, cur) => [...acc, [cur]], []);
  }
  const combs = [];
  let tailCombs = [];
  for (let i = 0; i <= set.length - k + 1; i += 1) {
    tailCombs = kCombinations(set.slice(i + 1), k - 1);
    for (let j = 0; j < tailCombs.length; j += 1) {
      combs.push([set[i], ...tailCombs[j]]);
    }
  }
  return combs;
};
function generateSalt(ec) {
  return ec.genKeyPair().getPrivate().toString("hex", 64);
}
function getLagrangeCoeffs(ecCurve, _allIndexes, _myIndex, _target = 0) {
  const allIndexes = _allIndexes.map(i => new BN(i));
  const myIndex = new BN(_myIndex);
  const target = new BN(_target);
  let upper = new BN(1);
  let lower = new BN(1);
  for (let j = 0; j < allIndexes.length; j += 1) {
    if (myIndex.cmp(allIndexes[j]) !== 0) {
      let tempUpper = target.sub(allIndexes[j]);
      tempUpper = tempUpper.umod(ecCurve.curve.n);
      upper = upper.mul(tempUpper);
      upper = upper.umod(ecCurve.curve.n);
      let tempLower = myIndex.sub(allIndexes[j]);
      tempLower = tempLower.umod(ecCurve.curve.n);
      lower = lower.mul(tempLower).umod(ecCurve.curve.n);
    }
  }
  return upper.mul(lower.invm(ecCurve.curve.n)).umod(ecCurve.curve.n);
}
function lagrangeInterpolation(ecCurve, shares, nodeIndex) {
  if (shares.length !== nodeIndex.length) {
    return null;
  }
  let secret = new BN(0);
  for (let i = 0; i < shares.length; i += 1) {
    let upper = new BN(1);
    let lower = new BN(1);
    for (let j = 0; j < shares.length; j += 1) {
      if (i !== j) {
        upper = upper.mul(nodeIndex[j].neg());
        upper = upper.umod(ecCurve.curve.n);
        let temp = nodeIndex[i].sub(nodeIndex[j]);
        temp = temp.umod(ecCurve.curve.n);
        lower = lower.mul(temp).umod(ecCurve.curve.n);
      }
    }
    let delta = upper.mul(lower.invm(ecCurve.curve.n)).umod(ecCurve.curve.n);
    delta = delta.mul(shares[i]).umod(ecCurve.curve.n);
    secret = secret.add(delta);
  }
  return secret.umod(ecCurve.curve.n);
}
function pointToHex(p) {
  return {
    x: p.x.toString(16, 64),
    y: p.y.toString(16, 64)
  };
}
function getPubKeyPoint(s, ec) {
  const p = ec.g.mul(s);
  return Point.fromElliptic(p);
}
const DELIMITERS = {
  Delimiter1: "\u001c",
  Delimiter2: "\u0015",
  Delimiter3: "\u0016",
  Delimiter4: "\u0017"
};
function getExtendedVerifierId(verifierId, tssTag, tssNonce) {
  return `${verifierId}${DELIMITERS.Delimiter2}${tssTag}${DELIMITERS.Delimiter3}${tssNonce}`;
}
function getEd25519SeedStoreDomainKey(tssTag) {
  return tssTag ? `ed25519Seed/${tssTag}` : "ed25519Seed";
}

class TSSTorusServiceProvider extends TorusServiceProvider {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "verifierName", void 0);
    _defineProperty(this, "verifierId", void 0);
  }
  async getRSSNodeDetails() {
    if (!this.verifierId) throw new Error("no verifierId, not logged in");
    if (!this.verifierName) throw new Error("no verifierName, not logged in");
    const {
      torusNodeRSSEndpoints: tssNodeEndpoints,
      torusNodePub: torusPubKeys
    } = await this.customAuthInstance.nodeDetailManager.getNodeDetails({
      verifier: this.verifierName,
      verifierId: this.verifierId
    });
    return {
      serverEndpoints: tssNodeEndpoints,
      serverPubKeys: torusPubKeys.map(key => {
        return {
          x: key.X,
          y: key.Y
        };
      }),
      serverThreshold: Math.ceil(tssNodeEndpoints.length / 2)
    };
  }
  async getTSSPubKey(tssTag, tssNonce) {
    if (!this.verifierName || !this.verifierId) throw new Error("verifier userinfo not found, not logged in yet");
    const nodeDetails = await this.customAuthInstance.nodeDetailManager.getNodeDetails({
      verifier: this.verifierName,
      verifierId: this.verifierId
    });
    const tssServerPub = await this.customAuthInstance.torus.getPublicAddress(nodeDetails.torusNodeSSSEndpoints, nodeDetails.torusNodePub, {
      verifier: this.verifierName,
      verifierId: this.verifierId,
      extendedVerifierId: getExtendedVerifierId(this.verifierId, tssTag, tssNonce)
    });
    return {
      pubKey: new Point(tssServerPub.finalKeyData.X, tssServerPub.finalKeyData.Y),
      nodeIndexes: tssServerPub.nodesData.nodeIndexes || []
    };
  }
  getVerifierNameVerifierId() {
    return `${this.verifierName}\u001c${this.verifierId}`;
  }
  async triggerLogin(params) {
    const obj = await super.triggerLogin(params);
    if (obj) {
      const {
        verifier,
        verifierId
      } = obj.userInfo;
      this.verifierName = verifier;
      this.verifierId = verifierId;
    }
    return obj;
  }
  async triggerAggregateLogin(params) {
    const obj = await super.triggerAggregateLogin(params);
    if (obj) {
      const {
        verifier,
        verifierId
      } = obj.userInfo[0];
      this.verifierName = verifier;
      this.verifierId = verifierId;
    }
    return obj;
  }
}

const TSS_MODULE = "tssModule";
const TSS_TAG_DEFAULT = "default";
const FACTOR_KEY_TYPE = "secp256k1";
const factorKeyCurve = new ec(FACTOR_KEY_TYPE);
const LEGACY_KEY_TYPE = "secp256k1";
class TKeyTSS extends TKey {
  /**
   * Constructs a new TKeyTSS instance using the given parameters.
   */
  constructor(args) {
    super(args);
    _defineProperty(this, "serviceProvider", null);
    _defineProperty(this, "_tssKeyType", void 0);
    _defineProperty(this, "_tssCurve", void 0);
    _defineProperty(this, "_tssTag", void 0);
    _defineProperty(this, "_accountSalt", void 0);
    const {
      serviceProvider,
      storageLayer,
      tssTag = "default",
      tssKeyType
    } = args;
    if (serviceProvider.customAuthArgs.keyType !== tssKeyType) {
      throw CoreError.default(`service provider keyType mismatch: ${serviceProvider.customAuthArgs.keyType} !== ${tssKeyType}`);
    }
    this.serviceProvider = serviceProvider;
    this.storageLayer = storageLayer;
    this._tssTag = tssTag;
    this._tssKeyType = tssKeyType;
    this._tssCurve = new ec(tssKeyType);
  }
  get tssTag() {
    return this._tssTag;
  }
  get tssKeyType() {
    return this._tssKeyType;
  }
  get tssCurve() {
    return this._tssCurve;
  }
  set tssTag(tag) {
    if ((this.metadata.tssKeyTypes[this.tssTag] || LEGACY_KEY_TYPE) !== this.tssKeyType) {
      throw CoreError.default(`tssKeyType mismatch: ${this.metadata.tssKeyTypes[this.tssTag]} !== ${this.tssKeyType}`);
    }
    this._tssTag = tag;
  }

  /**
   * Initializes this instance. If a TSS account does not exist, creates one
   * under the given factor key. `skipTssInit` skips TSS account creation and
   * can be used with `importTssKey` to just import an existing account instead.
   * @returns The key details of TKey core.
   */
  async initialize(params) {
    const keyDetails = await super.initialize(params);
    if (!this.metadata.tssPolyCommits[this.tssTag] && !(params !== null && params !== void 0 && params.skipTssInit || params !== null && params !== void 0 && params.neverInitializeNewKey)) {
      // if tss shares have not been created for this tssTag, create new tss sharing
      const {
        factorEncs,
        factorPubs,
        tssPolyCommits
      } = await this._initializeNewTSSKey(this.tssTag, params.deviceTSSShare, params.factorPub, params.deviceTSSIndex);
      this.metadata.updateTSSData({
        tssKeyType: this._tssKeyType,
        tssTag: this.tssTag,
        tssNonce: 0,
        tssPolyCommits,
        factorPubs,
        factorEncs
      });
      const accountSalt = generateSalt(this._tssCurve);
      await this._setTKeyStoreItem(TSS_MODULE, {
        id: "accountSalt",
        value: accountSalt
      });
      this._accountSalt = accountSalt;
    }
    if (this.metadata.tssPolyCommits[this.tssTag] && (this.metadata.tssKeyTypes[this.tssTag] || LEGACY_KEY_TYPE) !== this.tssKeyType) {
      throw CoreError.default(`tssKeyType mismatch: ${this.metadata.tssKeyTypes[this.tssTag]} !== ${this.tssKeyType}`);
    }
    return keyDetails;
  }

  /**
   * Returns the encrypted data associated with the given factor public key.
   */
  getFactorEncs(factorPub) {
    if (!this.metadata) throw CoreError.metadataUndefined();
    if (!this.metadata.factorEncs) throw CoreError.default("no factor encs mapping");
    if (!this.metadata.factorPubs) throw CoreError.default("no factor pubs mapping");
    const factorPubs = this.metadata.factorPubs[this.tssTag];
    if (!factorPubs) throw CoreError.default(`no factor pubs for this tssTag ${this.tssTag}`);
    if (factorPubs.filter(f => f.x.cmp(factorPub.x) === 0 && f.y.cmp(factorPub.y) === 0).length === 0) throw CoreError.default(`factor pub ${factorPub} not found for tssTag ${this.tssTag}`);
    if (!this.metadata.factorEncs[this.tssTag]) throw CoreError.default(`no factor encs for tssTag ${this.tssTag}`);
    const factorPubID = factorPub.x.toString(16, 64);
    return this.metadata.factorEncs[this.tssTag][factorPubID];
  }

  /**
   * Returns the TSS share associated with the given factor private key.
   */
  async getTSSShare(factorKey, opts) {
    const factorPub = getPubKeyPoint(factorKey, factorKeyCurve);
    const factorEncs = this.getFactorEncs(factorPub);
    const {
      userEnc,
      serverEncs,
      tssIndex,
      type
    } = factorEncs;
    const userDecryption = await decrypt(Buffer.from(factorKey.toString(16, 64), "hex"), userEnc);
    const serverDecryptions = await Promise.all(serverEncs.map(factorEnc => {
      if (factorEnc === null) return null;
      return decrypt(Buffer.from(factorKey.toString(16, 64), "hex"), factorEnc);
    }));
    const tssShareBufs = [userDecryption].concat(serverDecryptions);
    const tssShareBNs = tssShareBufs.map(buf => {
      if (buf === null) return null;
      return new BN(buf);
    });
    const ec = this._tssCurve;
    const tssCommits = this.getTSSCommits().map(p => {
      return ec.keyFromPublic({
        x: p.x.toString(16, 64),
        y: p.y.toString(16, 64)
      }).getPublic();
    });
    const userDec = tssShareBNs[0];
    const accountIndex = (opts === null || opts === void 0 ? void 0 : opts.accountIndex) || 0;
    const coefficient = (opts === null || opts === void 0 ? void 0 : opts.coefficient) || new BN(1);
    if (type === "direct") {
      const tssSharePub = ec.g.mul(userDec);
      const tssCommitA0 = tssCommits[0];
      const tssCommitA1 = tssCommits[1];
      const _tssSharePub = tssCommitA0.add(tssCommitA1.mul(new BN(tssIndex)));
      if (tssSharePub.eq(_tssSharePub)) {
        const adjustedShare = this.adjustTssShare(userDec, accountIndex, coefficient);
        return {
          tssIndex,
          tssShare: adjustedShare
        };
      }
      throw new Error("user decryption does not match tss commitments...");
    }

    // if type === "hierarchical"
    const serverDecs = tssShareBNs.slice(1); // 5 elems
    const serverIndexes = new Array(serverDecs.length).fill(null).map((_, i) => i + 1);
    const threshold = (opts === null || opts === void 0 ? void 0 : opts.threshold) || Math.ceil(serverDecs.length / 2);
    const combis = kCombinations(serverDecs.length, threshold);
    for (let i = 0; i < combis.length; i++) {
      const combi = combis[i];
      const selectedServerDecs = serverDecs.filter((_, j) => combi.indexOf(j) > -1);
      if (selectedServerDecs.includes(null)) continue;
      const selectedServerIndexes = serverIndexes.filter((_, j) => combi.indexOf(j) > -1);
      const serverLagrangeCoeffs = selectedServerIndexes.map(x => getLagrangeCoeffs(ec, selectedServerIndexes, x));
      const serverInterpolated = dotProduct(serverLagrangeCoeffs, selectedServerDecs, ec.n);
      const lagrangeCoeffs = [getLagrangeCoeffs(ec, [1, 99], 1), getLagrangeCoeffs(ec, [1, 99], 99)];
      const tssShare = dotProduct(lagrangeCoeffs, [serverInterpolated, userDec], ec.n);
      const tssSharePub = ec.g.mul(tssShare);
      const tssCommitA0 = tssCommits[0];
      const tssCommitA1 = tssCommits[1];
      let _tssSharePub = tssCommitA0;
      for (let j = 0; j < tssIndex; j++) {
        _tssSharePub = _tssSharePub.add(tssCommitA1);
      }
      if (tssSharePub.eq(_tssSharePub)) {
        const adjustedShare = this.adjustTssShare(tssShare, accountIndex, coefficient);
        return {
          tssIndex,
          tssShare: adjustedShare
        };
      }
    }
    throw new Error("could not find any combination of server decryptions that match tss commitments...");
  }

  /**
   * Returns the TSS public key and the curve points corresponding to secret key
   * shares, as stored in Metadata.
   */
  getTSSCommits() {
    if (!this.metadata) throw CoreError.metadataUndefined();
    const tssPolyCommits = this.metadata.tssPolyCommits[this.tssTag];
    if (!tssPolyCommits) throw CoreError.default(`tss poly commits not found for tssTag ${this.tssTag}`);
    if (tssPolyCommits.length === 0) throw CoreError.default("tss poly commits is empty");
    return tssPolyCommits;
  }

  /**
   * Returns the TSS public key.
   */
  getTSSPub(accountIndex) {
    const ec = this._tssCurve;
    const tssCommits = this.getTSSCommits();
    if (accountIndex && accountIndex > 0) {
      // Add account nonce to pub key.
      const nonce = this.computeAccountNonce(accountIndex);
      const noncePub = ec.keyFromPrivate(nonce.toString("hex")).getPublic();
      const pubKeyPoint = tssCommits[0].toEllipticPoint(ec);
      const devicePubKeyPoint = pubKeyPoint.add(noncePub);
      return Point.fromElliptic(devicePubKeyPoint);
    }
    return tssCommits[0];
  }

  /**
   * Returns the node details for RSS.
   */
  async _getRssNodeDetails() {
    const {
      serverEndpoints,
      serverPubKeys,
      serverThreshold
    } = await this.serviceProvider.getRSSNodeDetails();
    if (!Array.isArray(serverEndpoints) || serverEndpoints.length === 0) throw new Error("service provider tss server endpoints are missing");
    if (!Array.isArray(serverPubKeys) || serverPubKeys.length === 0) throw new Error("service provider pub keys are missing");
    return {
      serverEndpoints,
      serverPubKeys,
      serverThreshold: serverThreshold || Math.floor(serverEndpoints.length / 2) + 1
    };
  }

  /**
   * Imports an existing private key for threshold signing. A corresponding user
   * key share will be stored under the specified factor key.
   */
  async importTssKey(params, serverOpts) {
    const ec = this._tssCurve;
    if (!this.secp256k1Key) throw CoreError.privateKeyUnavailable();
    if (!this.metadata) {
      throw CoreError.metadataUndefined();
    }
    const {
      importKey,
      factorPub,
      newTSSIndex,
      tag
    } = params;
    const oldTag = this.tssTag;
    this._tssTag = tag;
    try {
      const {
        selectedServers = [],
        authSignatures = []
      } = serverOpts || {};
      if (!tag) throw CoreError.default(`invalid param, tag is required`);
      if (!factorPub) throw CoreError.default(`invalid param, newFactorPub is required`);
      if (!newTSSIndex) throw CoreError.default(`invalid param, newTSSIndex is required`);
      if (authSignatures.length === 0) throw CoreError.default(`invalid param, authSignatures is required`);
      const existingFactorPubs = this.metadata.factorPubs[tag];
      if ((existingFactorPubs === null || existingFactorPubs === void 0 ? void 0 : existingFactorPubs.length) > 0) {
        throw CoreError.default(`Duplicate account tag, please use a unique tag for importing key`);
      }
      const factorPubs = [factorPub];
      const importScalar = await (async () => {
        if (this._tssKeyType === KeyType.secp256k1) {
          return new BN(importKey);
        } else if (this._tssKeyType === KeyType.ed25519) {
          // Store seed in metadata.
          const domainKey = getEd25519SeedStoreDomainKey(this.tssTag || TSS_TAG_DEFAULT);
          const result = this.metadata.getGeneralStoreDomain(domainKey);
          if (result) {
            throw new Error("Seed already exists");
          }
          const {
            scalar
          } = getEd25519ExtendedPublicKey(importKey);
          const encKey = Buffer.from(getSecpKeyFromEd25519(scalar).point.encodeCompressed("hex"), "hex");
          const msg = await encrypt(encKey, importKey);
          this.metadata.setGeneralStoreDomain(domainKey, {
            message: msg
          });
          return scalar;
        }
        throw new Error("Invalid key type");
      })();
      if (!importScalar || importScalar.eq(new BN("0"))) {
        throw new Error("Invalid importedKey");
      }
      const tssIndexes = [newTSSIndex];
      const existingNonce = this.metadata.tssNonces[this.tssTag];
      const newTssNonce = existingNonce && existingNonce > 0 ? existingNonce + 1 : 0;
      const verifierAndVerifierID = this.serviceProvider.getVerifierNameVerifierId();
      const label = `${verifierAndVerifierID}\u0015${this.tssTag}\u0016${newTssNonce}`;
      const tssPubKey = hexPoint(ec.g.mul(importScalar));
      const rssNodeDetails = await this._getRssNodeDetails();
      const {
        pubKey: newTSSServerPub,
        nodeIndexes
      } = await this.serviceProvider.getTSSPubKey(this.tssTag, newTssNonce);
      let finalSelectedServers = selectedServers;
      if ((nodeIndexes === null || nodeIndexes === void 0 ? void 0 : nodeIndexes.length) > 0) {
        if (selectedServers.length) {
          finalSelectedServers = nodeIndexes.slice(0, Math.min(selectedServers.length, nodeIndexes.length));
        } else {
          finalSelectedServers = nodeIndexes.slice(0, 3);
        }
      } else if ((selectedServers === null || selectedServers === void 0 ? void 0 : selectedServers.length) === 0) {
        finalSelectedServers = randomSelection(new Array(rssNodeDetails.serverEndpoints.length).fill(null).map((_, i) => i + 1), Math.ceil(rssNodeDetails.serverEndpoints.length / 2));
      }
      const {
        serverEndpoints,
        serverPubKeys,
        serverThreshold
      } = rssNodeDetails;
      const rssClient = new RSSClient({
        serverEndpoints,
        serverPubKeys,
        serverThreshold,
        tssPubKey,
        keyType: this._tssKeyType
      });
      const refreshResponses = await rssClient.import({
        importKey: importScalar,
        dkgNewPub: pointToHex(newTSSServerPub),
        selectedServers: finalSelectedServers,
        factorPubs: factorPubs.map(f => pointToHex(f)),
        targetIndexes: tssIndexes,
        newLabel: label,
        sigs: authSignatures
      });
      const secondCommit = newTSSServerPub.toEllipticPoint(ec).add(ecPoint(ec, tssPubKey).neg());
      const newTSSCommits = [Point.fromJSON(tssPubKey), Point.fromJSON({
        x: secondCommit.getX().toString(16, 64),
        y: secondCommit.getY().toString(16, 64)
      })];
      const factorEncs = {};
      for (let i = 0; i < refreshResponses.length; i++) {
        const refreshResponse = refreshResponses[i];
        factorEncs[refreshResponse.factorPub.x.padStart(64, "0")] = {
          type: "hierarchical",
          tssIndex: refreshResponse.targetIndex,
          userEnc: refreshResponse.userFactorEnc,
          serverEncs: refreshResponse.serverFactorEncs
        };
      }
      this.metadata.updateTSSData({
        tssKeyType: this._tssKeyType,
        tssTag: this.tssTag,
        tssNonce: newTssNonce,
        tssPolyCommits: newTSSCommits,
        factorPubs,
        factorEncs
      });
      if (!this._accountSalt) {
        const accountSalt = generateSalt(this._tssCurve);
        await this._setTKeyStoreItem(TSS_MODULE, {
          id: "accountSalt",
          value: accountSalt
        });
        this._accountSalt = accountSalt;
      }
      await this._syncShareMetadata();
    } catch (error) {
      this._tssTag = oldTag;
      throw error;
    }
  }

  /**
   * UNSAFE: USE WITH CAUTION
   *
   * Reconstructs and exports the TSS private key.
   */
  async _UNSAFE_exportTssKey(tssOptions) {
    if (!this.metadata) throw CoreError.metadataUndefined("metadata is undefined");
    if (!this.secp256k1Key) throw new Error("Tkey is not reconstructed");
    if (!this.metadata.tssPolyCommits[this.tssTag]) throw new Error(`tss key has not been initialized for tssTag ${this.tssTag}`);
    const {
      factorKey,
      selectedServers,
      authSignatures,
      accountIndex
    } = tssOptions;
    const {
      tssIndex
    } = await this.getTSSShare(factorKey);
    // Assumption that there are only index 2 and 3 for tss shares
    // create complement index share
    const tempShareIndex = tssIndex === 2 ? 3 : 2;
    const tempFactorKey = factorKeyCurve.genKeyPair().getPrivate();
    const tempFactorPub = getPubKeyPoint(tempFactorKey, factorKeyCurve);
    await this.addFactorPub({
      existingFactorKey: factorKey,
      newFactorPub: tempFactorPub,
      newTSSIndex: tempShareIndex,
      authSignatures,
      selectedServers,
      refreshShares: true
    });
    const {
      tssShare: factorShare,
      tssIndex: factorIndex
    } = await this.getTSSShare(factorKey);
    const {
      tssShare: tempShare,
      tssIndex: tempIndex
    } = await this.getTSSShare(tempFactorKey);

    // reconstruct final key using sss
    const ec = this._tssCurve;
    const tssKey = lagrangeInterpolation(ec, [tempShare, factorShare], [new BN(tempIndex), new BN(factorIndex)]);

    // delete created tss share
    await this.deleteFactorPub({
      factorKey,
      deleteFactorPub: tempFactorPub,
      authSignatures,
      selectedServers
    });

    // Derive key for account index.
    const nonce = this.computeAccountNonce(accountIndex);
    const derivedKey = tssKey.add(nonce).umod(this._tssCurve.n);
    return derivedKey;
  }

  /**
   * UNSAFE: USE WITH CAUTION
   *
   * Reconstructs the TSS private key and exports the ed25519 private key seed.
   */
  async _UNSAFE_exportTssEd25519Seed(tssOptions) {
    const edScalar = await this._UNSAFE_exportTssKey(tssOptions);

    // Try to export ed25519 seed. This is only available if import key was being used.
    const domainKey = getEd25519SeedStoreDomainKey(this.tssTag || TSS_TAG_DEFAULT);
    const result = this.metadata.getGeneralStoreDomain(domainKey);
    const decKey = getSecpKeyFromEd25519(edScalar).scalar;
    const seed = await decrypt(decKey.toArrayLike(Buffer, "be", 32), result.message);
    return seed;
  }

  /**
   * Runs the share refresh protocol for the TSS key shares.
   * @param inputShare - The current user secret share.
   * @param inputIndex - The user share index.
   * @param factorPubs - The target factor keys.
   * @param targetIndexes - The target indices to provide new shares for.
   */
  async _refreshTSSShares(updateMetadata, inputShare, inputIndex, factorPubs, targetIndexes, verifierNameVerifierId, serverOpts) {
    if (!this.metadata) throw CoreError.metadataUndefined();
    if (!this.metadata.tssPolyCommits) throw CoreError.default(`tss poly commits obj not found`);
    const tssCommits = this.metadata.tssPolyCommits[this.tssTag];
    if (!tssCommits) throw CoreError.default(`tss commits not found for tssTag ${this.tssTag}`);
    if (tssCommits.length === 0) throw CoreError.default(`tssCommits is empty`);
    const tssPubKeyPoint = tssCommits[0];
    const tssPubKey = pointToHex(tssPubKeyPoint);
    const {
      serverEndpoints,
      serverPubKeys,
      serverThreshold,
      selectedServers,
      authSignatures
    } = serverOpts;
    const rssClient = new RSSClient({
      serverEndpoints,
      serverPubKeys,
      serverThreshold,
      tssPubKey,
      keyType: this._tssKeyType
    });
    if (!this.metadata.factorPubs) throw CoreError.default(`factorPubs obj not found`);
    if (!factorPubs) throw CoreError.default(`factorPubs not found for tssTag ${this.tssTag}`);
    if (factorPubs.length === 0) throw CoreError.default(`factorPubs is empty`);
    if (!this.metadata.tssNonces) throw CoreError.default(`tssNonces obj not found`);
    const tssNonce = this.metadata.tssNonces[this.tssTag] || 0;
    const oldLabel = `${verifierNameVerifierId}\u0015${this.tssTag}\u0016${tssNonce}`;
    const newLabel = `${verifierNameVerifierId}\u0015${this.tssTag}\u0016${tssNonce + 1}`;
    const {
      pubKey: newTSSServerPub,
      nodeIndexes
    } = await this.serviceProvider.getTSSPubKey(this.tssTag, tssNonce + 1);
    let finalSelectedServers = selectedServers;
    if ((nodeIndexes === null || nodeIndexes === void 0 ? void 0 : nodeIndexes.length) > 0) {
      finalSelectedServers = nodeIndexes.slice(0, Math.min(selectedServers.length, nodeIndexes.length));
    }
    const refreshResponses = await rssClient.refresh({
      factorPubs: factorPubs.map(f => pointToHex(f)),
      targetIndexes,
      oldLabel,
      newLabel,
      sigs: authSignatures,
      dkgNewPub: pointToHex(newTSSServerPub),
      inputShare,
      inputIndex,
      selectedServers: finalSelectedServers
    });
    const secondCommit = newTSSServerPub.toEllipticPoint(this._tssCurve).add(ecPoint(this._tssCurve, tssPubKey).neg());
    const newTSSCommits = [Point.fromJSON(tssPubKey), Point.fromJSON({
      x: secondCommit.getX().toString(16, 64),
      y: secondCommit.getY().toString(16, 64)
    })];
    const factorEncs = {};
    for (let i = 0; i < refreshResponses.length; i++) {
      const refreshResponse = refreshResponses[i];
      factorEncs[refreshResponse.factorPub.x.padStart(64, "0")] = {
        type: "hierarchical",
        tssIndex: refreshResponse.targetIndex,
        userEnc: refreshResponse.userFactorEnc,
        serverEncs: refreshResponse.serverFactorEncs
      };
    }
    this.metadata.updateTSSData({
      tssKeyType: this._tssKeyType,
      tssTag: this.tssTag,
      tssNonce: tssNonce + 1,
      tssPolyCommits: newTSSCommits,
      factorPubs,
      factorEncs
    });
    if (updateMetadata) await this._syncShareMetadata();
  }

  /**
   * Derives the account nonce for the specified account index.
   */
  computeAccountNonce(index) {
    if (!index || index === 0) {
      return new BN(0);
    }
    if (this._tssKeyType === KeyType.ed25519) {
      throw new Error("account index not supported with ed25519");
    }

    // generation should occur during tkey.init, fails if accountSalt is absent
    if (!this._accountSalt) {
      throw Error("account salt undefined");
    }
    let accountHash = keccak256(Buffer.from(`${index}${this._accountSalt}`));
    if (accountHash.length === 66) accountHash = accountHash.slice(2);
    return new BN(accountHash, "hex").umod(this._tssCurve.n);
  }

  /**
   * Reconstructs the TKey and finalize intialization.
   */
  async reconstructKey(_reconstructKeyMiddleware) {
    const k = await super.reconstructKey(_reconstructKeyMiddleware);
    const accountSalt = await this.getTKeyStoreItem(TSS_MODULE, "accountSalt");
    if (accountSalt && accountSalt.value) {
      this._accountSalt = accountSalt.value;
    } else {
      const newSalt = generateSalt(this._tssCurve);
      await this._setTKeyStoreItem(TSS_MODULE, {
        id: "accountSalt",
        value: newSalt
      });
      this._accountSalt = newSalt;
      // this is very specific case where exisiting user do not have salt.
      // sync metadata to cloud to ensure salt is stored incase of manual sync mode
      // new user or importKey should not hit this cases
      // NOTE this is not mistake, we force sync for this case
      if (this.manualSync) await this.syncLocalMetadataTransitions();
    }
    return k;
  }

  /**
   * Adds a factor key to the set of authorized keys.
   *
   * `refreshShares` - If this is true, then refresh the shares. If this is
   * false, `newTSSIndex` must be the same as current factor key index.
   */
  async addFactorPub(args) {
    if (!this.metadata) throw CoreError.metadataUndefined("metadata is undefined");
    if (!this.secp256k1Key) throw new Error("Tkey is not reconstructed");
    if (!this.metadata.tssPolyCommits[this.tssTag]) throw new Error(`tss key has not been initialized for tssTag ${this.tssTag}`);
    const {
      existingFactorKey,
      newFactorPub,
      newTSSIndex,
      selectedServers,
      authSignatures,
      refreshShares
    } = args;
    const {
      tssShare,
      tssIndex
    } = await this.getTSSShare(existingFactorKey);
    if (tssIndex !== newTSSIndex && !refreshShares) {
      throw CoreError.default("newTSSIndex does not match existing tssIndex, set refreshShares to true to refresh shares");
    }
    if (!refreshShares) {
      // Just copy data stored under factor key.
      if (tssIndex !== newTSSIndex) {
        throw CoreError.default("newTSSIndex does not match existing tssIndex, set refreshShares to true to refresh shares");
      }
      const updatedFactorPubs = this.metadata.factorPubs[this.tssTag].concat([newFactorPub]);
      const factorEncs = JSON.parse(JSON.stringify(this.metadata.factorEncs[this.tssTag]));
      const factorPubID = newFactorPub.x.toString(16, 64);
      factorEncs[factorPubID] = {
        tssIndex,
        type: "direct",
        userEnc: await encrypt(newFactorPub.toSEC1(secp256k1, false), tssShare.toArrayLike(Buffer, "be", 32)),
        serverEncs: []
      };
      this.metadata.updateTSSData({
        tssKeyType: this.tssKeyType,
        tssTag: this.tssTag,
        factorPubs: updatedFactorPubs,
        factorEncs
      });
    } else {
      // Use RSS to create new TSS share and store it under new factor key.
      const existingFactorPubs = this.metadata.factorPubs[this.tssTag];
      const updatedFactorPubs = existingFactorPubs.concat([newFactorPub]);
      const verifierId = this.serviceProvider.getVerifierNameVerifierId();
      const rssNodeDetails = await this._getRssNodeDetails();
      const randomSelectedServers = randomSelection(new Array(rssNodeDetails.serverEndpoints.length).fill(null).map((_, i) => i + 1), Math.ceil(rssNodeDetails.serverEndpoints.length / 2));
      const finalServer = selectedServers || randomSelectedServers;
      const existingTSSIndexes = existingFactorPubs.map(fb => this.getFactorEncs(fb).tssIndex);
      const updatedTSSIndexes = existingTSSIndexes.concat([newTSSIndex]);
      await this._refreshTSSShares(false, tssShare, tssIndex, updatedFactorPubs, updatedTSSIndexes, verifierId, _objectSpread(_objectSpread({}, rssNodeDetails), {}, {
        selectedServers: finalServer,
        authSignatures
      }));
    }
    await this._syncShareMetadata();
  }

  /**
   * Removes a factor key from the set of authorized keys and refreshes the TSS
   * key shares.
   */
  async deleteFactorPub(args) {
    if (!this.metadata) throw CoreError.metadataUndefined("metadata is undefined");
    if (!this.secp256k1Key) throw new Error("Tkey is not reconstructed");
    if (!this.metadata.tssPolyCommits[this.tssTag]) throw new Error(`tss key has not been initialized for tssTag ${this.tssTag}`);
    const {
      factorKey,
      deleteFactorPub,
      selectedServers,
      authSignatures
    } = args;
    const existingFactorPubs = this.metadata.factorPubs[this.tssTag];
    const {
      tssShare,
      tssIndex
    } = await this.getTSSShare(factorKey);
    const found = existingFactorPubs.filter(f => f.x.eq(deleteFactorPub.x) && f.y.eq(deleteFactorPub.y));
    if (found.length === 0) throw CoreError.default("could not find factorPub to delete");
    if (found.length > 1) throw CoreError.default("found two or more factorPubs that match, error in metadata");
    const updatedFactorPubs = existingFactorPubs.filter(f => !f.x.eq(deleteFactorPub.x) || !f.y.eq(deleteFactorPub.y));
    this.metadata.updateTSSData({
      tssKeyType: this._tssKeyType,
      tssTag: this.tssTag,
      factorPubs: updatedFactorPubs
    });
    const rssNodeDetails = await this._getRssNodeDetails();
    const randomSelectedServers = randomSelection(new Array(rssNodeDetails.serverEndpoints.length).fill(null).map((_, i) => i + 1), Math.ceil(rssNodeDetails.serverEndpoints.length / 2));
    const finalServer = selectedServers || randomSelectedServers;
    const updatedTSSIndexes = updatedFactorPubs.map(fb => this.getFactorEncs(fb).tssIndex);
    await this._refreshTSSShares(false, tssShare, tssIndex, updatedFactorPubs, updatedTSSIndexes, this.serviceProvider.getVerifierNameVerifierId(), _objectSpread(_objectSpread({}, rssNodeDetails), {}, {
      selectedServers: finalServer,
      authSignatures
    }));
    await this._syncShareMetadata();
  }

  /**
   * Adjusts a TSS key share based on account index and share coefficient.
   */
  adjustTssShare(share, accountIndex, coefficient) {
    const nonce = this.computeAccountNonce(accountIndex);
    return share.mul(coefficient).add(nonce).umod(this._tssCurve.n);
  }

  /**
   * Initializes a new TSS key under the specified factor key and using the
   * provided user share.
   */
  async _initializeNewTSSKey(tssTag, deviceTSSShare, factorPub, deviceTSSIndex) {
    const ec = this._tssCurve;
    let tss2;
    const _tssIndex = deviceTSSIndex || 2; // TODO: fix
    if (deviceTSSShare) {
      tss2 = deviceTSSShare;
    } else {
      tss2 = this._tssCurve.genKeyPair().getPrivate();
    }
    const {
      pubKey: tss1Pub
    } = await this.serviceProvider.getTSSPubKey(tssTag, 0);
    const tss1PubKey = tss1Pub.toEllipticPoint(ec);
    const tss2PubKey = this._tssCurve.g.mul(tss2);
    const L1_0 = getLagrangeCoeffs(ec, [1, _tssIndex], 1, 0);
    const LIndex_0 = getLagrangeCoeffs(ec, [1, _tssIndex], _tssIndex, 0);
    const a0Pub = tss1PubKey.mul(L1_0).add(tss2PubKey.mul(LIndex_0));
    const a1Pub = tss1PubKey.add(a0Pub.neg());
    const tssPolyCommits = [Point.fromElliptic(a0Pub), Point.fromElliptic(a1Pub)];
    const factorPubs = [factorPub];
    const factorEncs = {};
    for (let i = 0; i < factorPubs.length; i++) {
      const f = factorPubs[i];
      const factorPubID = f.x.toString(16, 64);
      factorEncs[factorPubID] = {
        tssIndex: _tssIndex,
        type: "direct",
        userEnc: await encrypt(f.toSEC1(factorKeyCurve, false), Buffer.from(tss2.toString(16, 64), "hex")),
        serverEncs: []
      };
    }
    return {
      tss2,
      factorEncs,
      factorPubs,
      tssPolyCommits
    };
  }
}

export { DELIMITERS, FACTOR_KEY_TYPE, LEGACY_KEY_TYPE, TKeyTSS, TSSTorusServiceProvider, TSS_MODULE, TSS_TAG_DEFAULT, factorKeyCurve, generateSalt, getEd25519SeedStoreDomainKey, getExtendedVerifierId, getLagrangeCoeffs, getPubKeyPoint, kCombinations, lagrangeInterpolation, pointToHex };
