import { BNString, CatchupToLatestShareResult, DeleteShareResult, EncryptedMessage, FromJSONConstructor, GenerateNewShareResult, IMetadata, IServiceProvider, IStorageLayer, ITKey, ITKeyApi, KeyDetails, LocalMetadataTransitions, LocalTransitionData, ModuleMap, Polynomial, PolynomialID, ReconstructedKeyResult, ReconstructKeyMiddlewareMap, RefreshMiddlewareMap, ShareSerializationMiddleware, ShareStore, ShareStoreMap, ShareStorePolyIDShareIndexMap, StringifiedType, TKeyArgs, TKeyInitArgs, TkeyStoreItemType } from "@tkey/common-types";
import BN from "bn.js";
import AuthMetadata from "./authMetadata";
import Metadata from "./metadata";
declare class ThresholdKey implements ITKey {
    modules: ModuleMap;
    enableLogging: boolean;
    serviceProvider: IServiceProvider;
    storageLayer: IStorageLayer;
    shares: ShareStorePolyIDShareIndexMap;
    lastFetchedCloudMetadata: Metadata;
    metadata: Metadata;
    manualSync: boolean;
    _localMetadataTransitions: LocalMetadataTransitions;
    _refreshMiddleware: RefreshMiddlewareMap;
    _reconstructKeyMiddleware: ReconstructKeyMiddlewareMap;
    _shareSerializationMiddleware: ShareSerializationMiddleware;
    storeDeviceShare: (deviceShareStore: ShareStore, customDeviceInfo?: StringifiedType) => Promise<void>;
    haveWriteMetadataLock: string;
    serverTimeOffset?: number;
    private privKey;
    private _ed25519Seed?;
    constructor(args?: TKeyArgs);
    get secp256k1Key(): BN | null;
    get ed25519Key(): Buffer | null;
    private set secp256k1Key(value);
    private set ed25519Key(value);
    static fromJSON(value: StringifiedType, args: TKeyArgs): Promise<ThresholdKey>;
    getStorageLayer(): IStorageLayer;
    getMetadata(): IMetadata;
    initialize(params?: TKeyInitArgs): Promise<KeyDetails>;
    /**
     * catchupToLatestShare recursively loops fetches metadata of the provided share and checks if there is an encrypted share for it.
     * @param shareStore - share to start of with
     * @param polyID - if specified, polyID to refresh to if it exists
     */
    catchupToLatestShare(params: {
        shareStore: ShareStore;
        polyID?: PolynomialID;
        includeLocalMetadataTransitions?: boolean;
    }): Promise<CatchupToLatestShareResult>;
    reconstructKey(_reconstructKeyMiddleware?: boolean): Promise<ReconstructedKeyResult>;
    reconstructLatestPoly(): Polynomial;
    deleteShare(shareIndex: BNString): Promise<DeleteShareResult>;
    generateNewShare(): Promise<GenerateNewShareResult>;
    getEd25519PublicKey(): string | undefined;
    retrieveEd25519Seed(): Promise<Buffer>;
    addLocalMetadataTransitions(params: {
        input: LocalTransitionData;
        serviceProvider?: IServiceProvider;
        privKey?: BN[];
        acquireLock?: boolean;
    }): Promise<void>;
    syncLocalMetadataTransitions(): Promise<void>;
    readMetadata<T>(privKey: BN): Promise<T>;
    updateSDK(params?: {
        withShare?: ShareStore;
    }): Promise<ThresholdKey>;
    inputShareStore(shareStore: ShareStore): void;
    inputShareStoreSafe(shareStore: ShareStore, autoUpdateMetadata?: boolean): Promise<void>;
    outputShareStore(shareIndex: BNString, polyID?: string): ShareStore;
    getCurrentShareIndexes(): string[];
    getKeyDetails(): KeyDetails;
    generateAuthMetadata(params: {
        input: Metadata[];
    }): AuthMetadata[];
    setAuthMetadata(params: {
        input: Metadata;
        serviceProvider?: IServiceProvider;
        privKey?: BN;
    }): Promise<{
        message: string;
    }>;
    setAuthMetadataBulk(params: {
        input: Metadata[];
        serviceProvider?: IServiceProvider;
        privKey?: BN[];
    }): Promise<void>;
    getAuthMetadata(params: {
        serviceProvider?: IServiceProvider;
        privKey?: BN;
        includeLocalMetadataTransitions?: boolean;
    }): Promise<Metadata>;
    getGenericMetadataWithTransitionStates(params: {
        fromJSONConstructor: FromJSONConstructor;
        serviceProvider?: IServiceProvider;
        privKey?: BN;
        includeLocalMetadataTransitions?: boolean;
        _localMetadataTransitions?: LocalMetadataTransitions;
    }): Promise<unknown>;
    acquireWriteMetadataLock(): Promise<number>;
    releaseWriteMetadataLock(): Promise<void>;
    _syncShareMetadata(adjustScopedStore?: (ss: unknown) => unknown): Promise<void>;
    syncMultipleShareMetadata(shares: BN[], adjustScopedStore?: (ss: unknown) => unknown): Promise<void>;
    _addRefreshMiddleware(moduleName: string, middleware: (generalStore: unknown, oldShareStores: ShareStoreMap, newShareStores: ShareStoreMap) => unknown): void;
    _addReconstructKeyMiddleware(moduleName: string, middleware: () => Promise<BN[]>): void;
    _addShareSerializationMiddleware(serialize: (share: BN, type: string) => Promise<unknown>, deserialize: (serializedShare: unknown, type: string) => Promise<BN>): void;
    _setDeviceStorage(storeDeviceStorage: (deviceShareStore: ShareStore) => Promise<void>): void;
    addShareDescription(shareIndex: string, description: string, updateMetadata?: boolean): Promise<void>;
    deleteShareDescription(shareIndex: string, description: string, updateMetadata?: boolean): Promise<void>;
    updateShareDescription(shareIndex: string, oldDescription: string, newDescription: string, updateMetadata?: boolean): Promise<void>;
    encrypt(data: Buffer): Promise<EncryptedMessage>;
    decrypt(encryptedMessage: EncryptedMessage): Promise<Buffer>;
    _setTKeyStoreItem(moduleName: string, data: TkeyStoreItemType): Promise<void>;
    _deleteTKeyStoreItem(moduleName: string, id: string): Promise<void>;
    getTKeyStore(moduleName: string): Promise<TkeyStoreItemType[]>;
    getTKeyStoreItem(moduleName: string, id: string): Promise<TkeyStoreItemType>;
    outputShare(shareIndex: BNString, type?: string): Promise<unknown>;
    inputShare(share: unknown, type?: string): Promise<void>;
    toJSON(): StringifiedType;
    getAllShareStoresForLatestPolynomial(): ShareStore[];
    CRITICAL_deleteTkey(): Promise<void>;
    getApi(): ITKeyApi;
    private setModuleReferences;
    private initializeModules;
    private _refreshShares;
    private _initializeNewKey;
    private importEd25519Seed;
    private setupEd25519Seed;
}
export default ThresholdKey;
