import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { ServiceProviderBase } from '@tkey/service-provider-base';
import { CustomAuth } from '@toruslabs/customauth';
import { Torus } from '@toruslabs/torus.js';
import BN from 'bn.js';

class TorusServiceProvider extends ServiceProviderBase {
  constructor({
    enableLogging = false,
    postboxKey,
    customAuthArgs
  }) {
    super({
      enableLogging,
      postboxKey
    });
    _defineProperty(this, "customAuthInstance", void 0);
    _defineProperty(this, "singleLoginKey", void 0);
    _defineProperty(this, "torusKey", void 0);
    _defineProperty(this, "migratableKey", null);
    // Migration of key from SFA to tKey
    _defineProperty(this, "customAuthArgs", void 0);
    this.customAuthArgs = customAuthArgs;
    this.customAuthInstance = new CustomAuth(customAuthArgs);
    this.serviceProviderName = "TorusServiceProvider";
  }
  static fromJSON(value) {
    const {
      enableLogging,
      postboxKey,
      customAuthArgs,
      serviceProviderName
    } = value;
    if (serviceProviderName !== "TorusServiceProvider") return undefined;
    return new TorusServiceProvider({
      enableLogging,
      postboxKey,
      customAuthArgs
    });
  }
  async init(params) {
    return this.customAuthInstance.init(params);
  }

  /**
   * Trigger login flow. Returns `null` in redirect mode.
   */
  async triggerLogin(params) {
    const obj = await this.customAuthInstance.triggerLogin(params);

    // `obj` maybe `null` in redirect mode.
    if (obj) {
      const localPrivKey = Torus.getPostboxKey(obj);
      this.torusKey = obj;
      if (!obj.metadata.upgraded) {
        const {
          finalKeyData,
          oAuthKeyData
        } = obj;
        const privKey = finalKeyData.privKey || oAuthKeyData.privKey;
        this.migratableKey = new BN(privKey, "hex");
      }
      this.postboxKey = new BN(localPrivKey, "hex");
    }
    return obj;
  }

  /**
   * Trigger login flow. Returns `null` in redirect mode.
   */
  async triggerAggregateLogin(params) {
    const obj = await this.customAuthInstance.triggerAggregateLogin(params);
    if (obj) {
      const localPrivKey = Torus.getPostboxKey(obj);
      this.torusKey = obj;
      if (!obj.metadata.upgraded) {
        const {
          finalKeyData,
          oAuthKeyData
        } = obj;
        const privKey = finalKeyData.privKey || oAuthKeyData.privKey;
        this.migratableKey = new BN(privKey, "hex");
      }
      this.postboxKey = new BN(localPrivKey, "hex");
    }
    return obj;
  }
  toJSON() {
    return _objectSpread(_objectSpread({}, super.toJSON()), {}, {
      serviceProviderName: this.serviceProviderName,
      customAuthArgs: this.customAuthArgs
    });
  }
}
var TorusServiceProvider$1 = TorusServiceProvider;

export { TorusServiceProvider$1 as default };
