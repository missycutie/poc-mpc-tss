import { StringifiedType, TorusServiceProviderArgs } from "@tkey/common-types";
import { ServiceProviderBase } from "@tkey/service-provider-base";
import { AggregateLoginParams, CustomAuth, CustomAuthArgs, InitParams, SubVerifierDetails, TorusAggregateLoginResponse, TorusLoginResponse } from "@toruslabs/customauth";
import { TorusKey } from "@toruslabs/torus.js";
import BN from "bn.js";
declare class TorusServiceProvider extends ServiceProviderBase {
    customAuthInstance: CustomAuth;
    singleLoginKey: BN;
    torusKey: TorusKey;
    migratableKey: BN | null;
    customAuthArgs: CustomAuthArgs;
    constructor({ enableLogging, postboxKey, customAuthArgs }: TorusServiceProviderArgs);
    static fromJSON(value: StringifiedType): TorusServiceProvider;
    init(params: InitParams): Promise<void>;
    /**
     * Trigger login flow. Returns `null` in redirect mode.
     */
    triggerLogin(params: SubVerifierDetails): Promise<TorusLoginResponse | null>;
    /**
     * Trigger login flow. Returns `null` in redirect mode.
     */
    triggerAggregateLogin(params: AggregateLoginParams): Promise<TorusAggregateLoginResponse>;
    toJSON(): StringifiedType;
}
export default TorusServiceProvider;
