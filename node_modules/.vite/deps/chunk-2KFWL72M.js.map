{
  "version": 3,
  "sources": ["../../@ethereumjs/rlp/src/index.ts", "../../ethereum-cryptography/esm/secp256k1.js"],
  "sourcesContent": ["export type Input = string | number | bigint | Uint8Array | Array<Input> | null | undefined\n\nexport type NestedUint8Array = Array<Uint8Array | NestedUint8Array>\n\nexport interface Decoded {\n  data: Uint8Array | NestedUint8Array\n  remainder: Uint8Array\n}\n\n/**\n * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/\nexport function encode(input: Input): Uint8Array {\n  if (Array.isArray(input)) {\n    const output: Uint8Array[] = []\n    let outputLength = 0\n    for (let i = 0; i < input.length; i++) {\n      const encoded = encode(input[i])\n      output.push(encoded)\n      outputLength += encoded.length\n    }\n    return concatBytes(encodeLength(outputLength, 192), ...output)\n  }\n  const inputBuf = toBytes(input)\n  if (inputBuf.length === 1 && inputBuf[0] < 128) {\n    return inputBuf\n  }\n  return concatBytes(encodeLength(inputBuf.length, 128), inputBuf)\n}\n\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */\nfunction safeSlice(input: Uint8Array, start: number, end: number) {\n  if (end > input.length) {\n    throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds')\n  }\n  return input.slice(start, end)\n}\n\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */\nfunction decodeLength(v: Uint8Array): number {\n  if (v[0] === 0) {\n    throw new Error('invalid RLP: extra zeros')\n  }\n  return parseHexByte(bytesToHex(v))\n}\n\nfunction encodeLength(len: number, offset: number): Uint8Array {\n  if (len < 56) {\n    return Uint8Array.from([len + offset])\n  }\n  const hexLength = numberToHex(len)\n  const lLength = hexLength.length / 2\n  const firstByte = numberToHex(offset + 55 + lLength)\n  return Uint8Array.from(hexToBytes(firstByte + hexLength))\n}\n\n/**\n * RLP Decoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\n * @param input Will be converted to Uint8Array\n * @param stream Is the input a stream (false by default)\n * @returns decoded Array of Uint8Arrays containing the original message\n **/\nexport function decode(input: Input, stream?: false): Uint8Array | NestedUint8Array\nexport function decode(input: Input, stream?: true): Decoded\nexport function decode(input: Input, stream = false): Uint8Array | NestedUint8Array | Decoded {\n  if (typeof input === 'undefined' || input === null || (input as any).length === 0) {\n    return Uint8Array.from([])\n  }\n\n  const inputBytes = toBytes(input)\n  const decoded = _decode(inputBytes)\n\n  if (stream) {\n    return {\n      data: decoded.data,\n      remainder: decoded.remainder.slice(),\n    }\n  }\n  if (decoded.remainder.length !== 0) {\n    throw new Error('invalid RLP: remainder must be zero')\n  }\n\n  return decoded.data\n}\n\n/** Decode an input with RLP */\nfunction _decode(input: Uint8Array): Decoded {\n  let length: number, llength: number, data: Uint8Array, innerRemainder: Uint8Array, d: Decoded\n  const decoded = []\n  const firstByte = input[0]\n\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.subarray(1),\n    }\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f\n\n    // set 0x80 null to 0\n    if (firstByte === 0x80) {\n      data = Uint8Array.from([])\n    } else {\n      data = safeSlice(input, 1, length)\n    }\n\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed')\n    }\n\n    return {\n      data,\n      remainder: input.subarray(length),\n    }\n  } else if (firstByte <= 0xbf) {\n    // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n    // followed by the length, followed by the string\n    llength = firstByte - 0xb6\n    if (input.length - 1 < llength) {\n      throw new Error('invalid RLP: not enough bytes for string length')\n    }\n    length = decodeLength(safeSlice(input, 1, llength))\n    if (length <= 55) {\n      throw new Error('invalid RLP: expected string length to be greater than 55')\n    }\n    data = safeSlice(input, llength, length + llength)\n\n    return {\n      data,\n      remainder: input.subarray(length + llength),\n    }\n  } else if (firstByte <= 0xf7) {\n    // a list between 0-55 bytes long\n    length = firstByte - 0xbf\n    innerRemainder = safeSlice(input, 1, length)\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder)\n      decoded.push(d.data)\n      innerRemainder = d.remainder\n    }\n\n    return {\n      data: decoded,\n      remainder: input.subarray(length),\n    }\n  } else {\n    // a list over 55 bytes long\n    llength = firstByte - 0xf6\n    length = decodeLength(safeSlice(input, 1, llength))\n    if (length < 56) {\n      throw new Error('invalid RLP: encoded list too short')\n    }\n    const totalLength = llength + length\n    if (totalLength > input.length) {\n      throw new Error('invalid RLP: total length is larger than the data')\n    }\n\n    innerRemainder = safeSlice(input, llength, totalLength)\n\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder)\n      decoded.push(d.data)\n      innerRemainder = d.remainder\n    }\n\n    return {\n      data: decoded,\n      remainder: input.subarray(totalLength),\n    }\n  }\n}\n\nconst cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'))\nfunction bytesToHex(uint8a: Uint8Array): string {\n  // Pre-caching chars with `cachedHexes` speeds this up 6x\n  let hex = ''\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += cachedHexes[uint8a[i]]\n  }\n  return hex\n}\n\nfunction parseHexByte(hexByte: string): number {\n  const byte = Number.parseInt(hexByte, 16)\n  if (Number.isNaN(byte)) throw new Error('Invalid byte sequence')\n  return byte\n}\n\n// Caching slows it down 2-3x\nfunction hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex)\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex')\n  const array = new Uint8Array(hex.length / 2)\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2\n    array[i] = parseHexByte(hex.slice(j, j + 2))\n  }\n  return array\n}\n\n/** Concatenates two Uint8Arrays into one. */\nfunction concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  if (arrays.length === 1) return arrays[0]\n  const length = arrays.reduce((a, arr) => a + arr.length, 0)\n  const result = new Uint8Array(length)\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i]\n    result.set(arr, pad)\n    pad += arr.length\n  }\n  return result\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any\ndeclare const TextDecoder: any\n\nfunction utf8ToBytes(utf: string): Uint8Array {\n  return new TextEncoder().encode(utf)\n}\n\n/** Transform an integer into its hexadecimal value */\nfunction numberToHex(integer: number | bigint): string {\n  if (integer < 0) {\n    throw new Error('Invalid integer as argument, must be unsigned!')\n  }\n  const hex = integer.toString(16)\n  return hex.length % 2 ? `0${hex}` : hex\n}\n\n/** Pad a string to be even */\nfunction padToEven(a: string): string {\n  return a.length % 2 ? `0${a}` : a\n}\n\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str: string): boolean {\n  return str.length >= 2 && str[0] === '0' && str[1] === 'x'\n}\n\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str: string): string {\n  if (typeof str !== 'string') {\n    return str\n  }\n  return isHexPrefixed(str) ? str.slice(2) : str\n}\n\n/** Transform anything into a Uint8Array */\nfunction toBytes(v: Input): Uint8Array {\n  if (v instanceof Uint8Array) {\n    return v\n  }\n  if (typeof v === 'string') {\n    if (isHexPrefixed(v)) {\n      return hexToBytes(padToEven(stripHexPrefix(v)))\n    }\n    return utf8ToBytes(v)\n  }\n  if (typeof v === 'number' || typeof v === 'bigint') {\n    if (!v) {\n      return Uint8Array.from([])\n    }\n    return hexToBytes(numberToHex(v))\n  }\n  if (v === null || v === undefined) {\n    return Uint8Array.from([])\n  }\n  throw new Error('toBytes: received unsupported type ' + typeof v)\n}\n\nexport const utils = {\n  bytesToHex,\n  concatBytes,\n  hexToBytes,\n  utf8ToBytes,\n}\n\nexport const RLP = { encode, decode }\n", "export { secp256k1 } from \"@noble/curves/secp256k1\";\n"],
  "mappings": "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",
  "names": []
}
