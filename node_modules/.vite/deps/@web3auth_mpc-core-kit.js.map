{
  "version": 3,
  "sources": ["../../@babel/runtime/helpers/typeof.js", "../../@babel/runtime/helpers/toPrimitive.js", "../../@babel/runtime/helpers/toPropertyKey.js", "../../@babel/runtime/helpers/defineProperty.js", "../../@toruslabs/tss-client-util/dist/tssClientUtil.cjs.js", "../../@web3auth/mpc-core-kit/node_modules/@toruslabs/constants/dist/lib.esm/constants.js", "../../@web3auth/mpc-core-kit/dist/lib.esm/constants.js", "../../@web3auth/mpc-core-kit/dist/lib.esm/helper/errors.js", "../../@web3auth/mpc-core-kit/dist/lib.esm/helper/browserStorage.js", "../../@tkey/share-serialization/dist/lib.esm/errors.js", "../../@tkey/share-serialization/dist/lib.esm/ShareSerializationModule.js", "../../@tkey/share-serialization/dist/lib.esm/english.js", "../../@tkey/share-serialization/dist/lib.esm/utils.js", "../../@web3auth/mpc-core-kit/dist/lib.esm/helper/factorSerialization.js", "../../@web3auth/mpc-core-kit/dist/lib.esm/helper/securityQuestion.js", "../../@web3auth/mpc-core-kit/dist/lib.esm/interfaces.js", "../../@tkey/storage-layer-torus/dist/lib.esm/MockStorageLayer.js", "../../@tkey/storage-layer-torus/dist/lib.esm/TorusStorageLayer.js", "../../@toruslabs/elliptic-wrapper/src/ed25519.ts", "../../@toruslabs/eccrypto/src/index.ts", "../../@toruslabs/tss-client/dist/tssClient.esm.js", "../../@toruslabs/tss-frost-common/dist/tssFrostCommon.esm.js", "../../@toruslabs/tss-frost-client/dist/tssFrostClient.esm.js", "../../@web3auth/mpc-core-kit/dist/lib.esm/mpcCoreKit.js", "../../@toruslabs/openlogin-utils/dist/openloginUtils.esm.js", "../../@toruslabs/constants/dist/constants.esm.js", "../../@web3auth/mpc-core-kit/dist/lib.esm/utils.js"],
  "sourcesContent": ["function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nmodule.exports = toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nmodule.exports = toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "/******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \t// The require scope\n/******/ \tvar __webpack_require__ = {};\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__webpack_require__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__webpack_require__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__webpack_require__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__webpack_require__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/************************************************************************/\nvar __webpack_exports__ = {};\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  AwaitableMap: () => (/* reexport */ AwaitableMap),\n  MapQueue: () => (/* reexport */ MapQueue),\n  deriveShareCoefficients: () => (/* reexport */ deriveShareCoefficients),\n  fraction: () => (/* reexport */ fraction),\n  lagrangeCoefficient: () => (/* reexport */ lagrangeCoefficient),\n  lagrangeCoefficients: () => (/* reexport */ lagrangeCoefficients)\n});\n\n;// CONCATENATED MODULE: external \"@babel/runtime/helpers/defineProperty\"\nconst defineProperty_namespaceObject = require(\"@babel/runtime/helpers/defineProperty\");\nvar defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty_namespaceObject);\n;// CONCATENATED MODULE: ./src/map.ts\n\nclass AwaitableMap {\n  constructor() {\n    defineProperty_default()(this, \"map\", new Map());\n    defineProperty_default()(this, \"queue\", new Map());\n  }\n  get size() {\n    return this.map.size;\n  }\n  getSync(k) {\n    return this.map.get(k);\n  }\n\n  /**\n   * Gets the value at key `k`, or waits for the duration of `timeout` for a\n   * corresponding value to be set. If `timeout` is reached, returns\n   * `undefined`.\n   */\n  async get(k, timeout = 0) {\n    const v = this.map.get(k);\n    if (v) {\n      return v;\n    }\n    return new Promise(resolve => {\n      const prom = {\n        resolve,\n        timeout: setTimeout(() => {\n          // Timeout reached.\n\n          // Delete from queue.\n          const proms = this.queue.get(k);\n          if (proms) {\n            const i = proms.indexOf(prom);\n            if (i >= 0) {\n              proms.splice(i, 1);\n            }\n          }\n\n          // Resolve to undefined.\n          resolve(undefined);\n        }, timeout)\n      };\n      let proms = this.queue.get(k);\n      if (!proms) {\n        proms = [];\n        this.queue.set(k, proms);\n      }\n      proms.push(prom);\n    });\n  }\n  set(k, v) {\n    this.map.set(k, v);\n    const proms = this.queue.get(k);\n    if (proms) {\n      for (const prom of proms) {\n        clearTimeout(prom.timeout);\n        prom.resolve(v);\n      }\n      this.queue.delete(k);\n    }\n  }\n  delete(k) {\n    this.map.delete(k);\n    this.queue.delete(k);\n  }\n  forEach(callbackfn) {\n    this.map.forEach(callbackfn);\n  }\n  clear() {\n    this.map.clear();\n    this.queue.clear();\n  }\n}\nclass MapQueue {\n  constructor() {\n    defineProperty_default()(this, \"buffer\", new Map());\n    defineProperty_default()(this, \"queue\", new Map());\n  }\n  /**\n   * Pops the next value queued for key `k` from the buffer, or waits for the\n   * duration of `timeout` for a corresponding value to arrive. If `timeout` is\n   * reached, returns `undefined`.\n   */\n  async pop(k, timeout = 0) {\n    const vals = this.buffer.get(k);\n    if (vals && vals.length > 0) {\n      const val = vals.splice(0, 1)[0];\n      return val;\n    }\n    return new Promise(resolve => {\n      const prom = {\n        resolve,\n        timeout: setTimeout(() => {\n          // Timeout reached.\n\n          // Delete from queue.\n          const proms = this.queue.get(k);\n          if (proms) {\n            const i = proms.indexOf(prom);\n            if (i >= 0) {\n              proms.splice(i, 1);\n            }\n          }\n\n          // Resolve to undefined.\n          resolve(undefined);\n        }, timeout)\n      };\n      let proms = this.queue.get(k);\n      if (!proms) {\n        proms = [];\n        this.queue.set(k, proms);\n      }\n      proms.push(prom);\n    });\n  }\n  push(k, v) {\n    const proms = this.queue.get(k);\n    if (proms && proms.length > 0) {\n      const prom = proms.splice(0, 1)[0];\n      clearTimeout(prom.timeout);\n      prom.resolve(v);\n      return;\n    }\n    let vals = this.buffer.get(k);\n    if (!vals) {\n      vals = [];\n      this.buffer.set(k, vals);\n    }\n    vals.push(v);\n  }\n  delete(k) {\n    this.buffer.delete(k);\n    this.queue.delete(k);\n  }\n  forEach(callbackfn) {\n    this.buffer.forEach((vals, k) => {\n      vals.forEach(v => {\n        callbackfn(v, k);\n      });\n    });\n  }\n  clear() {\n    this.buffer.clear();\n    this.queue.clear();\n  }\n}\n;// CONCATENATED MODULE: external \"bn.js\"\nconst external_bn_js_namespaceObject = require(\"bn.js\");\nvar external_bn_js_default = /*#__PURE__*/__webpack_require__.n(external_bn_js_namespaceObject);\n;// CONCATENATED MODULE: ./src/util.ts\n\nfunction fraction(nom, denom, modulus) {\n  return nom.mul(denom.invm(modulus)).umod(modulus);\n}\nfunction lagrangeCoefficient(x_coords, target_coeff, target_x, modulus) {\n  return x_coords.filter((_, i) => i !== target_coeff).reduce((prev, cur) => {\n    const frac = fraction(target_x.sub(cur), x_coords[target_coeff].sub(cur), modulus);\n    return prev.mul(frac).umod(modulus);\n  }, new (external_bn_js_default())(1));\n}\nfunction lagrangeCoefficients(x_coords, target_x, modulus) {\n  const x_coords_BN = x_coords.map(i => new (external_bn_js_default())(i));\n  const target_x_BN = new (external_bn_js_default())(target_x);\n  return x_coords_BN.map((_value, i) => lagrangeCoefficient(x_coords_BN, i, target_x_BN, modulus));\n}\n\n/**\n * Derive share coefficients for converting a 2-level Shamir secret sharing into\n * a 1-level Shamir secret sharing.\n *\n * Input:\n *\n * Level 1: [SERVERS, CLIENT]\n * Level 2: [SERVER_1, ... , SERVER_N]\n *\n * Ouput:\n *\n * Level 1: [SCOEFF_1 * SERVER_1, ..., SCOEFF_N * SERVER_N, C_COEFF * CLIENT]\n *\n * @param serverXCoords - The x-coordinates of the selected servers.\n * @param clientXCoord - The target x-coordinate of the client.\n * @param modulus - The finite field modulus.\n * @param serversXCoordL1 - The x-coordinate of the servers at level 1.\n * @param clientXCoordL1 - The x-coordinate of the client at level 1.\n * @returns - The share coefficients for the client and the servers.\n */\nfunction deriveShareCoefficients(serverXCoords, clientXCoord, modulus, serversXCoordL1 = 1, clientXCoordL1 = 2) {\n  const l1Coefficients = lagrangeCoefficients([serversXCoordL1, clientXCoordL1], 0, modulus);\n  const l2Coefficients = lagrangeCoefficients(serverXCoords, 0, modulus);\n  if (serverXCoords.includes(clientXCoord)) {\n    throw new Error(`Invalid server x-coordinates: overlapping with client x-coordinate: ${serverXCoords} ${clientXCoord}`);\n  }\n  const targetCoefficients = lagrangeCoefficients([clientXCoord, ...serverXCoords], 0, modulus);\n\n  // Derive server coefficients.\n  const serverCoefficients = l2Coefficients.map((coeff, i) => fraction(l1Coefficients[0].mul(coeff), targetCoefficients[i + 1], modulus));\n\n  // Derive client coefficient.\n  const clientCoefficient = fraction(l1Coefficients[1], targetCoefficients[0], modulus);\n  return {\n    serverCoefficients,\n    clientCoefficient\n  };\n}\n;// CONCATENATED MODULE: ./src/index.ts\n\n\nmodule.exports = __webpack_exports__;\n/******/ })()\n;", "const TORUS_LEGACY_NETWORK = {\n  MAINNET: \"mainnet\",\n  TESTNET: \"testnet\",\n  CYAN: \"cyan\",\n  AQUA: \"aqua\",\n  CELESTE: \"celeste\"\n};\nconst TORUS_SAPPHIRE_NETWORK = {\n  SAPPHIRE_DEVNET: \"sapphire_devnet\",\n  SAPPHIRE_MAINNET: \"sapphire_mainnet\"\n};\nconst PROXY_CONTRACT_ADDRESS = {\n  [TORUS_LEGACY_NETWORK.MAINNET]: \"0xf20336e16B5182637f09821c27BDe29b0AFcfe80\",\n  [TORUS_LEGACY_NETWORK.TESTNET]: \"0xd084604e5FA387FbC2Da8bAab07fDD6aDED4614A\",\n  [TORUS_LEGACY_NETWORK.CYAN]: \"0x9f072ba19b3370e512aa1b4bfcdaf97283168005\",\n  [TORUS_LEGACY_NETWORK.AQUA]: \"0x29Dea82a0509153b91040ee13cDBba0f03efb625\",\n  [TORUS_LEGACY_NETWORK.CELESTE]: \"0x6Bffb4e89453069E7487f0fa5c9f4a2D771cce6c\"\n};\nconst MULTI_CLUSTER_NETWORKS = [\n  // TORUS_LEGACY_NETWORK.AQUA,\n  // TORUS_LEGACY_NETWORK.CELESTE,\n  // TORUS_LEGACY_NETWORK.CYAN,\n];\nconst LEGACY_NETWORKS_ROUTE_MAP = {\n  [TORUS_LEGACY_NETWORK.AQUA]: {\n    migrationCompleted: true,\n    networkIdentifier: \"aqua\",\n    networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET\n  },\n  [TORUS_LEGACY_NETWORK.CELESTE]: {\n    migrationCompleted: true,\n    networkIdentifier: \"celeste\",\n    networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET\n  },\n  [TORUS_LEGACY_NETWORK.CYAN]: {\n    migrationCompleted: true,\n    networkIdentifier: \"cyan\",\n    networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET\n  },\n  [TORUS_LEGACY_NETWORK.MAINNET]: {\n    migrationCompleted: true,\n    networkIdentifier: \"mainnet\",\n    networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET\n  },\n  [TORUS_LEGACY_NETWORK.TESTNET]: {\n    migrationCompleted: true,\n    networkIdentifier: \"teal\",\n    networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET\n  }\n};\nconst NETWORK_MAP = {\n  [TORUS_LEGACY_NETWORK.MAINNET]: \"mainnet\",\n  [TORUS_LEGACY_NETWORK.TESTNET]: \"goerli\",\n  [TORUS_LEGACY_NETWORK.CYAN]: \"polygon-mainnet\",\n  [TORUS_LEGACY_NETWORK.AQUA]: \"polygon-mainnet\",\n  [TORUS_LEGACY_NETWORK.CELESTE]: \"polygon-mainnet\"\n};\nconst SIGNER_MAP = {\n  [TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET]: \"https://signer.web3auth.io\",\n  [TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET]: \"https://signer.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.MAINNET]: \"https://signer.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.TESTNET]: \"https://signer.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.CYAN]: \"https://signer-polygon.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.AQUA]: \"https://signer-polygon.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.CELESTE]: \"https://signer-polygon.web3auth.io\"\n};\nconst METADATA_MAP = {\n  [TORUS_LEGACY_NETWORK.MAINNET]: \"https://metadata.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.TESTNET]: \"https://metadata.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.CYAN]: \"https://metadata.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.AQUA]: \"https://metadata.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.CELESTE]: \"https://metadata.web3auth.io\"\n};\nconst FND_SERVER = \"https://fnd.web3auth.io\";\nconst SESSION_SERVER = \"https://session.web3auth.io\";\nconst KEY_TYPE = {\n  SECP256K1: \"secp256k1\",\n  ED25519: \"ed25519\"\n};\n\nexport { FND_SERVER, KEY_TYPE, LEGACY_NETWORKS_ROUTE_MAP, METADATA_MAP, MULTI_CLUSTER_NETWORKS, NETWORK_MAP, PROXY_CONTRACT_ADDRESS, SESSION_SERVER, SIGNER_MAP, TORUS_LEGACY_NETWORK, TORUS_SAPPHIRE_NETWORK };\n", "import { TORUS_SAPPHIRE_NETWORK } from '@toruslabs/constants';\n\nconst WEB3AUTH_NETWORK = {\n  MAINNET: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET,\n  DEVNET: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET\n};\nconst USER_PATH = {\n  NEW: \"NewAccount\",\n  EXISTING: \"ExistingAccount\",\n  REHYDRATE: \"RehydrateAccount\",\n  RECOVER: \"RecoverAccount\"\n};\nlet FactorKeyTypeShareDescription = /*#__PURE__*/function (FactorKeyTypeShareDescription) {\n  FactorKeyTypeShareDescription[\"HashedShare\"] = \"hashedShare\";\n  FactorKeyTypeShareDescription[\"SecurityQuestions\"] = \"tssSecurityQuestions\";\n  FactorKeyTypeShareDescription[\"DeviceShare\"] = \"deviceShare\";\n  FactorKeyTypeShareDescription[\"SeedPhrase\"] = \"seedPhrase\";\n  FactorKeyTypeShareDescription[\"PasswordShare\"] = \"passwordShare\";\n  FactorKeyTypeShareDescription[\"SocialShare\"] = \"socialShare\";\n  FactorKeyTypeShareDescription[\"Other\"] = \"Other\";\n  return FactorKeyTypeShareDescription;\n}({});\nconst DELIMITERS = {\n  Delimiter1: \"\\u001c\",\n  Delimiter2: \"\\u0015\",\n  Delimiter3: \"\\u0016\",\n  Delimiter4: \"\\u0017\"\n};\nconst ERRORS = {\n  TKEY_SHARES_REQUIRED: \"required more shares\",\n  INVALID_BACKUP_SHARE: \"invalid backup share\"\n};\nconst SOCIAL_FACTOR_INDEX = 1;\n\n/**\n * Defines the TSS Share Index in a simplified way for better implementation.\n **/\nlet TssShareType = /*#__PURE__*/function (TssShareType) {\n  TssShareType[TssShareType[\"DEVICE\"] = 2] = \"DEVICE\";\n  TssShareType[TssShareType[\"RECOVERY\"] = 3] = \"RECOVERY\";\n  return TssShareType;\n}({});\nconst VALID_SHARE_INDICES = [TssShareType.DEVICE, TssShareType.RECOVERY];\nconst SCALAR_LEN = 32; // Length of secp256k1 scalar in bytes.\nconst FIELD_ELEMENT_HEX_LEN = 32 * 2; // Length of secp256k1 field element in hex form.\n\nconst MAX_FACTORS = 10; // Maximum number of factors that can be added to an account.\nconst SOCIAL_TKEY_INDEX = 1;\n\nexport { DELIMITERS, ERRORS, FIELD_ELEMENT_HEX_LEN, FactorKeyTypeShareDescription, MAX_FACTORS, SCALAR_LEN, SOCIAL_FACTOR_INDEX, SOCIAL_TKEY_INDEX, TssShareType, USER_PATH, VALID_SHARE_INDICES, WEB3AUTH_NETWORK };\n", "import _defineProperty from '@babel/runtime/helpers/defineProperty';\n\n/**\n * Fix the prototype chain of the error\n *\n * Use Object.setPrototypeOf\n * Support ES6 environments\n *\n * Fallback setting __proto__\n * Support IE11+, see https://docs.microsoft.com/en-us/scripting/javascript/reference/javascript-version-information\n */\nfunction fixProto(target, prototype) {\n  const {\n    setPrototypeOf\n  } = Object;\n  if (setPrototypeOf) {\n    setPrototypeOf(target, prototype);\n  } else {\n    // eslint-disable-next-line no-proto, @typescript-eslint/no-explicit-any\n    target.__proto__ = prototype;\n  }\n}\n\n/**\n * Capture and fix the error stack when available\n *\n * Use Error.captureStackTrace\n * Support v8 environments\n */\nfunction fixStack(target, fn = target.constructor) {\n  const {\n    captureStackTrace\n  } = Error;\n  if (captureStackTrace) {\n    captureStackTrace(target, fn);\n  }\n}\n\n// copy from https://github.com/microsoft/TypeScript/blob/main/lib/lib.es2022.error.d.ts\n// avoid typescript isue https://github.com/adriengibrat/ts-custom-error/issues/81\n\n/**\n * Allows to easily extend a base class to create custom applicative errors.\n *\n * example:\n * ```\n * class HttpError extends CustomError {\n * \tpublic constructor(\n * \t\tpublic code: number,\n * \t\tmessage?: string,\n *      cause?: Error,\n * \t) {\n * \t\tsuper(message, { cause })\n * \t}\n * }\n *\n * new HttpError(404, 'Not found')\n * ```\n */\nclass CustomError extends Error {\n  constructor(message, options) {\n    super(message, options);\n    // set error name as constructor name, make it not enumerable to keep native Error behavior\n    // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors\n    // see https://github.com/adriengibrat/ts-custom-error/issues/30\n    _defineProperty(this, \"name\", void 0);\n    Object.defineProperty(this, \"name\", {\n      value: new.target.name,\n      enumerable: false,\n      configurable: true\n    });\n    // fix the extended error prototype chain\n    // because typescript __extends implementation can't\n    // see https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    fixProto(this, new.target.prototype);\n    // try to remove contructor from stack trace\n    fixStack(this);\n  }\n}\nclass AbstractCoreKitError extends CustomError {\n  constructor(code, message) {\n    // takes care of stack and proto\n    super(message);\n    _defineProperty(this, \"code\", void 0);\n    _defineProperty(this, \"message\", void 0);\n    this.code = code;\n    this.message = message || \"\";\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", {\n      value: \"TkeyError\"\n    });\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message\n    };\n  }\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\n/**\n * CoreKitError, extension for Error using CustomError\n *\n * Usage:\n * 1. throw CoreKitError.factorKeyNotPresent(\"Required factor key missing in the operation.\"); // Use a predefined method to throw a common error\n * 2. throw CoreKitError.fromCode(1001); // Throw an error using a code for a common error\n * 3. throw new CoreKitError(1102, \"'tkey' instance has not been initialized.\"); // Throw a specific error with a custom message\n *\n * Guide:\n * 1000 - Configuration errors\n * 1100 - TSS and key management errors\n * 1200 - Factor key and authentication errors\n * 1300 - Initialization and session management\n */\nclass CoreKitError extends AbstractCoreKitError {\n  constructor(code, message) {\n    super(code, message);\n    Object.defineProperty(this, \"name\", {\n      value: \"CoreKitError\"\n    });\n  }\n  static fromCode(code, extraMessage = \"\") {\n    return new CoreKitError(code, `${CoreKitError.messages[code]} ${extraMessage}`);\n  }\n  static default(extraMessage = \"\") {\n    return new CoreKitError(1000, `${CoreKitError.messages[1000]} ${extraMessage}`);\n  }\n\n  // Configuration errors\n  static chainConfigInvalid(extraMessage = \"\") {\n    return CoreKitError.fromCode(1001, extraMessage);\n  }\n  static clientIdInvalid(extraMessage = \"\") {\n    return CoreKitError.fromCode(1002, extraMessage);\n  }\n  static storageTypeUnsupported(extraMessage = \"\") {\n    return CoreKitError.fromCode(1003, extraMessage);\n  }\n  static oauthLoginUnsupported(extraMessage = \"\") {\n    return CoreKitError.fromCode(1004, extraMessage);\n  }\n  static noValidStorageOptionFound(extraMessage = \"\") {\n    return CoreKitError.fromCode(1005, extraMessage);\n  }\n  static noDataFoundInStorage(extraMessage = \"\") {\n    return CoreKitError.fromCode(1006, extraMessage);\n  }\n  static invalidConfig(extraMessage = \"\") {\n    return CoreKitError.fromCode(1007, extraMessage);\n  }\n\n  // TSS and key management errors\n  static tssLibRequired(extraMessage = \"\") {\n    return CoreKitError.fromCode(1101, extraMessage);\n  }\n  static tkeyInstanceUninitialized(extraMessage = \"\") {\n    return CoreKitError.fromCode(1102, extraMessage);\n  }\n  static duplicateTssIndex(extraMessage = \"\") {\n    return CoreKitError.fromCode(1103, extraMessage);\n  }\n  static nodeDetailsRetrievalFailed(extraMessage = \"\") {\n    return CoreKitError.fromCode(1104, extraMessage);\n  }\n  static prefetchValueExceeded(extraMessage = \"\") {\n    return CoreKitError.fromCode(1105, extraMessage);\n  }\n  static invalidTorusLoginResponse(extraMessage = \"\") {\n    return CoreKitError.fromCode(1106, extraMessage);\n  }\n  static invalidTorusAggregateLoginResponse(extraMessage = \"\") {\n    return CoreKitError.fromCode(1107, extraMessage);\n  }\n  static unsupportedRedirectMethod(extraMessage = \"\") {\n    return CoreKitError.fromCode(1108, extraMessage);\n  }\n  static postBoxKeyMissing(extraMessage = \"\") {\n    return CoreKitError.fromCode(1109, extraMessage);\n  }\n  static tssShareTypeIndexMissing(extraMessage = \"\") {\n    return CoreKitError.fromCode(1110, extraMessage);\n  }\n  static tssPublicKeyOrEndpointsMissing(extraMessage = \"\") {\n    return CoreKitError.fromCode(1111, extraMessage);\n  }\n  static activeSessionNotFound(extraMessage = \"\") {\n    return CoreKitError.fromCode(1112, extraMessage);\n  }\n  static tssNoncesMissing(extraMessage = \"\") {\n    return CoreKitError.fromCode(1113, extraMessage);\n  }\n  static tssKeyImportNotAllowed(extraMessage = \"\") {\n    return CoreKitError.fromCode(1114, extraMessage);\n  }\n\n  // Factor key and authentication errors\n  static factorKeyNotPresent(extraMessage = \"\") {\n    return CoreKitError.fromCode(1201, extraMessage);\n  }\n  static factorKeyAlreadyExists(extraMessage = \"\") {\n    return CoreKitError.fromCode(1202, extraMessage);\n  }\n  static mfaAlreadyEnabled(extraMessage = \"\") {\n    return CoreKitError.fromCode(1203, extraMessage);\n  }\n  static cannotDeleteLastFactor(extraMessage = \"\") {\n    return CoreKitError.fromCode(1204, extraMessage);\n  }\n  static factorInUseCannotBeDeleted(extraMessage = \"\") {\n    return CoreKitError.fromCode(1205, extraMessage);\n  }\n  static userNotLoggedIn(extraMessage = \"\") {\n    return CoreKitError.fromCode(1206, extraMessage);\n  }\n  static providedFactorKeyInvalid(extraMessage = \"\") {\n    return CoreKitError.fromCode(1207, extraMessage);\n  }\n  static factorEncsMissing(extraMessage = \"\") {\n    return CoreKitError.fromCode(1208, extraMessage);\n  }\n  static noMetadataFound(extraMessage = \"\") {\n    return CoreKitError.fromCode(1209, extraMessage);\n  }\n  static newShareIndexInvalid(extraMessage = \"\") {\n    return CoreKitError.fromCode(1210, extraMessage);\n  }\n  static maximumFactorsReached(extraMessage = \"\") {\n    return CoreKitError.fromCode(1211, extraMessage);\n  }\n  static noMetadataShareFound(extraMessage = \"\") {\n    return CoreKitError.fromCode(1212, extraMessage);\n  }\n  static signaturesNotPresent(extraMessage = \"\") {\n    return CoreKitError.fromCode(1213, extraMessage);\n  }\n  static factorPubsMissing(extraMessage = \"\") {\n    return CoreKitError.fromCode(1214, extraMessage);\n  }\n\n  // Initialization and session management\n  static commitChangesBeforeMFA(extraMessage = \"\") {\n    return CoreKitError.fromCode(1301, extraMessage);\n  }\n  static mpcCoreKitNotInitialized(extraMessage = \"\") {\n    return CoreKitError.fromCode(1302, extraMessage);\n  }\n}\n_defineProperty(CoreKitError, \"messages\", {\n  // Configuration errors\n  1001: \"You must specify a valid eip155 chain configuration in the options.\",\n  1002: \"You must specify a web3auth clientId.\",\n  1003: \"Unsupported storage type in this UX mode.\",\n  1004: \"OAuth login is NOT supported in this UX mode.\",\n  1005: \"No valid storage option found.\",\n  1006: \"No data found in storage.\",\n  1007: \"Invalid config.\",\n  // TSS and key management errors\n  1101: \"'tssLib' is required when running in this UX mode.\",\n  1102: \"'tkey' instance has not been initialized.\",\n  1103: \"Duplicate TSS index found. Ensure that each TSS index is unique.\",\n  1104: \"Failed to retrieve node details. Please check your network connection and try again.\",\n  1105: \"The prefetch TSS public keys exceeds the maximum allowed limit of 3.\",\n  1106: \"Invalid 'TorusLoginResponse' data provided.\",\n  1107: \"Invalid 'TorusAggregateLoginResponse' data provided.\",\n  1108: \"Unsupported method type encountered in redirect result.\",\n  1109: \"OAuthKey not present in state.\",\n  1110: \"TSS Share Type (Index) not present in state when getting current factor key.\",\n  1111: \"'tssPubKey' or 'torusNodeTSSEndpoints' are missing.\",\n  1112: \"No active session found.\",\n  1113: \"tssNonces not present in metadata when getting tss nonce.\",\n  1114: \"A TSS key cannot be imported for an existing user who already has a key configured.\",\n  // Factor key and authentication errors\n  1201: \"factorKey not present in state when required.\",\n  1202: \"A factor with the same key already exists.\",\n  1203: \"MFA is already enabled.\",\n  1204: \"Cannot delete the last remaining factor as at least one factor is required.\",\n  1205: \"The factor currently in use cannot be deleted.\",\n  1206: \"User is not logged in.\",\n  1207: \"Provided factor key is invalid.\",\n  1208: \"'factorEncs' mpt [resemt].\",\n  1209: \"No metadata found for the provided factor key. Consider resetting your account if this error persists.\",\n  1210: \"The new share index is not valid. It must be one of the valid share indices.\",\n  1211: \"The maximum number of allowable factors (10) has been reached.\",\n  1212: \"No metadata share found in the current polynomial.\",\n  1213: \"No signatures found.\",\n  1214: \"Factor public keys not present\",\n  // Initialization and session management\n  1301: \"The 'CommitChanges' method must be called before enabling MFA.\",\n  1302: \"The MPC Core Kit is not initialized. Please ensure you call the 'init()' method to initialize the kit properly before attempting any operations.\"\n});\n\nexport { CustomError, CoreKitError as default };\n", "import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport CoreKitError from './errors.js';\n\nclass MemoryStorage {\n  constructor() {\n    _defineProperty(this, \"_store\", {});\n  }\n  getItem(key) {\n    return this._store[key] || null;\n  }\n  setItem(key, value) {\n    this._store[key] = value;\n  }\n  removeItem(key) {\n    delete this._store[key];\n  }\n  clear() {\n    this._store = {};\n  }\n}\nclass AsyncStorage {\n  constructor(storeKey, storage) {\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"_storeKey\", void 0);\n    this.storage = storage;\n    this._storeKey = storeKey;\n  }\n  async toJSON() {\n    const result = await this.storage.getItem(this._storeKey);\n    if (!result) {\n      throw CoreKitError.noDataFoundInStorage(`No data found in storage under key '${this._storeKey}'.`);\n    }\n    return result;\n  }\n  async resetStore() {\n    const currStore = await this.getStore();\n    await this.storage.setItem(this._storeKey, JSON.stringify({}));\n    return currStore;\n  }\n  async getStore() {\n    return JSON.parse((await this.storage.getItem(this._storeKey)) || \"{}\");\n  }\n  async get(key) {\n    const store = JSON.parse((await this.storage.getItem(this._storeKey)) || \"{}\");\n    return store[key];\n  }\n  async set(key, value) {\n    const store = JSON.parse((await this.storage.getItem(this._storeKey)) || \"{}\");\n    store[key] = value;\n    await this.storage.setItem(this._storeKey, JSON.stringify(store));\n  }\n  async remove(key) {\n    const store = JSON.parse((await this.storage.getItem(this._storeKey)) || \"{}\");\n    delete store[key];\n    await this.storage.setItem(this._storeKey, JSON.stringify(store));\n  }\n}\n\nexport { AsyncStorage, MemoryStorage };\n", "import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { TkeyError } from '@tkey/common-types';\n\nclass ShareSerializationError extends TkeyError {\n  constructor(code, message) {\n    // takes care of stack and proto\n    super(code, message);\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", {\n      value: \"ShareSerializationError\"\n    });\n  }\n  static fromCode(code, extraMessage = \"\") {\n    return new ShareSerializationError(code, `${ShareSerializationError.messages[code]}${extraMessage}`);\n  }\n  static default(extraMessage = \"\") {\n    return new ShareSerializationError(7000, `${ShareSerializationError.messages[7000]}${extraMessage}`);\n  }\n\n  // Custom methods\n  static typeNotSupported(extraMessage = \"\") {\n    return ShareSerializationError.fromCode(7010, extraMessage);\n  }\n  static invalidEntropy(extraMessage = \"\") {\n    return ShareSerializationError.fromCode(7011, extraMessage);\n  }\n  static invalidChecksum(extraMessage = \"\") {\n    return ShareSerializationError.fromCode(7012, extraMessage);\n  }\n  static invalidMnemonic(extraMessage = \"\") {\n    return ShareSerializationError.fromCode(7013, extraMessage);\n  }\n}\n_defineProperty(ShareSerializationError, \"messages\", {\n  7000: \"Custom\",\n  // Misc\n  7010: \"Type is not supported\",\n  7011: \"Invalid Entropy\",\n  7012: \"Invalid Checksum\",\n  7013: \"Invalid mnemonic\"\n});\nvar ShareSerializationError$1 = ShareSerializationError;\n\nexport { ShareSerializationError$1 as default };\n", "import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport BN from 'bn.js';\nimport { english } from './english.js';\nimport ShareSerializationError from './errors.js';\nimport { entropyToMnemonic, mnemonicToEntropy } from './utils.js';\n\nconst SHARE_SERIALIZATION_MODULE_NAME = \"shareSerialization\";\nclass ShareSerializationModule {\n  constructor() {\n    _defineProperty(this, \"moduleName\", void 0);\n    _defineProperty(this, \"tbSDK\", void 0);\n    this.moduleName = SHARE_SERIALIZATION_MODULE_NAME;\n  }\n  static serializeMnemonic(share) {\n    return entropyToMnemonic(share.toString(\"hex\").padStart(64, \"0\"), english);\n  }\n  static deserializeMnemonic(share) {\n    return new BN(mnemonicToEntropy(share, english), \"hex\");\n  }\n  setModuleReferences(tbSDK) {\n    this.tbSDK = tbSDK;\n    this.tbSDK._addShareSerializationMiddleware(this.serialize.bind(this), this.deserialize.bind(this));\n  }\n\n  // eslint-disable-next-line\n  async initialize() {}\n  async serialize(share, type) {\n    if (type === \"mnemonic\") {\n      return ShareSerializationModule.serializeMnemonic(share);\n    }\n    throw ShareSerializationError.typeNotSupported();\n  }\n  async deserialize(serializedShare, type) {\n    if (type === \"mnemonic\") return ShareSerializationModule.deserializeMnemonic(serializedShare);\n    throw ShareSerializationError.typeNotSupported();\n  }\n}\nvar ShareSerializationModule$1 = ShareSerializationModule;\n\nexport { SHARE_SERIALIZATION_MODULE_NAME, ShareSerializationModule$1 as default };\n", "const english = [\"abandon\", \"ability\", \"able\", \"about\", \"above\", \"absent\", \"absorb\", \"abstract\", \"absurd\", \"abuse\", \"access\", \"accident\", \"account\", \"accuse\", \"achieve\", \"acid\", \"acoustic\", \"acquire\", \"across\", \"act\", \"action\", \"actor\", \"actress\", \"actual\", \"adapt\", \"add\", \"addict\", \"address\", \"adjust\", \"admit\", \"adult\", \"advance\", \"advice\", \"aerobic\", \"affair\", \"afford\", \"afraid\", \"again\", \"age\", \"agent\", \"agree\", \"ahead\", \"aim\", \"air\", \"airport\", \"aisle\", \"alarm\", \"album\", \"alcohol\", \"alert\", \"alien\", \"all\", \"alley\", \"allow\", \"almost\", \"alone\", \"alpha\", \"already\", \"also\", \"alter\", \"always\", \"amateur\", \"amazing\", \"among\", \"amount\", \"amused\", \"analyst\", \"anchor\", \"ancient\", \"anger\", \"angle\", \"angry\", \"animal\", \"ankle\", \"announce\", \"annual\", \"another\", \"answer\", \"antenna\", \"antique\", \"anxiety\", \"any\", \"apart\", \"apology\", \"appear\", \"apple\", \"approve\", \"april\", \"arch\", \"arctic\", \"area\", \"arena\", \"argue\", \"arm\", \"armed\", \"armor\", \"army\", \"around\", \"arrange\", \"arrest\", \"arrive\", \"arrow\", \"art\", \"artefact\", \"artist\", \"artwork\", \"ask\", \"aspect\", \"assault\", \"asset\", \"assist\", \"assume\", \"asthma\", \"athlete\", \"atom\", \"attack\", \"attend\", \"attitude\", \"attract\", \"auction\", \"audit\", \"august\", \"aunt\", \"author\", \"auto\", \"autumn\", \"average\", \"avocado\", \"avoid\", \"awake\", \"aware\", \"away\", \"awesome\", \"awful\", \"awkward\", \"axis\", \"baby\", \"bachelor\", \"bacon\", \"badge\", \"bag\", \"balance\", \"balcony\", \"ball\", \"bamboo\", \"banana\", \"banner\", \"bar\", \"barely\", \"bargain\", \"barrel\", \"base\", \"basic\", \"basket\", \"battle\", \"beach\", \"bean\", \"beauty\", \"because\", \"become\", \"beef\", \"before\", \"begin\", \"behave\", \"behind\", \"believe\", \"below\", \"belt\", \"bench\", \"benefit\", \"best\", \"betray\", \"better\", \"between\", \"beyond\", \"bicycle\", \"bid\", \"bike\", \"bind\", \"biology\", \"bird\", \"birth\", \"bitter\", \"black\", \"blade\", \"blame\", \"blanket\", \"blast\", \"bleak\", \"bless\", \"blind\", \"blood\", \"blossom\", \"blouse\", \"blue\", \"blur\", \"blush\", \"board\", \"boat\", \"body\", \"boil\", \"bomb\", \"bone\", \"bonus\", \"book\", \"boost\", \"border\", \"boring\", \"borrow\", \"boss\", \"bottom\", \"bounce\", \"box\", \"boy\", \"bracket\", \"brain\", \"brand\", \"brass\", \"brave\", \"bread\", \"breeze\", \"brick\", \"bridge\", \"brief\", \"bright\", \"bring\", \"brisk\", \"broccoli\", \"broken\", \"bronze\", \"broom\", \"brother\", \"brown\", \"brush\", \"bubble\", \"buddy\", \"budget\", \"buffalo\", \"build\", \"bulb\", \"bulk\", \"bullet\", \"bundle\", \"bunker\", \"burden\", \"burger\", \"burst\", \"bus\", \"business\", \"busy\", \"butter\", \"buyer\", \"buzz\", \"cabbage\", \"cabin\", \"cable\", \"cactus\", \"cage\", \"cake\", \"call\", \"calm\", \"camera\", \"camp\", \"can\", \"canal\", \"cancel\", \"candy\", \"cannon\", \"canoe\", \"canvas\", \"canyon\", \"capable\", \"capital\", \"captain\", \"car\", \"carbon\", \"card\", \"cargo\", \"carpet\", \"carry\", \"cart\", \"case\", \"cash\", \"casino\", \"castle\", \"casual\", \"cat\", \"catalog\", \"catch\", \"category\", \"cattle\", \"caught\", \"cause\", \"caution\", \"cave\", \"ceiling\", \"celery\", \"cement\", \"census\", \"century\", \"cereal\", \"certain\", \"chair\", \"chalk\", \"champion\", \"change\", \"chaos\", \"chapter\", \"charge\", \"chase\", \"chat\", \"cheap\", \"check\", \"cheese\", \"chef\", \"cherry\", \"chest\", \"chicken\", \"chief\", \"child\", \"chimney\", \"choice\", \"choose\", \"chronic\", \"chuckle\", \"chunk\", \"churn\", \"cigar\", \"cinnamon\", \"circle\", \"citizen\", \"city\", \"civil\", \"claim\", \"clap\", \"clarify\", \"claw\", \"clay\", \"clean\", \"clerk\", \"clever\", \"click\", \"client\", \"cliff\", \"climb\", \"clinic\", \"clip\", \"clock\", \"clog\", \"close\", \"cloth\", \"cloud\", \"clown\", \"club\", \"clump\", \"cluster\", \"clutch\", \"coach\", \"coast\", \"coconut\", \"code\", \"coffee\", \"coil\", \"coin\", \"collect\", \"color\", \"column\", \"combine\", \"come\", \"comfort\", \"comic\", \"common\", \"company\", \"concert\", \"conduct\", \"confirm\", \"congress\", \"connect\", \"consider\", \"control\", \"convince\", \"cook\", \"cool\", \"copper\", \"copy\", \"coral\", \"core\", \"corn\", \"correct\", \"cost\", \"cotton\", \"couch\", \"country\", \"couple\", \"course\", \"cousin\", \"cover\", \"coyote\", \"crack\", \"cradle\", \"craft\", \"cram\", \"crane\", \"crash\", \"crater\", \"crawl\", \"crazy\", \"cream\", \"credit\", \"creek\", \"crew\", \"cricket\", \"crime\", \"crisp\", \"critic\", \"crop\", \"cross\", \"crouch\", \"crowd\", \"crucial\", \"cruel\", \"cruise\", \"crumble\", \"crunch\", \"crush\", \"cry\", \"crystal\", \"cube\", \"culture\", \"cup\", \"cupboard\", \"curious\", \"current\", \"curtain\", \"curve\", \"cushion\", \"custom\", \"cute\", \"cycle\", \"dad\", \"damage\", \"damp\", \"dance\", \"danger\", \"daring\", \"dash\", \"daughter\", \"dawn\", \"day\", \"deal\", \"debate\", \"debris\", \"decade\", \"december\", \"decide\", \"decline\", \"decorate\", \"decrease\", \"deer\", \"defense\", \"define\", \"defy\", \"degree\", \"delay\", \"deliver\", \"demand\", \"demise\", \"denial\", \"dentist\", \"deny\", \"depart\", \"depend\", \"deposit\", \"depth\", \"deputy\", \"derive\", \"describe\", \"desert\", \"design\", \"desk\", \"despair\", \"destroy\", \"detail\", \"detect\", \"develop\", \"device\", \"devote\", \"diagram\", \"dial\", \"diamond\", \"diary\", \"dice\", \"diesel\", \"diet\", \"differ\", \"digital\", \"dignity\", \"dilemma\", \"dinner\", \"dinosaur\", \"direct\", \"dirt\", \"disagree\", \"discover\", \"disease\", \"dish\", \"dismiss\", \"disorder\", \"display\", \"distance\", \"divert\", \"divide\", \"divorce\", \"dizzy\", \"doctor\", \"document\", \"dog\", \"doll\", \"dolphin\", \"domain\", \"donate\", \"donkey\", \"donor\", \"door\", \"dose\", \"double\", \"dove\", \"draft\", \"dragon\", \"drama\", \"drastic\", \"draw\", \"dream\", \"dress\", \"drift\", \"drill\", \"drink\", \"drip\", \"drive\", \"drop\", \"drum\", \"dry\", \"duck\", \"dumb\", \"dune\", \"during\", \"dust\", \"dutch\", \"duty\", \"dwarf\", \"dynamic\", \"eager\", \"eagle\", \"early\", \"earn\", \"earth\", \"easily\", \"east\", \"easy\", \"echo\", \"ecology\", \"economy\", \"edge\", \"edit\", \"educate\", \"effort\", \"egg\", \"eight\", \"either\", \"elbow\", \"elder\", \"electric\", \"elegant\", \"element\", \"elephant\", \"elevator\", \"elite\", \"else\", \"embark\", \"embody\", \"embrace\", \"emerge\", \"emotion\", \"employ\", \"empower\", \"empty\", \"enable\", \"enact\", \"end\", \"endless\", \"endorse\", \"enemy\", \"energy\", \"enforce\", \"engage\", \"engine\", \"enhance\", \"enjoy\", \"enlist\", \"enough\", \"enrich\", \"enroll\", \"ensure\", \"enter\", \"entire\", \"entry\", \"envelope\", \"episode\", \"equal\", \"equip\", \"era\", \"erase\", \"erode\", \"erosion\", \"error\", \"erupt\", \"escape\", \"essay\", \"essence\", \"estate\", \"eternal\", \"ethics\", \"evidence\", \"evil\", \"evoke\", \"evolve\", \"exact\", \"example\", \"excess\", \"exchange\", \"excite\", \"exclude\", \"excuse\", \"execute\", \"exercise\", \"exhaust\", \"exhibit\", \"exile\", \"exist\", \"exit\", \"exotic\", \"expand\", \"expect\", \"expire\", \"explain\", \"expose\", \"express\", \"extend\", \"extra\", \"eye\", \"eyebrow\", \"fabric\", \"face\", \"faculty\", \"fade\", \"faint\", \"faith\", \"fall\", \"false\", \"fame\", \"family\", \"famous\", \"fan\", \"fancy\", \"fantasy\", \"farm\", \"fashion\", \"fat\", \"fatal\", \"father\", \"fatigue\", \"fault\", \"favorite\", \"feature\", \"february\", \"federal\", \"fee\", \"feed\", \"feel\", \"female\", \"fence\", \"festival\", \"fetch\", \"fever\", \"few\", \"fiber\", \"fiction\", \"field\", \"figure\", \"file\", \"film\", \"filter\", \"final\", \"find\", \"fine\", \"finger\", \"finish\", \"fire\", \"firm\", \"first\", \"fiscal\", \"fish\", \"fit\", \"fitness\", \"fix\", \"flag\", \"flame\", \"flash\", \"flat\", \"flavor\", \"flee\", \"flight\", \"flip\", \"float\", \"flock\", \"floor\", \"flower\", \"fluid\", \"flush\", \"fly\", \"foam\", \"focus\", \"fog\", \"foil\", \"fold\", \"follow\", \"food\", \"foot\", \"force\", \"forest\", \"forget\", \"fork\", \"fortune\", \"forum\", \"forward\", \"fossil\", \"foster\", \"found\", \"fox\", \"fragile\", \"frame\", \"frequent\", \"fresh\", \"friend\", \"fringe\", \"frog\", \"front\", \"frost\", \"frown\", \"frozen\", \"fruit\", \"fuel\", \"fun\", \"funny\", \"furnace\", \"fury\", \"future\", \"gadget\", \"gain\", \"galaxy\", \"gallery\", \"game\", \"gap\", \"garage\", \"garbage\", \"garden\", \"garlic\", \"garment\", \"gas\", \"gasp\", \"gate\", \"gather\", \"gauge\", \"gaze\", \"general\", \"genius\", \"genre\", \"gentle\", \"genuine\", \"gesture\", \"ghost\", \"giant\", \"gift\", \"giggle\", \"ginger\", \"giraffe\", \"girl\", \"give\", \"glad\", \"glance\", \"glare\", \"glass\", \"glide\", \"glimpse\", \"globe\", \"gloom\", \"glory\", \"glove\", \"glow\", \"glue\", \"goat\", \"goddess\", \"gold\", \"good\", \"goose\", \"gorilla\", \"gospel\", \"gossip\", \"govern\", \"gown\", \"grab\", \"grace\", \"grain\", \"grant\", \"grape\", \"grass\", \"gravity\", \"great\", \"green\", \"grid\", \"grief\", \"grit\", \"grocery\", \"group\", \"grow\", \"grunt\", \"guard\", \"guess\", \"guide\", \"guilt\", \"guitar\", \"gun\", \"gym\", \"habit\", \"hair\", \"half\", \"hammer\", \"hamster\", \"hand\", \"happy\", \"harbor\", \"hard\", \"harsh\", \"harvest\", \"hat\", \"have\", \"hawk\", \"hazard\", \"head\", \"health\", \"heart\", \"heavy\", \"hedgehog\", \"height\", \"hello\", \"helmet\", \"help\", \"hen\", \"hero\", \"hidden\", \"high\", \"hill\", \"hint\", \"hip\", \"hire\", \"history\", \"hobby\", \"hockey\", \"hold\", \"hole\", \"holiday\", \"hollow\", \"home\", \"honey\", \"hood\", \"hope\", \"horn\", \"horror\", \"horse\", \"hospital\", \"host\", \"hotel\", \"hour\", \"hover\", \"hub\", \"huge\", \"human\", \"humble\", \"humor\", \"hundred\", \"hungry\", \"hunt\", \"hurdle\", \"hurry\", \"hurt\", \"husband\", \"hybrid\", \"ice\", \"icon\", \"idea\", \"identify\", \"idle\", \"ignore\", \"ill\", \"illegal\", \"illness\", \"image\", \"imitate\", \"immense\", \"immune\", \"impact\", \"impose\", \"improve\", \"impulse\", \"inch\", \"include\", \"income\", \"increase\", \"index\", \"indicate\", \"indoor\", \"industry\", \"infant\", \"inflict\", \"inform\", \"inhale\", \"inherit\", \"initial\", \"inject\", \"injury\", \"inmate\", \"inner\", \"innocent\", \"input\", \"inquiry\", \"insane\", \"insect\", \"inside\", \"inspire\", \"install\", \"intact\", \"interest\", \"into\", \"invest\", \"invite\", \"involve\", \"iron\", \"island\", \"isolate\", \"issue\", \"item\", \"ivory\", \"jacket\", \"jaguar\", \"jar\", \"jazz\", \"jealous\", \"jeans\", \"jelly\", \"jewel\", \"job\", \"join\", \"joke\", \"journey\", \"joy\", \"judge\", \"juice\", \"jump\", \"jungle\", \"junior\", \"junk\", \"just\", \"kangaroo\", \"keen\", \"keep\", \"ketchup\", \"key\", \"kick\", \"kid\", \"kidney\", \"kind\", \"kingdom\", \"kiss\", \"kit\", \"kitchen\", \"kite\", \"kitten\", \"kiwi\", \"knee\", \"knife\", \"knock\", \"know\", \"lab\", \"label\", \"labor\", \"ladder\", \"lady\", \"lake\", \"lamp\", \"language\", \"laptop\", \"large\", \"later\", \"latin\", \"laugh\", \"laundry\", \"lava\", \"law\", \"lawn\", \"lawsuit\", \"layer\", \"lazy\", \"leader\", \"leaf\", \"learn\", \"leave\", \"lecture\", \"left\", \"leg\", \"legal\", \"legend\", \"leisure\", \"lemon\", \"lend\", \"length\", \"lens\", \"leopard\", \"lesson\", \"letter\", \"level\", \"liar\", \"liberty\", \"library\", \"license\", \"life\", \"lift\", \"light\", \"like\", \"limb\", \"limit\", \"link\", \"lion\", \"liquid\", \"list\", \"little\", \"live\", \"lizard\", \"load\", \"loan\", \"lobster\", \"local\", \"lock\", \"logic\", \"lonely\", \"long\", \"loop\", \"lottery\", \"loud\", \"lounge\", \"love\", \"loyal\", \"lucky\", \"luggage\", \"lumber\", \"lunar\", \"lunch\", \"luxury\", \"lyrics\", \"machine\", \"mad\", \"magic\", \"magnet\", \"maid\", \"mail\", \"main\", \"major\", \"make\", \"mammal\", \"man\", \"manage\", \"mandate\", \"mango\", \"mansion\", \"manual\", \"maple\", \"marble\", \"march\", \"margin\", \"marine\", \"market\", \"marriage\", \"mask\", \"mass\", \"master\", \"match\", \"material\", \"math\", \"matrix\", \"matter\", \"maximum\", \"maze\", \"meadow\", \"mean\", \"measure\", \"meat\", \"mechanic\", \"medal\", \"media\", \"melody\", \"melt\", \"member\", \"memory\", \"mention\", \"menu\", \"mercy\", \"merge\", \"merit\", \"merry\", \"mesh\", \"message\", \"metal\", \"method\", \"middle\", \"midnight\", \"milk\", \"million\", \"mimic\", \"mind\", \"minimum\", \"minor\", \"minute\", \"miracle\", \"mirror\", \"misery\", \"miss\", \"mistake\", \"mix\", \"mixed\", \"mixture\", \"mobile\", \"model\", \"modify\", \"mom\", \"moment\", \"monitor\", \"monkey\", \"monster\", \"month\", \"moon\", \"moral\", \"more\", \"morning\", \"mosquito\", \"mother\", \"motion\", \"motor\", \"mountain\", \"mouse\", \"move\", \"movie\", \"much\", \"muffin\", \"mule\", \"multiply\", \"muscle\", \"museum\", \"mushroom\", \"music\", \"must\", \"mutual\", \"myself\", \"mystery\", \"myth\", \"naive\", \"name\", \"napkin\", \"narrow\", \"nasty\", \"nation\", \"nature\", \"near\", \"neck\", \"need\", \"negative\", \"neglect\", \"neither\", \"nephew\", \"nerve\", \"nest\", \"net\", \"network\", \"neutral\", \"never\", \"news\", \"next\", \"nice\", \"night\", \"noble\", \"noise\", \"nominee\", \"noodle\", \"normal\", \"north\", \"nose\", \"notable\", \"note\", \"nothing\", \"notice\", \"novel\", \"now\", \"nuclear\", \"number\", \"nurse\", \"nut\", \"oak\", \"obey\", \"object\", \"oblige\", \"obscure\", \"observe\", \"obtain\", \"obvious\", \"occur\", \"ocean\", \"october\", \"odor\", \"off\", \"offer\", \"office\", \"often\", \"oil\", \"okay\", \"old\", \"olive\", \"olympic\", \"omit\", \"once\", \"one\", \"onion\", \"online\", \"only\", \"open\", \"opera\", \"opinion\", \"oppose\", \"option\", \"orange\", \"orbit\", \"orchard\", \"order\", \"ordinary\", \"organ\", \"orient\", \"original\", \"orphan\", \"ostrich\", \"other\", \"outdoor\", \"outer\", \"output\", \"outside\", \"oval\", \"oven\", \"over\", \"own\", \"owner\", \"oxygen\", \"oyster\", \"ozone\", \"pact\", \"paddle\", \"page\", \"pair\", \"palace\", \"palm\", \"panda\", \"panel\", \"panic\", \"panther\", \"paper\", \"parade\", \"parent\", \"park\", \"parrot\", \"party\", \"pass\", \"patch\", \"path\", \"patient\", \"patrol\", \"pattern\", \"pause\", \"pave\", \"payment\", \"peace\", \"peanut\", \"pear\", \"peasant\", \"pelican\", \"pen\", \"penalty\", \"pencil\", \"people\", \"pepper\", \"perfect\", \"permit\", \"person\", \"pet\", \"phone\", \"photo\", \"phrase\", \"physical\", \"piano\", \"picnic\", \"picture\", \"piece\", \"pig\", \"pigeon\", \"pill\", \"pilot\", \"pink\", \"pioneer\", \"pipe\", \"pistol\", \"pitch\", \"pizza\", \"place\", \"planet\", \"plastic\", \"plate\", \"play\", \"please\", \"pledge\", \"pluck\", \"plug\", \"plunge\", \"poem\", \"poet\", \"point\", \"polar\", \"pole\", \"police\", \"pond\", \"pony\", \"pool\", \"popular\", \"portion\", \"position\", \"possible\", \"post\", \"potato\", \"pottery\", \"poverty\", \"powder\", \"power\", \"practice\", \"praise\", \"predict\", \"prefer\", \"prepare\", \"present\", \"pretty\", \"prevent\", \"price\", \"pride\", \"primary\", \"print\", \"priority\", \"prison\", \"private\", \"prize\", \"problem\", \"process\", \"produce\", \"profit\", \"program\", \"project\", \"promote\", \"proof\", \"property\", \"prosper\", \"protect\", \"proud\", \"provide\", \"public\", \"pudding\", \"pull\", \"pulp\", \"pulse\", \"pumpkin\", \"punch\", \"pupil\", \"puppy\", \"purchase\", \"purity\", \"purpose\", \"purse\", \"push\", \"put\", \"puzzle\", \"pyramid\", \"quality\", \"quantum\", \"quarter\", \"question\", \"quick\", \"quit\", \"quiz\", \"quote\", \"rabbit\", \"raccoon\", \"race\", \"rack\", \"radar\", \"radio\", \"rail\", \"rain\", \"raise\", \"rally\", \"ramp\", \"ranch\", \"random\", \"range\", \"rapid\", \"rare\", \"rate\", \"rather\", \"raven\", \"raw\", \"razor\", \"ready\", \"real\", \"reason\", \"rebel\", \"rebuild\", \"recall\", \"receive\", \"recipe\", \"record\", \"recycle\", \"reduce\", \"reflect\", \"reform\", \"refuse\", \"region\", \"regret\", \"regular\", \"reject\", \"relax\", \"release\", \"relief\", \"rely\", \"remain\", \"remember\", \"remind\", \"remove\", \"render\", \"renew\", \"rent\", \"reopen\", \"repair\", \"repeat\", \"replace\", \"report\", \"require\", \"rescue\", \"resemble\", \"resist\", \"resource\", \"response\", \"result\", \"retire\", \"retreat\", \"return\", \"reunion\", \"reveal\", \"review\", \"reward\", \"rhythm\", \"rib\", \"ribbon\", \"rice\", \"rich\", \"ride\", \"ridge\", \"rifle\", \"right\", \"rigid\", \"ring\", \"riot\", \"ripple\", \"risk\", \"ritual\", \"rival\", \"river\", \"road\", \"roast\", \"robot\", \"robust\", \"rocket\", \"romance\", \"roof\", \"rookie\", \"room\", \"rose\", \"rotate\", \"rough\", \"round\", \"route\", \"royal\", \"rubber\", \"rude\", \"rug\", \"rule\", \"run\", \"runway\", \"rural\", \"sad\", \"saddle\", \"sadness\", \"safe\", \"sail\", \"salad\", \"salmon\", \"salon\", \"salt\", \"salute\", \"same\", \"sample\", \"sand\", \"satisfy\", \"satoshi\", \"sauce\", \"sausage\", \"save\", \"say\", \"scale\", \"scan\", \"scare\", \"scatter\", \"scene\", \"scheme\", \"school\", \"science\", \"scissors\", \"scorpion\", \"scout\", \"scrap\", \"screen\", \"script\", \"scrub\", \"sea\", \"search\", \"season\", \"seat\", \"second\", \"secret\", \"section\", \"security\", \"seed\", \"seek\", \"segment\", \"select\", \"sell\", \"seminar\", \"senior\", \"sense\", \"sentence\", \"series\", \"service\", \"session\", \"settle\", \"setup\", \"seven\", \"shadow\", \"shaft\", \"shallow\", \"share\", \"shed\", \"shell\", \"sheriff\", \"shield\", \"shift\", \"shine\", \"ship\", \"shiver\", \"shock\", \"shoe\", \"shoot\", \"shop\", \"short\", \"shoulder\", \"shove\", \"shrimp\", \"shrug\", \"shuffle\", \"shy\", \"sibling\", \"sick\", \"side\", \"siege\", \"sight\", \"sign\", \"silent\", \"silk\", \"silly\", \"silver\", \"similar\", \"simple\", \"since\", \"sing\", \"siren\", \"sister\", \"situate\", \"six\", \"size\", \"skate\", \"sketch\", \"ski\", \"skill\", \"skin\", \"skirt\", \"skull\", \"slab\", \"slam\", \"sleep\", \"slender\", \"slice\", \"slide\", \"slight\", \"slim\", \"slogan\", \"slot\", \"slow\", \"slush\", \"small\", \"smart\", \"smile\", \"smoke\", \"smooth\", \"snack\", \"snake\", \"snap\", \"sniff\", \"snow\", \"soap\", \"soccer\", \"social\", \"sock\", \"soda\", \"soft\", \"solar\", \"soldier\", \"solid\", \"solution\", \"solve\", \"someone\", \"song\", \"soon\", \"sorry\", \"sort\", \"soul\", \"sound\", \"soup\", \"source\", \"south\", \"space\", \"spare\", \"spatial\", \"spawn\", \"speak\", \"special\", \"speed\", \"spell\", \"spend\", \"sphere\", \"spice\", \"spider\", \"spike\", \"spin\", \"spirit\", \"split\", \"spoil\", \"sponsor\", \"spoon\", \"sport\", \"spot\", \"spray\", \"spread\", \"spring\", \"spy\", \"square\", \"squeeze\", \"squirrel\", \"stable\", \"stadium\", \"staff\", \"stage\", \"stairs\", \"stamp\", \"stand\", \"start\", \"state\", \"stay\", \"steak\", \"steel\", \"stem\", \"step\", \"stereo\", \"stick\", \"still\", \"sting\", \"stock\", \"stomach\", \"stone\", \"stool\", \"story\", \"stove\", \"strategy\", \"street\", \"strike\", \"strong\", \"struggle\", \"student\", \"stuff\", \"stumble\", \"style\", \"subject\", \"submit\", \"subway\", \"success\", \"such\", \"sudden\", \"suffer\", \"sugar\", \"suggest\", \"suit\", \"summer\", \"sun\", \"sunny\", \"sunset\", \"super\", \"supply\", \"supreme\", \"sure\", \"surface\", \"surge\", \"surprise\", \"surround\", \"survey\", \"suspect\", \"sustain\", \"swallow\", \"swamp\", \"swap\", \"swarm\", \"swear\", \"sweet\", \"swift\", \"swim\", \"swing\", \"switch\", \"sword\", \"symbol\", \"symptom\", \"syrup\", \"system\", \"table\", \"tackle\", \"tag\", \"tail\", \"talent\", \"talk\", \"tank\", \"tape\", \"target\", \"task\", \"taste\", \"tattoo\", \"taxi\", \"teach\", \"team\", \"tell\", \"ten\", \"tenant\", \"tennis\", \"tent\", \"term\", \"test\", \"text\", \"thank\", \"that\", \"theme\", \"then\", \"theory\", \"there\", \"they\", \"thing\", \"this\", \"thought\", \"three\", \"thrive\", \"throw\", \"thumb\", \"thunder\", \"ticket\", \"tide\", \"tiger\", \"tilt\", \"timber\", \"time\", \"tiny\", \"tip\", \"tired\", \"tissue\", \"title\", \"toast\", \"tobacco\", \"today\", \"toddler\", \"toe\", \"together\", \"toilet\", \"token\", \"tomato\", \"tomorrow\", \"tone\", \"tongue\", \"tonight\", \"tool\", \"tooth\", \"top\", \"topic\", \"topple\", \"torch\", \"tornado\", \"tortoise\", \"toss\", \"total\", \"tourist\", \"toward\", \"tower\", \"town\", \"toy\", \"track\", \"trade\", \"traffic\", \"tragic\", \"train\", \"transfer\", \"trap\", \"trash\", \"travel\", \"tray\", \"treat\", \"tree\", \"trend\", \"trial\", \"tribe\", \"trick\", \"trigger\", \"trim\", \"trip\", \"trophy\", \"trouble\", \"truck\", \"true\", \"truly\", \"trumpet\", \"trust\", \"truth\", \"try\", \"tube\", \"tuition\", \"tumble\", \"tuna\", \"tunnel\", \"turkey\", \"turn\", \"turtle\", \"twelve\", \"twenty\", \"twice\", \"twin\", \"twist\", \"two\", \"type\", \"typical\", \"ugly\", \"umbrella\", \"unable\", \"unaware\", \"uncle\", \"uncover\", \"under\", \"undo\", \"unfair\", \"unfold\", \"unhappy\", \"uniform\", \"unique\", \"unit\", \"universe\", \"unknown\", \"unlock\", \"until\", \"unusual\", \"unveil\", \"update\", \"upgrade\", \"uphold\", \"upon\", \"upper\", \"upset\", \"urban\", \"urge\", \"usage\", \"use\", \"used\", \"useful\", \"useless\", \"usual\", \"utility\", \"vacant\", \"vacuum\", \"vague\", \"valid\", \"valley\", \"valve\", \"van\", \"vanish\", \"vapor\", \"various\", \"vast\", \"vault\", \"vehicle\", \"velvet\", \"vendor\", \"venture\", \"venue\", \"verb\", \"verify\", \"version\", \"very\", \"vessel\", \"veteran\", \"viable\", \"vibrant\", \"vicious\", \"victory\", \"video\", \"view\", \"village\", \"vintage\", \"violin\", \"virtual\", \"virus\", \"visa\", \"visit\", \"visual\", \"vital\", \"vivid\", \"vocal\", \"voice\", \"void\", \"volcano\", \"volume\", \"vote\", \"voyage\", \"wage\", \"wagon\", \"wait\", \"walk\", \"wall\", \"walnut\", \"want\", \"warfare\", \"warm\", \"warrior\", \"wash\", \"wasp\", \"waste\", \"water\", \"wave\", \"way\", \"wealth\", \"weapon\", \"wear\", \"weasel\", \"weather\", \"web\", \"wedding\", \"weekend\", \"weird\", \"welcome\", \"west\", \"wet\", \"whale\", \"what\", \"wheat\", \"wheel\", \"when\", \"where\", \"whip\", \"whisper\", \"wide\", \"width\", \"wife\", \"wild\", \"will\", \"win\", \"window\", \"wine\", \"wing\", \"wink\", \"winner\", \"winter\", \"wire\", \"wisdom\", \"wise\", \"wish\", \"witness\", \"wolf\", \"woman\", \"wonder\", \"wood\", \"wool\", \"word\", \"work\", \"world\", \"worry\", \"worth\", \"wrap\", \"wreck\", \"wrestle\", \"wrist\", \"write\", \"wrong\", \"yard\", \"year\", \"yellow\", \"you\", \"young\", \"youth\", \"zebra\", \"zero\", \"zone\", \"zoo\"];\n\nexport { english };\n", "import { sha256 } from 'ethereum-cryptography/sha256';\nimport ShareSerializationError from './errors.js';\n\nfunction normalize(str) {\n  return (str || \"\").normalize(\"NFKD\");\n}\nfunction binaryToByte(bin) {\n  return parseInt(bin, 2);\n}\nfunction lpad(str, padString, length) {\n  let string = str;\n  while (string.length < length) {\n    string = padString + string;\n  }\n  return string;\n}\nfunction bytesToBinary(bytes) {\n  return bytes.map(x => lpad(x.toString(2), \"0\", 8)).join(\"\");\n}\nfunction deriveChecksumBits(entropyBuffer) {\n  const ENT = entropyBuffer.length * 8;\n  const CS = ENT / 32;\n  const hash = sha256(entropyBuffer);\n  return bytesToBinary(Array.from(hash)).slice(0, CS);\n}\nfunction entropyToMnemonic(entropy, english) {\n  let newEntropy;\n  if (!Buffer.isBuffer(entropy)) {\n    newEntropy = Buffer.from(entropy, \"hex\");\n  }\n\n  // 128 <= ENT <= 256\n  if (newEntropy.length < 16) {\n    throw ShareSerializationError.invalidEntropy();\n  }\n  if (newEntropy.length > 32) {\n    throw ShareSerializationError.invalidEntropy();\n  }\n  if (newEntropy.length % 4 !== 0) {\n    throw ShareSerializationError.invalidEntropy();\n  }\n  const entropyBits = bytesToBinary(Array.from(newEntropy));\n  const checksumBits = deriveChecksumBits(newEntropy);\n  const bits = entropyBits + checksumBits;\n  const chunks = bits.match(/(.{1,11})/g);\n  const words = chunks.map(binary => {\n    const index = binaryToByte(binary);\n    return english[index];\n  });\n  return english[0] === \"\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093\" // Japanese wordlist\n  ? words.join(\"\\u3000\") : words.join(\" \");\n}\nfunction mnemonicToEntropy(mnemonic, english) {\n  const words = normalize(mnemonic).split(\" \");\n  if (words.length % 3 !== 0) {\n    throw ShareSerializationError.invalidMnemonic();\n  }\n\n  // convert word indices to 11 bit binary strings\n  const bits = words.map(word => {\n    const index = english.indexOf(word);\n    if (index === -1) {\n      throw ShareSerializationError.invalidMnemonic();\n    }\n    return lpad(index.toString(2), \"0\", 11);\n  }).join(\"\");\n\n  // split the binary string into ENT/CS\n  const dividerIndex = Math.floor(bits.length / 33) * 32;\n  const entropyBits = bits.slice(0, dividerIndex);\n  const checksumBits = bits.slice(dividerIndex);\n\n  // calculate the checksum and compare\n  const entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);\n  if (entropyBytes.length < 16) {\n    throw ShareSerializationError.invalidEntropy();\n  }\n  if (entropyBytes.length > 32) {\n    throw ShareSerializationError.invalidEntropy();\n  }\n  if (entropyBytes.length % 4 !== 0) {\n    throw ShareSerializationError.invalidEntropy();\n  }\n  const entropy = Buffer.from(entropyBytes);\n  const newChecksum = deriveChecksumBits(entropy);\n  if (newChecksum !== checksumBits) {\n    throw ShareSerializationError.invalidChecksum();\n  }\n  return entropy.toString(\"hex\");\n}\n\nexport { binaryToByte, bytesToBinary, deriveChecksumBits, entropyToMnemonic, lpad, mnemonicToEntropy, normalize };\n", "import { ShareSerializationModule } from '@tkey/share-serialization';\nimport BN from 'bn.js';\n\n/**\n * Converts a mnemonic to a BN.\n * @param shareMnemonic - The mnemonic to convert.\n * @returns A BN respective to your mnemonic\n */\nfunction mnemonicToKey(shareMnemonic) {\n  const factorKey = ShareSerializationModule.deserializeMnemonic(shareMnemonic);\n  return factorKey.toString(\"hex\");\n}\n\n/**\n * Converts a BN to a mnemonic.\n * @param shareBN - The BN to convert.\n * @returns A mnemonic respective to your BN\n */\nfunction keyToMnemonic(shareHex) {\n  const shareBN = new BN(shareHex, \"hex\");\n  const mnemonic = ShareSerializationModule.serializeMnemonic(shareBN);\n  return mnemonic;\n}\n\nexport { keyToMnemonic, mnemonicToKey };\n", "import _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { secp256k1, Point } from '@tkey/common-types';\nimport { getPubKeyPoint, factorKeyCurve } from '@tkey/tss';\nimport { keccak256 } from '@toruslabs/torus.js';\nimport BN from 'bn.js';\nimport { TssShareType, VALID_SHARE_INDICES, FactorKeyTypeShareDescription } from '../constants.js';\n\nclass TssSecurityQuestionStore {\n  constructor(shareIndex, factorPublicKey, question) {\n    _defineProperty(this, \"shareIndex\", void 0);\n    _defineProperty(this, \"factorPublicKey\", void 0);\n    _defineProperty(this, \"question\", void 0);\n    this.shareIndex = shareIndex;\n    this.factorPublicKey = factorPublicKey;\n    this.question = question;\n  }\n  static fromJSON(json) {\n    const {\n      shareIndex,\n      factorPublicKey,\n      question\n    } = json;\n    return new TssSecurityQuestionStore(shareIndex, factorPublicKey, question);\n  }\n  toJSON() {\n    return {\n      shareIndex: this.shareIndex,\n      factorPublicKey: this.factorPublicKey,\n      question: this.question\n    };\n  }\n}\nclass TssSecurityQuestion {\n  constructor() {\n    _defineProperty(this, \"storeDomainName\", \"tssSecurityQuestion\");\n  }\n  async setSecurityQuestion(params) {\n    const {\n      mpcCoreKit,\n      question,\n      answer,\n      description\n    } = params;\n    let {\n      shareType\n    } = params;\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    if (!question || !answer) {\n      throw new Error(\"question and answer are required\");\n    }\n    const domainKey = `${this.storeDomainName}:${params.mpcCoreKit.tKey.tssTag}`;\n\n    // default using recovery index\n    if (!shareType) {\n      shareType = TssShareType.RECOVERY;\n    } else if (!VALID_SHARE_INDICES.includes(shareType)) {\n      throw new Error(`invalid share type: must be one of ${VALID_SHARE_INDICES}`);\n    }\n    // Check for existing security question\n    const tkey = mpcCoreKit.tKey;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey);\n    if (storeDomain && storeDomain.question) {\n      throw new Error(\"Security question already exists\");\n    }\n\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = tkey.getKeyDetails().pubKey.toSEC1(secp256k1, true).toString(\"hex\") + tkey.tssTag;\n    let hash = keccak256(Buffer.from(answer + pubKey, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n    const descriptionFinal = _objectSpread({\n      question\n    }, description);\n    await mpcCoreKit.createFactor({\n      factorKey: factorKeyBN,\n      shareType,\n      shareDescription: FactorKeyTypeShareDescription.SecurityQuestions,\n      additionalMetadata: descriptionFinal\n    });\n    // set store domain\n    const tkeyPt = getPubKeyPoint(factorKeyBN, factorKeyCurve);\n    const factorPub = tkeyPt.toSEC1(factorKeyCurve, true).toString(\"hex\");\n    const storeData = new TssSecurityQuestionStore(shareType.toString(), factorPub, question);\n    tkey.metadata.setGeneralStoreDomain(domainKey, storeData.toJSON());\n\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n    return factorKeyBN.toString(\"hex\").padStart(64, \"0\");\n  }\n  async changeSecurityQuestion(params) {\n    const {\n      mpcCoreKit,\n      newQuestion,\n      newAnswer,\n      answer\n    } = params;\n    if (!newQuestion || !newAnswer || !answer) {\n      throw new Error(\"question and answer are required\");\n    }\n    // Check for existing security question\n    const tkey = mpcCoreKit.tKey;\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = tkey.getKeyDetails().pubKey.toSEC1(secp256k1, true).toString(\"hex\") + tkey.tssTag;\n    const domainKey = `${this.storeDomainName}:${params.mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey);\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n    const preHash = answer + pubKey;\n    let hash = keccak256(Buffer.from(preHash, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n    const factorKeyPt = getPubKeyPoint(factorKeyBN, factorKeyCurve);\n    if (factorKeyPt.toSEC1(factorKeyCurve, true).toString(\"hex\") !== store.factorPublicKey) {\n      throw new Error(\"Invalid answer\");\n    }\n\n    // create new factor key\n    const prenewHash = newAnswer + pubKey;\n    let newHash = keccak256(Buffer.from(prenewHash, \"utf8\"));\n    newHash = newHash.startsWith(\"0x\") ? newHash.slice(2) : newHash;\n    const newAnswerBN = new BN(newHash, \"hex\");\n    const newFactorPt = Point.fromScalar(newAnswerBN, factorKeyCurve);\n    await mpcCoreKit.createFactor({\n      factorKey: newAnswerBN,\n      shareType: parseInt(store.shareIndex),\n      shareDescription: FactorKeyTypeShareDescription.SecurityQuestions\n    });\n\n    // update mpcCoreKit state to use new factor key during change password if mpc factor key is security question factor\n    if (mpcCoreKit.state.factorKey.eq(factorKeyBN)) {\n      await mpcCoreKit.inputFactorKey(newAnswerBN);\n    }\n    // delete after create factor to prevent last key issue\n    // delete old factor key and device share\n    await mpcCoreKit.deleteFactor(factorKeyPt, factorKeyBN);\n    store.factorPublicKey = newFactorPt.toSEC1(factorKeyCurve, true).toString(\"hex\");\n    store.question = newQuestion;\n    tkey.metadata.setGeneralStoreDomain(domainKey, store.toJSON());\n\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n  }\n\n  // Should we check with answer before deleting?\n  async deleteSecurityQuestion(mpcCoreKit, deleteFactorKey = true) {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const tkey = mpcCoreKit.tKey;\n    if (deleteFactorKey) {\n      const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey);\n      if (!storeDomain || !storeDomain.question) {\n        throw new Error(\"Security question does not exists\");\n      }\n      const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n      if (store.factorPublicKey) {\n        await mpcCoreKit.deleteFactor(Point.fromSEC1(factorKeyCurve, store.factorPublicKey));\n      }\n    }\n    tkey.metadata.deleteGeneralStoreDomain(domainKey);\n    // check for auto commit\n    if (!tkey.manualSync) await tkey._syncShareMetadata();\n  }\n  async recoverFactor(mpcCoreKit, answer) {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    if (!answer) {\n      throw new Error(\"question and answer are required\");\n    }\n    const tkey = mpcCoreKit.tKey;\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey);\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n\n    // const pubKey = Point.fromTkeyPoint(mpcCoreKit.tKey.getTSSPub()).toBufferSEC1(true).toString(\"hex\");\n    const pubKey = tkey.getKeyDetails().pubKey.toSEC1(secp256k1, true).toString(\"hex\") + tkey.tssTag;\n    let hash = keccak256(Buffer.from(answer + pubKey, \"utf8\"));\n    hash = hash.startsWith(\"0x\") ? hash.slice(2) : hash;\n    const factorKeyBN = new BN(hash, \"hex\");\n    const factorKeyPt = Point.fromScalar(factorKeyBN, factorKeyCurve);\n    if (factorKeyPt.toSEC1(factorKeyCurve, true).toString(\"hex\") !== store.factorPublicKey) {\n      throw new Error(\"Invalid answer\");\n    }\n    return hash;\n  }\n  getQuestion(mpcCoreKit) {\n    if (!mpcCoreKit.tKey) {\n      throw new Error(\"Tkey not initialized, call init first.\");\n    }\n    const tkey = mpcCoreKit.tKey;\n    const domainKey = `${this.storeDomainName}:${mpcCoreKit.tKey.tssTag}`;\n    const storeDomain = tkey.metadata.getGeneralStoreDomain(domainKey);\n    if (!storeDomain || !storeDomain.question) {\n      throw new Error(\"Security question does not exists\");\n    }\n    const store = TssSecurityQuestionStore.fromJSON(storeDomain);\n    return store.question;\n  }\n}\n\nexport { TssSecurityQuestion, TssSecurityQuestionStore };\n", "// TODO: move the types to a base class for both dkls and frost in future\n\nlet COREKIT_STATUS = /*#__PURE__*/function (COREKIT_STATUS) {\n  COREKIT_STATUS[\"NOT_INITIALIZED\"] = \"NOT_INITIALIZED\";\n  COREKIT_STATUS[\"INITIALIZED\"] = \"INITIALIZED\";\n  COREKIT_STATUS[\"REQUIRED_SHARE\"] = \"REQUIRED_SHARE\";\n  COREKIT_STATUS[\"LOGGED_IN\"] = \"LOGGED_IN\";\n  return COREKIT_STATUS;\n}({});\n\nexport { COREKIT_STATUS };\n", "import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { getPubKeyPoint, KEY_NOT_FOUND, generateID } from '@tkey/common-types';\nimport stringify from 'json-stable-stringify';\n\nclass MockStorageLayer {\n  constructor({\n    dataMap,\n    lockMap\n  } = {\n    dataMap: {},\n    lockMap: {}\n  }) {\n    _defineProperty(this, \"dataMap\", void 0);\n    _defineProperty(this, \"storageLayerName\", void 0);\n    _defineProperty(this, \"lockMap\", void 0);\n    _defineProperty(this, \"serviceProvider\", void 0);\n    this.dataMap = dataMap || {};\n    this.lockMap = lockMap || {};\n    this.storageLayerName = \"MockStorageLayer\";\n  }\n  static fromJSON(value) {\n    const {\n      dataMap,\n      lockMap,\n      storageLayerName\n    } = value;\n    if (storageLayerName !== \"MockStorageLayer\") return undefined;\n    return new MockStorageLayer({\n      dataMap,\n      lockMap\n    });\n  }\n\n  /**\n   *  Get metadata for a key\n   * @param privKey - If not provided, it will use service provider's share for decryption\n   */\n  async getMetadata(params) {\n    const {\n      serviceProvider,\n      privKey\n    } = params;\n    let usedKey;\n    if (!privKey) usedKey = serviceProvider.retrievePubKeyPoint().getX();else usedKey = getPubKeyPoint(privKey).x;\n    const fromMap = this.dataMap[usedKey.toString(\"hex\")];\n    if (!fromMap) {\n      return {\n        message: KEY_NOT_FOUND\n      };\n    }\n    return JSON.parse(this.dataMap[usedKey.toString(\"hex\")]);\n  }\n\n  /**\n   * Set Metadata for a key\n   * @param input - data to post\n   * @param privKey - If not provided, it will use service provider's share for encryption\n   */\n  async setMetadata(params) {\n    const {\n      serviceProvider,\n      privKey,\n      input\n    } = params;\n    let usedKey;\n    if (!privKey) usedKey = serviceProvider.retrievePubKeyPoint().getX();else usedKey = getPubKeyPoint(privKey).x;\n    this.dataMap[usedKey.toString(\"hex\")] = stringify(input);\n    return {\n      message: \"success\"\n    };\n  }\n  async setMetadataStream(params) {\n    const {\n      serviceProvider,\n      privKey,\n      input\n    } = params;\n    input.forEach((el, index) => {\n      let usedKey;\n      if (!privKey || !privKey[index]) usedKey = serviceProvider.retrievePubKeyPoint().getX();else usedKey = getPubKeyPoint(privKey[index]).x;\n      this.dataMap[usedKey.toString(\"hex\")] = stringify(el);\n    });\n    return {\n      message: \"success\"\n    };\n  }\n  async acquireWriteLock(params) {\n    const {\n      serviceProvider,\n      privKey\n    } = params;\n    let usedKey;\n    if (!privKey) usedKey = serviceProvider.retrievePubKeyPoint().getX();else usedKey = getPubKeyPoint(privKey).x;\n    if (this.lockMap[usedKey.toString(\"hex\")]) return {\n      status: 0\n    };\n    const id = generateID();\n    this.lockMap[usedKey.toString(\"hex\")] = id;\n    return {\n      status: 1,\n      id\n    };\n  }\n  async releaseWriteLock(params) {\n    const {\n      serviceProvider,\n      privKey,\n      id\n    } = params;\n    let usedKey;\n    if (!privKey) usedKey = serviceProvider.retrievePubKeyPoint().getX();else usedKey = getPubKeyPoint(privKey).x;\n    if (!this.lockMap[usedKey.toString(\"hex\")]) return {\n      status: 0\n    };\n    if (id !== this.lockMap[usedKey.toString(\"hex\")]) return {\n      status: 2\n    };\n    this.lockMap[usedKey.toString(\"hex\")] = null;\n    return {\n      status: 1\n    };\n  }\n  toJSON() {\n    return {\n      dataMap: this.dataMap,\n      serviceProvider: this.serviceProvider,\n      storageLayerName: this.storageLayerName\n    };\n  }\n}\nvar MockStorageLayer$1 = MockStorageLayer;\n\nexport { MockStorageLayer$1 as default };\n", "import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { ONE_KEY_DELETE_NONCE, encrypt, getPubKeyECC, KEY_NOT_FOUND, decrypt, toPrivKeyECC, prettyPrintError, toPrivKeyEC, getPubKeyPoint, secp256k1, ONE_KEY_NAMESPACE } from '@tkey/common-types';\nimport { post } from '@toruslabs/http-helpers';\nimport base64url from 'base64url';\nimport BN from 'bn.js';\nimport { keccak256 } from 'ethereum-cryptography/keccak';\nimport stringify from 'json-stable-stringify';\n\nfunction signDataWithPrivKey(data, privKey) {\n  const sig = secp256k1.sign(keccak256(Buffer.from(stringify(data), \"utf8\")), toPrivKeyECC(privKey), \"utf-8\");\n  return sig.toDER(\"hex\");\n}\nclass TorusStorageLayer {\n  constructor({\n    enableLogging = false,\n    hostUrl = \"http://localhost:5051\",\n    serverTimeOffset = 0\n  }) {\n    _defineProperty(this, \"enableLogging\", void 0);\n    _defineProperty(this, \"hostUrl\", void 0);\n    _defineProperty(this, \"storageLayerName\", void 0);\n    _defineProperty(this, \"serverTimeOffset\", void 0);\n    this.enableLogging = enableLogging;\n    this.hostUrl = hostUrl;\n    this.storageLayerName = \"TorusStorageLayer\";\n    this.serverTimeOffset = serverTimeOffset;\n  }\n  static async serializeMetadataParamsInput(el, serviceProvider, privKey) {\n    if (typeof el === \"object\") {\n      // Allow using of special message as command, in which case, do not encrypt\n      const obj = el;\n      const isCommandMessage = obj.message === ONE_KEY_DELETE_NONCE;\n      if (isCommandMessage) return obj.message;\n    }\n\n    // General case, encrypt message\n    const bufferMetadata = Buffer.from(stringify(el));\n    let encryptedDetails;\n    if (privKey) {\n      encryptedDetails = await encrypt(getPubKeyECC(privKey), bufferMetadata);\n    } else {\n      encryptedDetails = await serviceProvider.encrypt(bufferMetadata);\n    }\n    const serializedEncryptedDetails = base64url.encode(stringify(encryptedDetails));\n    return serializedEncryptedDetails;\n  }\n  static fromJSON(value) {\n    const {\n      enableLogging,\n      hostUrl,\n      storageLayerName,\n      serverTimeOffset = 0\n    } = value;\n    if (storageLayerName !== \"TorusStorageLayer\") return undefined;\n    return new TorusStorageLayer({\n      enableLogging,\n      hostUrl,\n      serverTimeOffset\n    });\n  }\n\n  /**\n   *  Get metadata for a key\n   * @param privKey - If not provided, it will use service provider's share for decryption\n   */\n  async getMetadata(params) {\n    const {\n      serviceProvider,\n      privKey\n    } = params;\n    const keyDetails = this.generateMetadataParams({}, serviceProvider, privKey);\n    const metadataResponse = await post(`${this.hostUrl}/get`, keyDetails);\n    // returns empty object if object\n    if (metadataResponse.message === \"\") {\n      return {\n        message: KEY_NOT_FOUND\n      };\n    }\n    const encryptedMessage = JSON.parse(base64url.decode(metadataResponse.message));\n    let decrypted;\n    if (privKey) {\n      decrypted = await decrypt(toPrivKeyECC(privKey), encryptedMessage);\n    } else {\n      decrypted = await serviceProvider.decrypt(encryptedMessage);\n    }\n    return JSON.parse(decrypted.toString());\n  }\n\n  /**\n   * Set Metadata for a key\n   * @param input - data to post\n   * @param privKey - If not provided, it will use service provider's share for encryption\n   */\n  async setMetadata(params) {\n    try {\n      const {\n        serviceProvider,\n        privKey,\n        input\n      } = params;\n      const metadataParams = this.generateMetadataParams(await TorusStorageLayer.serializeMetadataParamsInput(input, serviceProvider, privKey), serviceProvider, privKey);\n      return await post(`${this.hostUrl}/set`, metadataParams);\n    } catch (error) {\n      const prettyError = await prettyPrintError(error);\n      throw prettyError;\n    }\n  }\n  async setMetadataStream(params) {\n    try {\n      const {\n        serviceProvider,\n        privKey,\n        input\n      } = params;\n      const newInput = input;\n      const finalMetadataParams = await Promise.all(newInput.map(async (el, i) => this.generateMetadataParams(await TorusStorageLayer.serializeMetadataParamsInput(el, serviceProvider, privKey[i]), serviceProvider, privKey[i])));\n      const FD = new FormData();\n      finalMetadataParams.forEach((el, index) => {\n        FD.append(index.toString(), JSON.stringify(el));\n      });\n      const options = {\n        mode: \"cors\",\n        method: \"POST\",\n        headers: {\n          // don't set ContentType header here. it's handled in http-helpers\n        }\n      };\n      const customOptions = {\n        isUrlEncodedData: true,\n        timeout: 600 * 1000 // 10 mins of timeout for excessive shares case\n      };\n      return await post(`${this.hostUrl}/bulk_set_stream`, FD, options, customOptions);\n    } catch (error) {\n      const prettyError = await prettyPrintError(error);\n      throw prettyError;\n    }\n  }\n  generateMetadataParams(message, serviceProvider, privKey) {\n    let sig;\n    let pubX;\n    let pubY;\n    let namespace = \"tkey\";\n    const setTKeyStore = {\n      data: message,\n      timestamp: new BN(~~(this.serverTimeOffset + Date.now() / 1000)).toString(16)\n    };\n\n    // Overwrite bulk_set to allow deleting nonce v2 together with creating tKey.\n    // This is a workaround, a better solution is allow upstream API to set tableName/namespace of metadata params\n    if (message === ONE_KEY_DELETE_NONCE) {\n      namespace = ONE_KEY_NAMESPACE;\n      setTKeyStore.data = \"<deleted>\";\n    }\n    const hash = keccak256(Buffer.from(stringify(setTKeyStore), \"utf8\"));\n    if (privKey) {\n      const unparsedSig = toPrivKeyEC(privKey).sign(hash);\n      sig = Buffer.from(unparsedSig.r.toString(16, 64) + unparsedSig.s.toString(16, 64) + new BN(0).toString(16, 2), \"hex\").toString(\"base64\");\n      const pubK = getPubKeyPoint(privKey);\n      pubX = pubK.x.toString(\"hex\");\n      pubY = pubK.y.toString(\"hex\");\n    } else {\n      const point = serviceProvider.retrievePubKeyPoint();\n      sig = serviceProvider.sign(new BN(hash));\n      pubX = point.getX().toString(\"hex\");\n      pubY = point.getY().toString(\"hex\");\n    }\n    return {\n      pub_key_X: pubX,\n      pub_key_Y: pubY,\n      set_data: setTKeyStore,\n      signature: sig,\n      namespace\n    };\n  }\n  async acquireWriteLock(params) {\n    const {\n      serviceProvider,\n      privKey\n    } = params;\n    const data = {\n      timestamp: Math.floor(this.serverTimeOffset + Date.now() / 1000)\n    };\n    let signature;\n    if (privKey) {\n      signature = signDataWithPrivKey(data, privKey);\n    } else {\n      signature = serviceProvider.sign(new BN(keccak256(Buffer.from(stringify(data), \"utf8\"))));\n    }\n    const metadataParams = {\n      key: toPrivKeyEC(privKey).getPublic(\"hex\"),\n      data,\n      signature\n    };\n    return post(`${this.hostUrl}/acquireLock`, metadataParams);\n  }\n  async releaseWriteLock(params) {\n    const {\n      serviceProvider,\n      privKey,\n      id\n    } = params;\n    const data = {\n      timestamp: Math.floor(this.serverTimeOffset + Date.now() / 1000)\n    };\n    let signature;\n    if (privKey) {\n      signature = signDataWithPrivKey(data, privKey);\n    } else {\n      signature = serviceProvider.sign(new BN(keccak256(Buffer.from(stringify(data), \"utf8\"))));\n    }\n    const metadataParams = {\n      key: toPrivKeyEC(privKey).getPublic(\"hex\"),\n      data,\n      signature,\n      id\n    };\n    return post(`${this.hostUrl}/releaseLock`, metadataParams);\n  }\n  toJSON() {\n    return {\n      enableLogging: this.enableLogging,\n      hostUrl: this.hostUrl,\n      storageLayerName: this.storageLayerName\n    };\n  }\n}\nvar TorusStorageLayer$1 = TorusStorageLayer;\n\nexport { TorusStorageLayer$1 as default };\n", "import BN from \"bn.js\";\nimport EC, { curve } from \"elliptic\";\n\nimport { EllipticCurve } from \"./interface\";\n\nexport class Ed25519Curve extends EC.ec implements EllipticCurve {\n  constructor() {\n    super(\"ed25519\");\n  }\n\n  bufferToScalar(b: Buffer): BN {\n    return new BN(b, \"le\");\n  }\n\n  generateScalar(): BN {\n    return this.genKeyPair().getPrivate();\n  }\n\n  scalarToBuffer(s: BN, buf: typeof Buffer): Buffer {\n    s.toString(\"hex\");\n    return s.toArrayLike(buf, \"le\", 32);\n  }\n\n  pointToBuffer(p: curve.base.BasePoint, buf: typeof Buffer): Buffer {\n    // Each y has 2 possible x-values, x and -x. When compressing, it's enough to\n    // store y and use the last byte to encode the sign of x.\n    const x = p.getX();\n    const y = p.getY();\n    const b = y.toArrayLike(buf, \"le\", 32);\n    b[b.length - 1] |= x.and(new BN(1)).eqn(1) ? 0x80 : 0x00;\n    return b;\n  }\n}\n", "import nodeCrypto from \"crypto\";\nimport { ec as EC } from \"elliptic\";\n\nconst ec = new EC(\"secp256k1\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst browserCrypto = global.crypto || (global as any).msCrypto || {};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst subtle = browserCrypto.subtle || (browserCrypto as any).webkitSubtle;\n\nconst EC_GROUP_ORDER = Buffer.from(\"fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\", \"hex\");\nconst ZERO32 = Buffer.alloc(32, 0);\n\nexport interface Ecies {\n  iv: Buffer;\n  ephemPublicKey: Buffer;\n  ciphertext: Buffer;\n  mac: Buffer;\n}\n\nfunction assert(condition: boolean, message: string) {\n  if (!condition) {\n    throw new Error(message || \"Assertion failed\");\n  }\n}\nfunction isScalar(x: Buffer): boolean {\n  return Buffer.isBuffer(x) && x.length === 32;\n}\n\nfunction isValidPrivateKey(privateKey: Buffer): boolean {\n  if (!isScalar(privateKey)) {\n    return false;\n  }\n  return (\n    privateKey.compare(ZERO32) > 0 &&\n    // > 0\n    privateKey.compare(EC_GROUP_ORDER) < 0\n  ); // < G\n}\n\n// Compare two buffers in constant time to prevent timing attacks.\nfunction equalConstTime(b1: Buffer, b2: Buffer): boolean {\n  if (b1.length !== b2.length) {\n    return false;\n  }\n  let res = 0;\n  for (let i = 0; i < b1.length; i++) {\n    res |= b1[i] ^ b2[i]; // jshint ignore:line\n  }\n\n  return res === 0;\n}\n\n/* This must check if we're in the browser or\nnot, since the functions are different and does\nnot convert using browserify */\nfunction randomBytes(size: number): Buffer {\n  const arr = new Uint8Array(size);\n  if (typeof browserCrypto.getRandomValues === \"undefined\") {\n    return Buffer.from(nodeCrypto.randomBytes(size));\n  }\n  browserCrypto.getRandomValues(arr);\n\n  return Buffer.from(arr);\n}\n\nasync function sha512(msg: Buffer): Promise<Uint8Array> {\n  if (subtle) {\n    const hash = await subtle.digest(\"SHA-512\", msg);\n    const result = new Uint8Array(hash);\n    return result;\n  }\n  const hash = nodeCrypto.createHash(\"sha512\");\n  const result = hash.update(msg).digest();\n  return new Uint8Array(result);\n}\n\ntype AesFunctionType = (iv: Buffer, key: Buffer, data: Buffer) => Promise<Buffer>;\n\nfunction getAes(op: \"encrypt\" | \"decrypt\"): AesFunctionType {\n  return async function (iv: Buffer, key: Buffer, data: Buffer) {\n    if (subtle) {\n      const importAlgorithm = {\n        name: \"AES-CBC\",\n      };\n      const cryptoKey = await subtle.importKey(\"raw\", key, importAlgorithm, false, [op]);\n      const encAlgorithm = {\n        name: \"AES-CBC\",\n        iv,\n      };\n      const result = await subtle[op](encAlgorithm, cryptoKey, data);\n      return Buffer.from(new Uint8Array(result));\n    } else if (op === \"encrypt\") {\n      const cipher = nodeCrypto.createCipheriv(\"aes-256-cbc\", key, iv);\n      const firstChunk = cipher.update(data);\n      const secondChunk = cipher.final();\n      return Buffer.concat([firstChunk, secondChunk]);\n    } else if (op === \"decrypt\") {\n      const decipher = nodeCrypto.createDecipheriv(\"aes-256-cbc\", key, iv);\n      const firstChunk = decipher.update(data);\n      const secondChunk = decipher.final();\n      return Buffer.concat([firstChunk, secondChunk]);\n    }\n    throw new Error(`Unsupported operation: ${op}`);\n  };\n}\nconst aesCbcEncrypt = getAes(\"encrypt\");\nconst aesCbcDecrypt = getAes(\"decrypt\");\n\nasync function hmacSha256Sign(key: Buffer, msg: Buffer): Promise<Buffer> {\n  if (subtle) {\n    const importAlgorithm = {\n      name: \"HMAC\",\n      hash: {\n        name: \"SHA-256\",\n      },\n    };\n    const cryptoKey = await subtle.importKey(\"raw\", new Uint8Array(key), importAlgorithm, false, [\"sign\", \"verify\"]);\n    const sig = await subtle.sign(\"HMAC\", cryptoKey, msg);\n    const result = Buffer.from(new Uint8Array(sig));\n    return result;\n  }\n  const hmac = nodeCrypto.createHmac(\"sha256\", Buffer.from(key));\n  hmac.update(msg);\n  const result = hmac.digest();\n  return result;\n}\nasync function hmacSha256Verify(key: Buffer, msg: Buffer, sig: Buffer): Promise<boolean> {\n  const expectedSig = await hmacSha256Sign(key, msg);\n  return equalConstTime(expectedSig, sig);\n}\n\n/**\n * Generate a new valid private key. Will use the window.crypto or window.msCrypto as source\n * depending on your browser.\n */\nexport const generatePrivate = function (): Buffer {\n  let privateKey = randomBytes(32);\n  while (!isValidPrivateKey(privateKey)) {\n    privateKey = randomBytes(32);\n  }\n  return privateKey;\n};\n\nexport const getPublic = function (privateKey: Buffer): Buffer {\n  // This function has sync API so we throw an error immediately.\n  assert(privateKey.length === 32, \"Bad private key\");\n  assert(isValidPrivateKey(privateKey), \"Bad private key\");\n  // XXX(Kagami): `elliptic.utils.encode` returns array for every\n  // encoding except `hex`.\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(\"array\"));\n};\n\n/**\n * Get compressed version of public key.\n */\nexport const getPublicCompressed = function (privateKey: Buffer): Buffer {\n  // jshint ignore:line\n  assert(privateKey.length === 32, \"Bad private key\");\n  assert(isValidPrivateKey(privateKey), \"Bad private key\");\n  // See https://github.com/wanderer/secp256k1-node/issues/46\n  const compressed = true;\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, \"array\"));\n};\n\n// NOTE(Kagami): We don't use promise shim in Browser implementation\n// because it's supported natively in new browsers (see\n// <http://caniuse.com/#feat=promises>) and we can use only new browsers\n// because of the WebCryptoAPI (see\n// <http://caniuse.com/#feat=cryptography>).\nexport const sign = async function (privateKey: Buffer, msg: Buffer): Promise<Buffer> {\n  assert(privateKey.length === 32, \"Bad private key\");\n  assert(isValidPrivateKey(privateKey), \"Bad private key\");\n  assert(msg.length > 0, \"Message should not be empty\");\n  assert(msg.length <= 32, \"Message is too long\");\n  return Buffer.from(\n    ec\n      .sign(msg, privateKey, {\n        canonical: true,\n      })\n      .toDER()\n  );\n};\n\nexport const verify = async function (publicKey: Buffer, msg: Buffer, sig: Buffer): Promise<null> {\n  assert(publicKey.length === 65 || publicKey.length === 33, \"Bad public key\");\n  if (publicKey.length === 65) {\n    assert(publicKey[0] === 4, \"Bad public key\");\n  }\n  if (publicKey.length === 33) {\n    assert(publicKey[0] === 2 || publicKey[0] === 3, \"Bad public key\");\n  }\n  assert(msg.length > 0, \"Message should not be empty\");\n  assert(msg.length <= 32, \"Message is too long\");\n  if (ec.verify(msg, sig, publicKey)) {\n    return null;\n  }\n  throw new Error(\"Bad signature\");\n};\n\nexport const derive = async function (privateKeyA: Buffer, publicKeyB: Buffer): Promise<Buffer> {\n  assert(Buffer.isBuffer(privateKeyA), \"Bad private key\");\n  assert(Buffer.isBuffer(publicKeyB), \"Bad public key\");\n  assert(privateKeyA.length === 32, \"Bad private key\");\n  assert(isValidPrivateKey(privateKeyA), \"Bad private key\");\n  assert(publicKeyB.length === 65 || publicKeyB.length === 33, \"Bad public key\");\n  if (publicKeyB.length === 65) {\n    assert(publicKeyB[0] === 4, \"Bad public key\");\n  }\n  if (publicKeyB.length === 33) {\n    assert(publicKeyB[0] === 2 || publicKeyB[0] === 3, \"Bad public key\");\n  }\n  const keyA = ec.keyFromPrivate(privateKeyA);\n  const keyB = ec.keyFromPublic(publicKeyB);\n  const Px = keyA.derive(keyB.getPublic()); // BN instance\n  return Buffer.from(Px.toArray());\n};\n\nexport const deriveUnpadded = derive;\n\nexport const derivePadded = async function (privateKeyA: Buffer, publicKeyB: Buffer): Promise<Buffer> {\n  assert(Buffer.isBuffer(privateKeyA), \"Bad private key\");\n  assert(Buffer.isBuffer(publicKeyB), \"Bad public key\");\n  assert(privateKeyA.length === 32, \"Bad private key\");\n  assert(isValidPrivateKey(privateKeyA), \"Bad private key\");\n  assert(publicKeyB.length === 65 || publicKeyB.length === 33, \"Bad public key\");\n  if (publicKeyB.length === 65) {\n    assert(publicKeyB[0] === 4, \"Bad public key\");\n  }\n  if (publicKeyB.length === 33) {\n    assert(publicKeyB[0] === 2 || publicKeyB[0] === 3, \"Bad public key\");\n  }\n  const keyA = ec.keyFromPrivate(privateKeyA);\n  const keyB = ec.keyFromPublic(publicKeyB);\n  const Px = keyA.derive(keyB.getPublic()); // BN instance\n  return Buffer.from(Px.toString(16, 64), \"hex\");\n};\n\nexport const encrypt = async function (publicKeyTo: Buffer, msg: Buffer, opts?: { iv?: Buffer; ephemPrivateKey?: Buffer }): Promise<Ecies> {\n  opts = opts || {};\n\n  let ephemPrivateKey = opts.ephemPrivateKey || randomBytes(32);\n  // There is a very unlikely possibility that it is not a valid key\n  while (!isValidPrivateKey(ephemPrivateKey)) {\n    ephemPrivateKey = opts.ephemPrivateKey || randomBytes(32);\n  }\n  const ephemPublicKey = getPublic(ephemPrivateKey);\n  const Px = await deriveUnpadded(ephemPrivateKey, publicKeyTo);\n  const hash = await sha512(Px);\n  const iv = opts.iv || randomBytes(16);\n  const encryptionKey = hash.slice(0, 32);\n  const macKey = hash.slice(32);\n  const data = await aesCbcEncrypt(iv, Buffer.from(encryptionKey), msg);\n  const ciphertext = data;\n  const dataToMac = Buffer.concat([iv, ephemPublicKey, ciphertext]);\n  const mac = await hmacSha256Sign(Buffer.from(macKey), dataToMac);\n  return {\n    iv,\n    ephemPublicKey,\n    ciphertext,\n    mac,\n  };\n};\n\nexport const decrypt = async function (privateKey: Buffer, opts: Ecies, _padding?: boolean): Promise<Buffer> {\n  const padding = _padding ?? false;\n  const deriveLocal = padding ? derivePadded : deriveUnpadded;\n  const Px = await deriveLocal(privateKey, opts.ephemPublicKey);\n  const hash = await sha512(Px);\n  const encryptionKey = hash.slice(0, 32);\n  const macKey = hash.slice(32);\n  const dataToMac = Buffer.concat([opts.iv, opts.ephemPublicKey, opts.ciphertext]);\n  const macGood = await hmacSha256Verify(Buffer.from(macKey), dataToMac, opts.mac);\n  if (!macGood && padding === false) {\n    return decrypt(privateKey, opts, true);\n  } else if (!macGood && padding === true) {\n    throw new Error(\"bad MAC after trying padded\");\n  }\n  const msg = await aesCbcDecrypt(opts.iv, Buffer.from(encryptionKey), opts.ciphertext);\n  return Buffer.from(new Uint8Array(msg));\n};\n", "import _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { generatePrivate } from '@toruslabs/eccrypto';\nimport BN from 'bn.js';\nimport { keccak256 } from 'ethereum-cryptography/keccak';\nimport { ec } from 'elliptic';\nimport { io } from 'socket.io-client';\n\nconst WEB3_SESSION_HEADER_KEY = \"x-web3-session-id\";\nconst DELIMITERS = {\n  Delimiter1: \"\\u001c\",\n  Delimiter2: \"\\u0015\",\n  Delimiter3: \"\\u0016\",\n  Delimiter4: \"\\u0017\"\n};\n\nfunction getEc() {\n  return new ec(\"secp256k1\");\n}\nfunction getLagrangeCoeffs(_allIndexes, _myIndex) {\n  let _target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  const ec = getEc();\n  const allIndexes = _allIndexes.map(i => new BN(i));\n  const myIndex = new BN(_myIndex);\n  const target = new BN(_target);\n  let upper = new BN(1);\n  let lower = new BN(1);\n  for (let j = 0; j < allIndexes.length; j += 1) {\n    if (myIndex.cmp(allIndexes[j]) !== 0) {\n      let tempUpper = target.sub(allIndexes[j]);\n      tempUpper = tempUpper.umod(ec.curve.n);\n      upper = upper.mul(tempUpper);\n      upper = upper.umod(ec.curve.n);\n      let tempLower = myIndex.sub(allIndexes[j]);\n      tempLower = tempLower.umod(ec.curve.n);\n      lower = lower.mul(tempLower).umod(ec.curve.n);\n    }\n  }\n  return upper.mul(lower.invm(ec.curve.n)).umod(ec.curve.n);\n}\nfunction ecPoint(p) {\n  const ec = getEc();\n  return ec.keyFromPublic({\n    x: p.x.padStart(64, \"0\"),\n    y: p.y.padStart(64, \"0\")\n  }).getPublic();\n}\nconst getAdditiveCoeff = (isUser, participatingServerIndexes, userTSSIndex, serverIndex) => {\n  const ec = getEc();\n  if (isUser) {\n    return getLagrangeCoeffs([1, userTSSIndex], userTSSIndex);\n  }\n  // generate the lagrange coeff that converts the current server DKG share into an additive sharing\n  const serverLagrangeCoeff = getLagrangeCoeffs(participatingServerIndexes, serverIndex);\n  const masterLagrangeCoeff = getLagrangeCoeffs([1, userTSSIndex], 1);\n  const additiveLagrangeCoeff = serverLagrangeCoeff.mul(masterLagrangeCoeff).umod(ec.curve.n);\n  return additiveLagrangeCoeff;\n};\n\n// Note: this is only needed for DKLS and not for FROST\nconst getDenormaliseCoeff = (party, parties) => {\n  if (parties.indexOf(party) === -1) throw new Error(`party ${party} not found in parties ${parties}`);\n  const ec = getEc();\n  // generate the lagrange coeff that denormalises the additive sharing into the shamir sharing that TSS is expecting\n  const denormaliseLagrangeCoeff = getLagrangeCoeffs(parties, party).invm(ec.curve.n).umod(ec.curve.n);\n  return denormaliseLagrangeCoeff;\n};\nconst getDKLSCoeff = (isUser, participatingServerIndexes, userTSSIndex, serverIndex) => {\n  const sortedServerIndexes = participatingServerIndexes.sort((a, b) => a - b);\n  for (let i = 0; i < sortedServerIndexes.length; i++) {\n    if (sortedServerIndexes[i] !== participatingServerIndexes[i]) throw new Error(\"server indexes must be sorted\");\n  }\n  // generate denormalise coeff for DKLS\n  const parties = [];\n\n  // total number of parties for DKLS = total number of servers + 1 (user is the last party)\n  // server party indexes\n  let serverPartyIndex = 0;\n  for (let i = 0; i < participatingServerIndexes.length; i++) {\n    const currentPartyIndex = i + 1;\n    parties.push(currentPartyIndex);\n    if (participatingServerIndexes[i] === serverIndex) serverPartyIndex = currentPartyIndex;\n  }\n  const userPartyIndex = parties.length + 1;\n  parties.push(userPartyIndex); // user party index\n  if (isUser) {\n    const additiveCoeff = getAdditiveCoeff(isUser, participatingServerIndexes, userTSSIndex, serverIndex);\n    const denormaliseCoeff = getDenormaliseCoeff(userPartyIndex, parties);\n    const ec = getEc();\n    return denormaliseCoeff.mul(additiveCoeff).umod(ec.curve.n);\n  }\n  const additiveCoeff = getAdditiveCoeff(isUser, participatingServerIndexes, userTSSIndex, serverIndex);\n  const denormaliseCoeff = getDenormaliseCoeff(serverPartyIndex, parties);\n  const ec = getEc();\n  const coeff = denormaliseCoeff.mul(additiveCoeff).umod(ec.curve.n);\n  return coeff;\n};\nconst createSockets = async (wsEndpoints, sessionId) => {\n  return wsEndpoints.map(wsEndpoint => {\n    if (wsEndpoint === null || wsEndpoint === undefined) {\n      return null;\n    }\n    return io(wsEndpoint, {\n      path: \"/tss/socket.io\",\n      query: {\n        sessionId\n      },\n      transports: [\"websocket\", \"polling\"],\n      withCredentials: true,\n      reconnectionDelayMax: 10000,\n      reconnectionAttempts: 5\n    });\n  });\n};\nfunction getTSSPubKey(dkgPubKey, userSharePubKey, userTSSIndex) {\n  const serverLagrangeCoeff = getLagrangeCoeffs([1, userTSSIndex], 1);\n  const userLagrangeCoeff = getLagrangeCoeffs([1, userTSSIndex], userTSSIndex);\n  const serverTerm = ecPoint(dkgPubKey).mul(serverLagrangeCoeff);\n  const userTerm = ecPoint(userSharePubKey).mul(userLagrangeCoeff);\n  return serverTerm.add(userTerm);\n}\nconst generateEndpoints = (parties, clientIndex) => {\n  const endpoints = [];\n  const tssWSEndpoints = [];\n  const partyIndexes = [];\n  for (let i = 0; i < parties; i++) {\n    partyIndexes.push(i);\n    if (i === clientIndex) {\n      endpoints.push(null);\n      tssWSEndpoints.push(null);\n    } else {\n      endpoints.push(`https://sapphire-${i + 1}.auth.network/tss`);\n      tssWSEndpoints.push(`https://sapphire-${i + 1}.auth.network`);\n    }\n  }\n  return {\n    endpoints,\n    tssWSEndpoints,\n    partyIndexes\n  };\n};\nconst setupSockets = async (tssWSEndpoints, sessionId) => {\n  const sockets = await createSockets(tssWSEndpoints, sessionId);\n  // wait for websockets to be connected\n  await new Promise(resolve => {\n    const checkConnectionTimer = setInterval(() => {\n      for (let i = 0; i < sockets.length; i++) {\n        if (sockets[i] !== null && !sockets[i].connected) return;\n      }\n      clearInterval(checkConnectionTimer);\n      resolve(true);\n    }, 100);\n  });\n  return sockets;\n};\n\n// TODO: create namespace for globals\nif (globalThis.tss_clients === undefined) {\n  // Cleanup leads to memory leaks with just an object. Should use a map instead.\n  // TODO: This should be singular\n  globalThis.tss_clients = new Map();\n}\nif (globalThis.js_read_msg === undefined) {\n  globalThis.js_read_msg = async function (session, self_index, party, msg_type) {\n    const tss_client = globalThis.tss_clients.get(session);\n    tss_client.log(`reading msg, ${msg_type}`);\n    if (msg_type === \"ga1_worker_support\") {\n      return \"unsupported\";\n    }\n    const mm = tss_client.msgQueue.find(m => m.sender === party && m.recipient === self_index && m.msg_type === msg_type);\n    if (!mm) {\n      // It is very important that this promise can reject, since it is passed through to dkls library and awaited internally. If it cannot reject and a message is lost,\n      // it will never resolve and hang indefinitely with no possibility of recovery.\n      return new Promise((resolve, reject) => {\n        let counter = 0;\n        const timer = setInterval(() => {\n          const found = tss_client.msgQueue.find(m => m.sender === party && m.recipient === self_index && m.msg_type === msg_type);\n          if (found !== undefined) {\n            clearInterval(timer);\n            resolve(found.msg_data);\n          }\n          if (counter >= 1000) {\n            clearInterval(timer);\n            // TODO Fix wasm to handle error objects properly and then reject\n            // with Error instead of string.\n            //\n            // eslint-disable-next-line prefer-promise-reject-errors\n            reject(\"Message not received in a reasonable time\");\n          }\n          counter++;\n        }, 10);\n      });\n    }\n    return mm.msg_data;\n  };\n}\nif (globalThis.js_send_msg === undefined) {\n  globalThis.js_send_msg = async function (session, self_index, party, msg_type, msg_data) {\n    const tss_client = globalThis.tss_clients.get(session);\n    tss_client.log(`sending msg, ${msg_type}`);\n    if (msg_type.indexOf(\"ga1_data_unprocessed\") > -1) {\n      throw new Error(\"ga1_data_unprocessed should not be sent directly\");\n    }\n    if (tss_client.websocketOnly) {\n      const socket = tss_client.sockets[party];\n      socket.emit(\"send_msg\", {\n        session,\n        sender: self_index,\n        recipient: party,\n        msg_type,\n        msg_data\n      });\n    } else {\n      const sid = session.split(DELIMITERS.Delimiter4)[1];\n      const endpoint = tss_client.lookupEndpoint(session, party);\n      fetch(`${endpoint}/send`, {\n        method: \"POST\",\n        headers: {\n          [WEB3_SESSION_HEADER_KEY]: sid,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          session,\n          sender: self_index,\n          recipient: party,\n          msg_type,\n          msg_data\n        })\n      });\n    }\n    return true;\n  };\n}\nclass Client {\n  // Note: create sockets externally before passing it in in the constructor to allow socket reuse\n  constructor(_session, _index, _parties, _endpoints, _sockets, _share, _pubKey, _websocketOnly, _tssLib) {\n    _defineProperty(this, \"session\", void 0);\n    _defineProperty(this, \"index\", void 0);\n    _defineProperty(this, \"parties\", void 0);\n    _defineProperty(this, \"msgQueue\", []);\n    _defineProperty(this, \"sockets\", void 0);\n    _defineProperty(this, \"endpoints\", void 0);\n    _defineProperty(this, \"share\", void 0);\n    _defineProperty(this, \"pubKey\", void 0);\n    _defineProperty(this, \"websocketOnly\", void 0);\n    _defineProperty(this, \"tssLib\", void 0);\n    _defineProperty(this, \"_startPrecomputeTime\", void 0);\n    _defineProperty(this, \"_endPrecomputeTime\", void 0);\n    _defineProperty(this, \"_startSignTime\", void 0);\n    _defineProperty(this, \"_endSignTime\", void 0);\n    _defineProperty(this, \"log\", void 0);\n    _defineProperty(this, \"_consumed\", void 0);\n    _defineProperty(this, \"_sLessThanHalf\", void 0);\n    _defineProperty(this, \"_precomputeComplete\", []);\n    _defineProperty(this, \"_precomputeFailed\", []);\n    _defineProperty(this, \"precomputed_value\", null);\n    _defineProperty(this, \"_ready\", false);\n    _defineProperty(this, \"_signer\", void 0);\n    _defineProperty(this, \"_rng\", void 0);\n    // this is required due to precompute not being marked async\n    _defineProperty(this, \"_readyResolve\", null);\n    if (_parties.length !== _sockets.length) {\n      throw new Error(\"parties and sockets length must be equal, add null for client if necessary\");\n    }\n    if (_parties.length !== _endpoints.length) {\n      throw new Error(\"parties and endpoints length must be equal, add null for client if necessary\");\n    }\n    this.session = _session;\n    this.index = _index;\n    this.parties = _parties;\n    this.endpoints = _endpoints;\n    this.sockets = _sockets;\n    this.share = _share;\n    this.pubKey = _pubKey;\n    this.websocketOnly = _websocketOnly;\n    this.log = console.log;\n    this._consumed = false;\n    this._sLessThanHalf = true;\n    this.tssLib = _tssLib;\n    _sockets.forEach(socket => {\n      if (socket) {\n        if (socket.hasListeners(\"send\")) {\n          socket.off(\"send\");\n        }\n\n        // Add listener for incoming messages\n        socket.on(\"send\", async (data, cb) => {\n          const {\n            session,\n            sender,\n            recipient,\n            msg_type,\n            msg_data\n          } = data;\n          if (session !== this.session) {\n            this.log(`ignoring message for a different session... client session: ${this.session}, message session: ${session}`);\n            return;\n          }\n          this.msgQueue.push({\n            session,\n            sender,\n            recipient,\n            msg_type,\n            msg_data\n          });\n          if (cb) cb();\n        });\n        // Add listener for completion\n        socket.on(\"precompute_complete\", async (data, cb) => {\n          const {\n            session,\n            party\n          } = data;\n          if (session !== this.session) {\n            this.log(`ignoring message for a different session... client session: ${this.session}, message session: ${session}`);\n            return;\n          }\n          this._precomputeComplete.push(party);\n          if (cb) cb();\n        });\n        socket.on(\"precompute_failed\", async (data, cb) => {\n          const {\n            session,\n            party\n          } = data;\n          if (session !== this.session) {\n            this.log(`ignoring message for a different session... client session: ${this.session}, message session: ${session}`);\n            return;\n          }\n          this._precomputeFailed.push(party);\n          if (cb) cb();\n        });\n      }\n    });\n    globalThis.tss_clients.set(this.session, this);\n  }\n  get sid() {\n    return this.session.split(DELIMITERS.Delimiter4)[1];\n  }\n  async ready() {\n    if (this._readyResolve != null) {\n      await this._readyResolve;\n    } else {\n      throw new Error(\"Precompute needs to be called before ready\");\n    }\n\n    // ensure that there were no failures and all peers are finished\n    await new Promise((resolve, reject) => {\n      let counter = 0;\n      const timer = setInterval(() => {\n        if (this._precomputeFailed.length === 0 && this._precomputeComplete.filter((x, i, a) => a.indexOf(x) === i).length === this.parties.length && this.precomputed_value != null) {\n          clearInterval(timer);\n          this._ready = true;\n          resolve();\n        } else if (this._precomputeFailed.length > 0) {\n          reject(new Error(\"Peer failure detected, please try again\"));\n        }\n        if (counter >= 500) {\n          clearInterval(timer);\n          reject(new Error(\"Client is not ready\"));\n        }\n        counter++;\n      }, 10);\n    });\n  }\n  precompute(additionalParams) {\n    // check if sockets have connected and have an id;\n    this.sockets.forEach((socket, party) => {\n      if (socket !== null) {\n        if (socket.id === undefined) {\n          throw new Error(`socket not connected yet, session: ${this.session}, party: ${party}`);\n        }\n      }\n    });\n    const precomputePromises = [];\n    for (let i = 0; i < this.parties.length; i++) {\n      const party = this.parties[i];\n      if (party !== this.index) {\n        precomputePromises.push(new Promise((resolve, reject) => {\n          fetch(`${this.lookupEndpoint(this.session, party)}/precompute`, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              [WEB3_SESSION_HEADER_KEY]: this.sid\n            },\n            body: JSON.stringify(_objectSpread({\n              endpoints: this.endpoints.map((endpoint, j) => {\n                if (j !== this.index) {\n                  return endpoint;\n                }\n                // pass in different id for websocket connection for each server so that the server can communicate back\n                return `websocket:${this.sockets[party].id}`;\n              }),\n              session: this.session,\n              parties: this.parties,\n              player_index: party,\n              threshold: this.parties.length,\n              pubkey: this.pubKey,\n              notifyWebsocketId: this.sockets[party].id,\n              sendWebsocket: this.sockets[party].id\n            }, additionalParams))\n          }).then(async resp => {\n            const json = await resp.json();\n            if (resp.status !== 200) {\n              throw new Error(`precompute route failed on ${this.lookupEndpoint(this.session, party)} with status ${resp.status} \\n ${JSON.stringify(json)} `);\n            }\n            return resolve(resp);\n          }).catch(err => {\n            reject(err);\n          });\n        }));\n      }\n    }\n\n    // TODO: Refactor precompute to be async instead of using inline async here.\n    const setupPrecompute = async () => {\n      this._startPrecomputeTime = Date.now();\n      await Promise.all(precomputePromises);\n      this._signer = await this.tssLib.threshold_signer(this.session, this.index, this.parties.length, this.parties.length, this.share, this.pubKey);\n      this._rng = await this.tssLib.random_generator(Buffer.from(generatePrivate()).toString(\"base64\"));\n      await this.tssLib.setup(this._signer, this._rng);\n      const precomputeResult = await this.tssLib.precompute(new Uint8Array(this.parties), this._signer, this._rng);\n      this.precomputed_value = precomputeResult;\n      this._precomputeComplete.push(this.index);\n      this._consumed = false;\n      this._endPrecomputeTime = Date.now();\n    };\n    this._readyResolve = setupPrecompute().catch(e => {\n      this._precomputeFailed.push(this.index);\n      console.error(e);\n    });\n  }\n  async sign(msg, hash_only, original_message, hash_algo, additionalParams) {\n    if (this._consumed === true) {\n      throw new Error(\"This instance has already signed a message and cannot be reused\");\n    }\n    if (this._ready === false) {\n      throw new Error(\"client is not ready\");\n    }\n\n    // check message hashing\n    if (!hash_only) {\n      if (hash_algo === \"keccak256\") {\n        if (Buffer.from(keccak256(Buffer.from(original_message))).toString(\"base64\") !== msg) {\n          throw new Error(\"hash of original message does not match msg\");\n        }\n      } else {\n        throw new Error(`hash algo ${hash_algo} not supported`);\n      }\n    }\n    this._startSignTime = Date.now();\n    const sigFragments = [];\n    const fragmentPromises = [];\n    for (let i = 0; i < this.parties.length; i++) {\n      const party = i;\n      if (party === this.index) {\n        // create signature fragment for this client\n        sigFragments.push(await this.tssLib.local_sign(msg, hash_only, this.precomputed_value));\n      } else {\n        // collect signature fragment from all peers\n        fragmentPromises.push(new Promise((resolve, reject) => {\n          const endpoint = this.lookupEndpoint(this.session, party);\n          fetch(`${endpoint}/sign`, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              [WEB3_SESSION_HEADER_KEY]: this.sid\n            },\n            body: JSON.stringify(_objectSpread({\n              session: this.session,\n              sender: this.index,\n              recipient: party,\n              msg,\n              hash_only,\n              original_message,\n              hash_algo\n            }, additionalParams))\n          }).then(res => res.json()).then(res => resolve(res.sig)).catch(err => {\n            reject(err);\n          });\n        }));\n      }\n    }\n    const peerFragments = await Promise.all(fragmentPromises);\n    peerFragments.forEach(fragment => {\n      sigFragments.push(fragment);\n    });\n    const R = await this.tssLib.get_r_from_precompute(this.precomputed_value);\n    const sig = await this.tssLib.local_verify(msg, hash_only, R, sigFragments, this.pubKey);\n    this._endSignTime = Date.now();\n    const sigHex = Buffer.from(sig, \"base64\").toString(\"hex\");\n    const r = new BN(sigHex.slice(0, 64), 16);\n    let s = new BN(sigHex.slice(64), 16);\n    let recoveryParam = Buffer.from(R, \"base64\")[63] % 2;\n    if (this._sLessThanHalf) {\n      const ec = getEc();\n      const halfOfSecp256k1n = ec.n.div(new BN(2));\n      if (s.gt(halfOfSecp256k1n)) {\n        s = ec.n.sub(s);\n        recoveryParam = (recoveryParam + 1) % 2;\n      }\n    }\n    this._consumed = true;\n    this._ready = false;\n    this._readyResolve = null;\n    return {\n      r,\n      s,\n      recoveryParam\n    };\n  }\n  lookupEndpoint(session, party) {\n    if (session !== this.session) throw new Error(\"incorrect session when looking up endpoint\");\n    return this.endpoints[party];\n  }\n  async cleanup(additionalParams) {\n    // free native objects\n    this.tssLib.random_generator_free(this._rng);\n    this.tssLib.threshold_signer_free(this._signer);\n\n    // clear data for this client\n    this._precomputeComplete = [];\n    this._precomputeFailed = [];\n    this.precomputed_value = null;\n    this._endPrecomputeTime = null;\n    this._startPrecomputeTime = null;\n    this._endSignTime = null;\n    this._startSignTime = null;\n    this._consumed = false;\n    this._ready = false;\n    this._readyResolve = null;\n\n    // remove references\n    globalThis.tss_clients.delete(this.session);\n    this.sockets.forEach(soc => {\n      if (soc && soc.connected) {\n        soc.close();\n      }\n    });\n    await Promise.all(this.parties.map(async party => {\n      if (party !== this.index) {\n        await fetch(`${this.lookupEndpoint(this.session, party)}/cleanup`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            [WEB3_SESSION_HEADER_KEY]: this.sid\n          },\n          body: JSON.stringify(_objectSpread({\n            session: this.session\n          }, additionalParams))\n        });\n      }\n      return Promise.resolve(true);\n    }));\n  }\n}\n\n// TODO: This should be removed, the client should not require any local storage.\n// Client should only operate on data supplied to it.\n\nclass WebDb {\n  constructor() {\n    _defineProperty(this, \"get\", key => {\n      return new Promise(resolve => {\n        if (globalThis !== null && globalThis !== void 0 && globalThis.localStorage) {\n          // r(memoryDB[key])\n          const value = globalThis.localStorage.getItem(key);\n          resolve(value);\n        } else {\n          chrome.storage.local.get(key, result => {\n            resolve(result[key]);\n            return result;\n          });\n        }\n      });\n    });\n    _defineProperty(this, \"set\", (key, value) => {\n      return new Promise(resolve => {\n        if (globalThis !== null && globalThis !== void 0 && globalThis.localStorage) {\n          globalThis.localStorage.setItem(key, value);\n          // memoryDB[key] = value\n          resolve();\n        } else {\n          chrome.storage.local.set({\n            [key]: value\n          }, () => {\n            resolve();\n          });\n        }\n      });\n    });\n    _defineProperty(this, \"delete\", key => {\n      return new Promise(resolve => {\n        if (globalThis !== null && globalThis !== void 0 && globalThis.localStorage) {\n          // r(memoryDB[key])\n          globalThis.localStorage.removeItem(key);\n          resolve();\n        } else {\n          chrome.storage.local.remove(key);\n          resolve();\n        }\n      });\n    });\n  }\n}\nconst localStorageDB = new WebDb();\n\nexport { Client, DELIMITERS, WEB3_SESSION_HEADER_KEY, createSockets, ecPoint, generateEndpoints, getAdditiveCoeff, getDKLSCoeff, getDenormaliseCoeff, getEc, getLagrangeCoeffs, getTSSPubKey, localStorageDB, setupSockets };\n", "import _defineProperty from '@babel/runtime/helpers/defineProperty';\n\nfunction base64ToBytes(base64) {\n  const binString = atob(base64);\n  return Uint8Array.from(binString, m => m.codePointAt(0));\n}\nfunction bytesToBase64(bytes) {\n  const binString = String.fromCodePoint(...bytes);\n  return btoa(binString);\n}\n\n// MemoryManager helps with Wasm memory management. It keeps track of allocated\n// objects and can free them conveniently altogether.\nclass MemoryManager {\n  constructor() {\n    _defineProperty(this, \"items\", void 0);\n    this.items = [];\n  }\n\n  // Add object to collection.\n  add(obj) {\n    this.items.push(obj);\n    return obj;\n  }\n\n  // Free all collected objects.\n  free() {\n    this.items.forEach(e => {\n      try {\n        e.free();\n      } catch (err) {\n        console.log(`Warning: freeing value: ${err}`);\n      }\n    });\n    this.items = [];\n  }\n}\n\nexport { MemoryManager, base64ToBytes, bytesToBase64 };\n", "import { base64ToBytes, bytesToBase64, MemoryManager } from '@toruslabs/tss-frost-common';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { MapQueue } from '@toruslabs/tss-client-util';\nimport { io } from 'socket.io-client';\n\nconst READ_TIMEOUT = 10000;\nconst CONNECT_TIMEOUT = 10000;\nfunction messageKey(sender, receiver, type) {\n  return JSON.stringify([sender, receiver, type]);\n}\nclass MessageBroker {\n  constructor(session, sender) {\n    _defineProperty(this, \"session_id\", void 0);\n    _defineProperty(this, \"sender_id\", void 0);\n    _defineProperty(this, \"messages\", new MapQueue());\n    _defineProperty(this, \"sockets\", new Map());\n    this.session_id = session;\n    this.sender_id = sender;\n  }\n  getSocket(server_id) {\n    return this.sockets.get(server_id);\n  }\n\n  // Connects to the remote endpoints and populates the sockets map.\n  //\n  // If already connected, clears existing connections first.\n  async connect(ids, endpoints) {\n    if (ids.length !== endpoints.length) {\n      throw new Error(\"ids must have same length as endpoints\");\n    }\n\n    // Close existing connections.\n    this.close();\n\n    // Create sockets.\n    const sockets = endpoints.map(wsEndpoint => {\n      const url = new URL(\"socket.io\", wsEndpoint);\n      return io(url.origin, {\n        path: url.pathname,\n        transports: [\"websocket\", \"polling\"],\n        withCredentials: true,\n        reconnectionDelayMax: 10000,\n        reconnectionAttempts: 3\n      });\n    });\n\n    // Wait for sockets to be connected.\n    const proms = sockets.map(socket => {\n      return new Promise((resolve, reject) => {\n        socket.on(\"connect\", resolve);\n        setTimeout(() => {\n          reject(new Error(\"Connection timeout\"));\n        }, CONNECT_TIMEOUT);\n      });\n    });\n    await Promise.all(proms);\n\n    // Connect sockets to messaging queue and populate socket map.\n    sockets.forEach((socket, i) => {\n      // Connect to messaging queue.\n      const serverId = ids[i];\n      socket.on(\"send\", async (msg, cb) => {\n        // Check correct sender and session.\n        if (msg.sender !== serverId) {\n          console.log(`ignoring message: wrong sender: expected ${serverId}, got ${msg.sender}`);\n          return;\n        }\n        if (msg.session !== this.session_id) {\n          console.log(`ignoring message: wrong session: expected ${this.session_id}, got ${msg.session}`);\n          return;\n        }\n\n        // Push to queue.\n        const m = {\n          sender: msg.sender,\n          data: base64ToBytes(msg.msg_data),\n          receiver: msg.recipient,\n          type: msg.msg_type\n        };\n        const k = messageKey(m.sender, m.receiver, m.type);\n        this.messages.push(k, m);\n\n        // Optional callback.\n        if (cb) cb();\n      });\n\n      // Add to socket map.\n      this.sockets.set(serverId, socket);\n    });\n  }\n\n  // Closes connections and cleans up memory.\n  close() {\n    this.sockets.forEach(socket => socket.disconnect());\n    this.sockets.clear();\n  }\n  async send(to, mtype, mdata) {\n    const socket = this.sockets.get(to);\n    if (!socket) {\n      throw new Error(\"Socket not found\");\n    }\n    const msg = {\n      msg_data: bytesToBase64(mdata),\n      msg_type: mtype,\n      recipient: to,\n      sender: this.sender_id,\n      session: this.session_id\n    };\n    socket.emit(\"send_msg\", msg);\n  }\n  async receive(from, mtype) {\n    const k = messageKey(from, this.sender_id, mtype);\n    const msg = await this.messages.pop(k, READ_TIMEOUT);\n    if (!msg) {\n      throw new Error(\"Timeout\");\n    }\n    return msg.data;\n  }\n}\n\nasync function requestSign(server, session, server_id, pubkey, server_ids, server_endpoints, client_id, socket_id, msg, signatures, share_coefficient) {\n  const parties = server_ids.slice();\n  const endpoints = server_endpoints.slice().map(ep => ep.endsWith(\"/\") ? ep.slice(0, -1) : ep);\n\n  // Add client socket.\n  parties.push(client_id);\n  endpoints.push(`websocket:${socket_id.id}`);\n  const body = {\n    session,\n    msg: bytesToBase64(msg),\n    player_index: server_id,\n    pubkey,\n    parties,\n    endpoints,\n    signatures,\n    share_coefficient\n  };\n  const url = new URL(\"sign\", server);\n  const resp = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  });\n  if (!resp.ok) {\n    const errMsg = (await resp.json()).message;\n    throw new Error(errMsg);\n  }\n}\n\n// Generates a sequence of random bytes with sufficient entropy for use with a\n// cryptographic random number generator.\nfunction generateRngSeed() {\n  const buf = new Uint8Array(32);\n  crypto.getRandomValues(buf);\n  return buf;\n}\n\n// Signature as hex string.\n\n/**\n * Initiate and run the signing protocol with the designated parties.\n *\n * @param session - The signing session identifier.\n * @param signatures - The signatures used for authentication.\n * @param server_ids - The server identities. Must be equal to their share's\n * x-coordinate.\n * @param server_endpoints - The network endpoints of the servers corresponding\n * to `server_ids`.\n * @param client_index - The client identity. Must be equal to the share's\n * x-coordinate.\n * @param keyshare - The client key share.\n * @param pubkey - The public key.\n * @param msg - The message to be signed.\n * @param server_coefficients - Optional coefficients for server shares. Can be\n * used for converting between different secret sharing hierarchies.\n * @returns\n */\nasync function sign(wasmLib, session, signatures, server_ids, server_endpoints, client_index, keyshare, pubkey, msg, server_coefficients = undefined) {\n  // Create network session.\n  const mb = new MessageBroker(session, client_index);\n  await mb.connect(server_ids, server_endpoints);\n\n  // Initiate signing protocol at counterparties.\n  server_ids.forEach((p, i) => {\n    const socket = mb.getSocket(p);\n    if (socket === undefined) {\n      throw new Error(`socket not found: party ${p}`);\n    }\n    requestSign(new URL(server_endpoints[i]), session, p, pubkey, server_ids, server_endpoints, client_index, socket, msg, signatures, server_coefficients ? server_coefficients[i] : undefined).catch(error => {\n      console.error(`Server ${i}: ${error}`);\n    });\n  });\n\n  // Generate seed for RNG.\n  const seed = generateRngSeed();\n\n  // Create Wasm memory manager.\n  const mem = new MemoryManager();\n  try {\n    // Copy objects to Wasm memory.\n    const seedWasm = mem.add(new wasmLib.RngSeed(seed));\n    const keyWasm = mem.add(wasmLib.KeyShare.from_raw(client_index, keyshare, pubkey));\n\n    // Run signing protocol.\n    const sig = mem.add(await wasmLib.sign(seedWasm, mb, new Uint32Array(server_ids), keyWasm, msg));\n    return sig.to_hex();\n  } finally {\n    // Free allocated Wasm memory.\n    mem.free();\n    // Cleanup network session.\n    mb.close();\n  }\n}\n\nexport { sign };\n", "import _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { KeyType, Point, secp256k1, ONE_KEY_DELETE_NONCE, ShareStore, SHARE_DELETED } from '@tkey/common-types';\nimport { CoreError } from '@tkey/core';\nimport { ShareSerializationModule } from '@tkey/share-serialization';\nimport { TorusStorageLayer } from '@tkey/storage-layer-torus';\nimport { factorKeyCurve, lagrangeInterpolation, TSSTorusServiceProvider, TKeyTSS, getPubKeyPoint } from '@tkey/tss';\nimport { KEY_TYPE, SIGNER_MAP } from '@toruslabs/constants';\nimport { UX_MODE, AGGREGATE_VERIFIER, TORUS_METHOD } from '@toruslabs/customauth';\nimport { Ed25519Curve } from '@toruslabs/elliptic-wrapper';\nimport { fetchLocalConfig } from '@toruslabs/fnd-base';\nimport { keccak256 } from '@toruslabs/metadata-helpers';\nimport { SessionManager } from '@toruslabs/session-manager';\nimport { Torus } from '@toruslabs/torus.js';\nimport { setupSockets, getDKLSCoeff, Client } from '@toruslabs/tss-client';\nimport { sign } from '@toruslabs/tss-frost-client';\nimport BN from 'bn.js';\nimport bowser from 'bowser';\nimport { ec } from 'elliptic';\nimport { WEB3AUTH_NETWORK, ERRORS, TssShareType, VALID_SHARE_INDICES, FactorKeyTypeShareDescription, FIELD_ELEMENT_HEX_LEN, MAX_FACTORS, SOCIAL_TKEY_INDEX } from './constants.js';\nimport { AsyncStorage } from './helper/browserStorage.js';\nimport CoreKitError from './helper/errors.js';\nimport { COREKIT_STATUS } from './interfaces.js';\nimport { log, parseToken, getHashedPrivateKey, generateFactorKey, scalarBNToBufferSEC1, ed25519, generateSessionNonce, getSessionId, generateTSSEndpoints, generateEd25519Seed, sampleEndpoints, deriveShareCoefficients } from './utils.js';\n\nclass Web3AuthMPCCoreKit {\n  constructor(options) {\n    var _window;\n    _defineProperty(this, \"state\", {\n      accountIndex: 0\n    });\n    _defineProperty(this, \"torusSp\", null);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"storageLayer\", null);\n    _defineProperty(this, \"tkey\", null);\n    _defineProperty(this, \"sessionManager\", void 0);\n    _defineProperty(this, \"currentStorage\", void 0);\n    _defineProperty(this, \"_storageBaseKey\", \"corekit_store\");\n    _defineProperty(this, \"enableLogging\", false);\n    _defineProperty(this, \"ready\", false);\n    _defineProperty(this, \"_tssLib\", void 0);\n    _defineProperty(this, \"wasmLib\", void 0);\n    _defineProperty(this, \"_keyType\", void 0);\n    _defineProperty(this, \"atomicCallStackCounter\", 0);\n    _defineProperty(this, \"preSigningHook\", void 0);\n    _defineProperty(this, \"getTssFactorPub\", () => {\n      this.checkReady();\n      if (!this.state.factorKey) {\n        throw CoreKitError.factorKeyNotPresent(\"factorKey not present in state when getting tss factor public key.\");\n      }\n      const factorPubsList = this.tKey.metadata.factorPubs[this.tKey.tssTag];\n      return factorPubsList.map(factorPub => factorPub.toSEC1(factorKeyCurve, true).toString(\"hex\"));\n    });\n    if (!options.web3AuthClientId) {\n      throw CoreKitError.clientIdInvalid();\n    }\n    this._tssLib = options.tssLib;\n    this._keyType = options.tssLib.keyType;\n    const isNodejsOrRN = this.isNodejsOrRN(options.uxMode);\n    if (options.enableLogging) {\n      log.enableAll();\n      this.enableLogging = true;\n    } else log.setLevel(\"error\");\n    if (typeof options.manualSync !== \"boolean\") options.manualSync = false;\n    if (!options.web3AuthNetwork) options.web3AuthNetwork = WEB3AUTH_NETWORK.MAINNET;\n    // if sessionTime is not provided, it is defaulted to 86400\n    if (!options.sessionTime) options.sessionTime = 86400;\n    if (!options.serverTimeOffset) options.serverTimeOffset = 0;\n    if (!options.uxMode) options.uxMode = UX_MODE.REDIRECT;\n    if (!options.redirectPathName) options.redirectPathName = \"redirect\";\n    if (!options.baseUrl) options.baseUrl = isNodejsOrRN ? \"https://localhost\" : `${(_window = window) === null || _window === void 0 ? void 0 : _window.location.origin}/serviceworker`;\n    if (!options.disableHashedFactorKey) options.disableHashedFactorKey = false;\n    if (!options.hashedFactorNonce) options.hashedFactorNonce = options.web3AuthClientId;\n    if (options.disableSessionManager === undefined) options.disableSessionManager = false;\n    this.options = options;\n    this.currentStorage = new AsyncStorage(this._storageBaseKey, options.storage);\n    if (!options.disableSessionManager) {\n      this.sessionManager = new SessionManager({\n        sessionTime: options.sessionTime\n      });\n    }\n    Torus.setSessionTime(this.options.sessionTime);\n  }\n  get tKey() {\n    if (this.tkey === null) {\n      throw CoreKitError.tkeyInstanceUninitialized();\n    }\n    return this.tkey;\n  }\n  get keyType() {\n    return this._keyType;\n  }\n  get signatures() {\n    var _this$state;\n    return (_this$state = this.state) !== null && _this$state !== void 0 && _this$state.signatures ? this.state.signatures : [];\n  }\n  get _storageKey() {\n    return this._storageBaseKey;\n  }\n  get status() {\n    try {\n      // metadata will be present if tkey is initialized (1 share)\n      // if 2 shares are present, then privKey will be present after metadatakey(tkey) reconstruction\n      const {\n        tkey\n      } = this;\n      if (!tkey) return COREKIT_STATUS.NOT_INITIALIZED;\n      if (!tkey.metadata) return COREKIT_STATUS.INITIALIZED;\n      if (!tkey.secp256k1Key || !this.state.factorKey) return COREKIT_STATUS.REQUIRED_SHARE;\n      return COREKIT_STATUS.LOGGED_IN;\n    } catch (e) {}\n    return COREKIT_STATUS.NOT_INITIALIZED;\n  }\n  get sessionId() {\n    var _this$sessionManager;\n    return (_this$sessionManager = this.sessionManager) === null || _this$sessionManager === void 0 ? void 0 : _this$sessionManager.sessionId;\n  }\n  get supportsAccountIndex() {\n    return this._keyType !== KeyType.ed25519;\n  }\n  get verifier() {\n    var _this$state$userInfo, _this$state2;\n    if ((_this$state$userInfo = this.state.userInfo) !== null && _this$state$userInfo !== void 0 && _this$state$userInfo.aggregateVerifier) {\n      return this.state.userInfo.aggregateVerifier;\n    }\n    return (_this$state2 = this.state) !== null && _this$state2 !== void 0 && (_this$state2 = _this$state2.userInfo) !== null && _this$state2 !== void 0 && _this$state2.verifier ? this.state.userInfo.verifier : \"\";\n  }\n  get verifierId() {\n    var _this$state3;\n    return (_this$state3 = this.state) !== null && _this$state3 !== void 0 && (_this$state3 = _this$state3.userInfo) !== null && _this$state3 !== void 0 && _this$state3.verifierId ? this.state.userInfo.verifierId : \"\";\n  }\n  get isRedirectMode() {\n    return this.options.uxMode === UX_MODE.REDIRECT;\n  }\n  get useClientGeneratedTSSKey() {\n    return this.keyType === KeyType.ed25519 && this.options.useClientGeneratedTSSKey === undefined ? true : !!this.options.useClientGeneratedTSSKey;\n  }\n\n  // RecoverTssKey only valid for user that enable MFA where user has 2 type shares :\n  // TssShareType.DEVICE and TssShareType.RECOVERY\n  // if the factors key provided is the same type recovery will not works\n  async _UNSAFE_recoverTssKey(factorKey) {\n    this.checkReady();\n    const factorKeyBN = new BN(factorKey[0], \"hex\");\n    const shareStore0 = await this.getFactorKeyMetadata(factorKeyBN);\n    await this.tKey.initialize({\n      withShare: shareStore0\n    });\n    const tssShares = [];\n    const tssIndexes = [];\n    const tssIndexesBN = [];\n    for (let i = 0; i < factorKey.length; i++) {\n      const factorKeyBNInput = new BN(factorKey[i], \"hex\");\n      const {\n        tssIndex,\n        tssShare\n      } = await this.tKey.getTSSShare(factorKeyBNInput);\n      if (tssIndexes.includes(tssIndex)) {\n        // reset instance before throw error\n        await this.init();\n        throw CoreKitError.duplicateTssIndex();\n      }\n      tssIndexes.push(tssIndex);\n      tssIndexesBN.push(new BN(tssIndex));\n      tssShares.push(tssShare);\n    }\n    const finalKey = lagrangeInterpolation(this.tkey.tssCurve, tssShares, tssIndexesBN);\n    // reset instance after recovery completed\n    await this.init();\n    return finalKey.toString(\"hex\", 64);\n  }\n  async init(params = {\n    handleRedirectResult: true\n  }) {\n    var _window2, _window3;\n    this.resetState();\n    if (params.rehydrate === undefined) params.rehydrate = true;\n    const nodeDetails = fetchLocalConfig(this.options.web3AuthNetwork, this.keyType);\n    if (this.keyType === KEY_TYPE.ED25519 && this.options.useDKG) {\n      throw CoreKitError.invalidConfig(\"DKG is not supported for ed25519 key type\");\n    }\n    this.torusSp = new TSSTorusServiceProvider({\n      customAuthArgs: {\n        web3AuthClientId: this.options.web3AuthClientId,\n        baseUrl: this.options.baseUrl,\n        uxMode: this.isNodejsOrRN(this.options.uxMode) ? UX_MODE.REDIRECT : this.options.uxMode,\n        network: this.options.web3AuthNetwork,\n        redirectPathName: this.options.redirectPathName,\n        locationReplaceOnRedirect: true,\n        serverTimeOffset: this.options.serverTimeOffset,\n        keyType: this.keyType,\n        useDkg: this.options.useDKG\n      }\n    });\n    this.storageLayer = new TorusStorageLayer({\n      hostUrl: `${new URL(nodeDetails.torusNodeEndpoints[0]).origin}/metadata`,\n      enableLogging: this.enableLogging\n    });\n    const shareSerializationModule = new ShareSerializationModule();\n    this.tkey = new TKeyTSS({\n      enableLogging: this.enableLogging,\n      serviceProvider: this.torusSp,\n      storageLayer: this.storageLayer,\n      manualSync: this.options.manualSync,\n      modules: {\n        shareSerialization: shareSerializationModule\n      },\n      tssKeyType: this.keyType\n    });\n    if (this.isRedirectMode) {\n      await this.torusSp.init({\n        skipSw: true,\n        skipPrefetch: true\n      });\n    } else if (this.options.uxMode === UX_MODE.POPUP) {\n      await this.torusSp.init({});\n    }\n    this.ready = true;\n\n    // try handle redirect flow if enabled and return(redirect) from oauth login\n    if (params.handleRedirectResult && this.options.uxMode === UX_MODE.REDIRECT && ((_window2 = window) !== null && _window2 !== void 0 && _window2.location.hash.includes(\"#state\") || (_window3 = window) !== null && _window3 !== void 0 && _window3.location.hash.includes(\"#access_token\"))) {\n      // on failed redirect, instance is reseted.\n      // skip check feature gating on redirection as it was check before login\n      await this.handleRedirectResult();\n\n      // return early on successful redirect, the rest of the code will not be executed\n      return;\n    } else if (params.rehydrate && this.sessionManager) {\n      // if not redirect flow try to rehydrate session if available\n      const sessionId = await this.currentStorage.get(\"sessionId\");\n      if (sessionId) {\n        this.sessionManager.sessionId = sessionId;\n\n        // swallowed, should not throw on rehydrate timed out session\n        const sessionResult = await this.sessionManager.authorizeSession().catch(async err => {\n          log.error(\"rehydrate session error\", err);\n        });\n\n        // try rehydrate session\n        if (sessionResult) {\n          await this.rehydrateSession(sessionResult);\n\n          // return early on success rehydration\n          return;\n        }\n      }\n    }\n    // feature gating if not redirect flow or session rehydration\n    await this.featureRequest();\n  }\n  async loginWithOAuth(params) {\n    this.checkReady();\n    if (this.isNodejsOrRN(this.options.uxMode)) {\n      throw CoreKitError.oauthLoginUnsupported(`Oauth login is NOT supported in ${this.options.uxMode} mode.`);\n    }\n    const {\n      importTssKey,\n      registerExistingSFAKey\n    } = params;\n    const tkeyServiceProvider = this.torusSp;\n    if (registerExistingSFAKey && importTssKey) {\n      throw CoreKitError.invalidConfig(\"Cannot import TSS key and register SFA key at the same time.\");\n    }\n    if (this.isRedirectMode && (importTssKey || registerExistingSFAKey)) {\n      throw CoreKitError.invalidConfig(\"key import is not supported in redirect mode\");\n    }\n    try {\n      // oAuth login.\n      const verifierParams = params;\n      const aggregateParams = params;\n      let loginResponse;\n      if (verifierParams.subVerifierDetails) {\n        var _loginResponse$nodesD;\n        // single verifier login.\n        loginResponse = await tkeyServiceProvider.triggerLogin(params.subVerifierDetails);\n        if (this.isRedirectMode) return;\n        this.updateState({\n          postBoxKey: this._getPostBoxKey(loginResponse),\n          postboxKeyNodeIndexes: (_loginResponse$nodesD = loginResponse.nodesData) === null || _loginResponse$nodesD === void 0 ? void 0 : _loginResponse$nodesD.nodeIndexes,\n          userInfo: loginResponse.userInfo,\n          signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData)\n        });\n      } else if (aggregateParams.subVerifierDetailsArray) {\n        var _loginResponse$nodesD2;\n        loginResponse = await tkeyServiceProvider.triggerAggregateLogin({\n          aggregateVerifierType: aggregateParams.aggregateVerifierType || AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID,\n          verifierIdentifier: aggregateParams.aggregateVerifierIdentifier,\n          subVerifierDetailsArray: aggregateParams.subVerifierDetailsArray\n        });\n        if (this.isRedirectMode) return;\n        this.updateState({\n          postBoxKey: this._getPostBoxKey(loginResponse),\n          postboxKeyNodeIndexes: (_loginResponse$nodesD2 = loginResponse.nodesData) === null || _loginResponse$nodesD2 === void 0 ? void 0 : _loginResponse$nodesD2.nodeIndexes,\n          userInfo: loginResponse.userInfo[0],\n          signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData)\n        });\n      }\n      if (loginResponse && registerExistingSFAKey && loginResponse.finalKeyData.privKey) {\n        if (loginResponse.metadata.typeOfUser === \"v1\") {\n          throw CoreKitError.invalidConfig(\"Cannot register existing SFA key for v1 users, please contact web3auth support.\");\n        }\n        const existingSFAKey = loginResponse.finalKeyData.privKey.padStart(64, \"0\");\n        await this.setupTkey(existingSFAKey, loginResponse, true);\n      } else {\n        await this.setupTkey(importTssKey, loginResponse, false);\n      }\n    } catch (err) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) {\n          throw CoreKitError.default(ERRORS.TKEY_SHARES_REQUIRED);\n        }\n      }\n      throw CoreKitError.default(err.message);\n    }\n  }\n  async loginWithJWT(params) {\n    this.checkReady();\n    const {\n      prefetchTssPublicKeys = 1\n    } = params;\n    if (prefetchTssPublicKeys > 3) {\n      throw CoreKitError.prefetchValueExceeded(`The prefetch value '${prefetchTssPublicKeys}' exceeds the maximum allowed limit of 3.`);\n    }\n    const {\n      verifier,\n      verifierId,\n      idToken,\n      importTssKey,\n      registerExistingSFAKey\n    } = params;\n    this.torusSp.verifierName = verifier;\n    this.torusSp.verifierId = verifierId;\n    if (registerExistingSFAKey && importTssKey) {\n      throw CoreKitError.invalidConfig(\"Cannot import TSS key and register SFA key at the same time.\");\n    }\n    try {\n      var _loginResponse$nodesD3;\n      // prefetch tss pub keys.\n      const prefetchTssPubs = [];\n      for (let i = 0; i < prefetchTssPublicKeys; i++) {\n        prefetchTssPubs.push(this.torusSp.getTSSPubKey(this.tkey.tssTag, i));\n      }\n\n      // get postbox key.\n      let loginPromise;\n      if (!params.subVerifier) {\n        // single verifier login.\n        loginPromise = this.torusSp.customAuthInstance.getTorusKey(verifier, verifierId, {\n          verifier_id: verifierId\n        }, idToken, _objectSpread(_objectSpread({}, params.extraVerifierParams), params.additionalParams));\n      } else {\n        // aggregate verifier login\n        loginPromise = this.torusSp.customAuthInstance.getAggregateTorusKey(verifier, verifierId, [{\n          verifier: params.subVerifier,\n          idToken,\n          extraVerifierParams: params.extraVerifierParams\n        }]);\n      }\n\n      // wait for prefetch completed before setup tkey\n      const [loginResponse] = await Promise.all([loginPromise, ...prefetchTssPubs]);\n      const postBoxKey = this._getPostBoxKey(loginResponse);\n      this.torusSp.postboxKey = new BN(postBoxKey, \"hex\");\n      this.updateState({\n        postBoxKey,\n        postboxKeyNodeIndexes: ((_loginResponse$nodesD3 = loginResponse.nodesData) === null || _loginResponse$nodesD3 === void 0 ? void 0 : _loginResponse$nodesD3.nodeIndexes) || [],\n        userInfo: _objectSpread(_objectSpread({}, parseToken(idToken)), {}, {\n          verifier,\n          verifierId\n        }),\n        signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData)\n      });\n      if (registerExistingSFAKey && loginResponse.finalKeyData.privKey) {\n        if (loginResponse.metadata.typeOfUser === \"v1\") {\n          throw CoreKitError.invalidConfig(\"Cannot register existing SFA key for v1 users, please contact web3auth support.\");\n        }\n        const existingSFAKey = loginResponse.finalKeyData.privKey.padStart(64, \"0\");\n        await this.setupTkey(existingSFAKey, loginResponse, true);\n      } else {\n        await this.setupTkey(importTssKey, loginResponse, false);\n      }\n    } catch (err) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) {\n          const newError = CoreKitError.default(ERRORS.TKEY_SHARES_REQUIRED);\n          newError.stack = err.stack;\n          throw newError;\n        }\n      }\n      const newError = CoreKitError.default(err.message);\n      newError.stack = err.stack;\n      throw newError;\n    }\n  }\n  setPreSigningHook(preSigningHook) {\n    this.preSigningHook = preSigningHook;\n  }\n  async handleRedirectResult() {\n    this.checkReady();\n    try {\n      const result = await this.torusSp.customAuthInstance.getRedirectResult();\n      let loginResponse;\n      if (result.method === TORUS_METHOD.TRIGGER_LOGIN) {\n        var _loginResponse$nodesD4;\n        loginResponse = result.result;\n        if (!loginResponse) {\n          throw CoreKitError.invalidTorusLoginResponse();\n        }\n        this.updateState({\n          postBoxKey: this._getPostBoxKey(loginResponse),\n          postboxKeyNodeIndexes: ((_loginResponse$nodesD4 = loginResponse.nodesData) === null || _loginResponse$nodesD4 === void 0 ? void 0 : _loginResponse$nodesD4.nodeIndexes) || [],\n          userInfo: loginResponse.userInfo,\n          signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData)\n        });\n        const userInfo = this.getUserInfo();\n        this.torusSp.verifierName = userInfo.verifier;\n      } else if (result.method === TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN) {\n        var _loginResponse$nodesD5;\n        loginResponse = result.result;\n        if (!loginResponse) {\n          throw CoreKitError.invalidTorusAggregateLoginResponse();\n        }\n        this.updateState({\n          postBoxKey: this._getPostBoxKey(loginResponse),\n          postboxKeyNodeIndexes: ((_loginResponse$nodesD5 = loginResponse.nodesData) === null || _loginResponse$nodesD5 === void 0 ? void 0 : _loginResponse$nodesD5.nodeIndexes) || [],\n          userInfo: loginResponse.userInfo[0],\n          signatures: this._getSignatures(loginResponse.sessionData.sessionTokenData)\n        });\n        const userInfo = this.getUserInfo();\n        this.torusSp.verifierName = userInfo.aggregateVerifier;\n      } else {\n        throw CoreKitError.unsupportedRedirectMethod();\n      }\n      const userInfo = this.getUserInfo();\n      if (!this.state.postBoxKey) {\n        throw CoreKitError.postBoxKeyMissing(\"postBoxKey not present in state after processing redirect result.\");\n      }\n      this.torusSp.postboxKey = new BN(this.state.postBoxKey, \"hex\");\n      this.torusSp.verifierId = userInfo.verifierId;\n      await this.setupTkey();\n    } catch (error) {\n      this.resetState();\n      log.error(\"error while handling redirect result\", error);\n      throw CoreKitError.default(error.message);\n    }\n  }\n  async inputFactorKey(factorKey) {\n    this.checkReady();\n    try {\n      // input tkey device share when required share > 0 ( or not reconstructed )\n      // assumption tkey shares will not changed\n      if (!this.tKey.secp256k1Key) {\n        var _this$tkey$metadata$f;\n        const factorKeyPrivate = factorKeyCurve.keyFromPrivate(factorKey.toBuffer());\n        const factorPubX = factorKeyPrivate.getPublic().getX().toString(\"hex\").padStart(64, \"0\");\n        const factorEncExist = (_this$tkey$metadata$f = this.tkey.metadata.factorEncs) === null || _this$tkey$metadata$f === void 0 || (_this$tkey$metadata$f = _this$tkey$metadata$f[this.tkey.tssTag]) === null || _this$tkey$metadata$f === void 0 ? void 0 : _this$tkey$metadata$f[factorPubX];\n        if (!factorEncExist) {\n          throw CoreKitError.providedFactorKeyInvalid(\"Invalid FactorKey provided. Failed to input factor key.\");\n        }\n        const factorKeyMetadata = await this.getFactorKeyMetadata(factorKey);\n        await this.tKey.inputShareStoreSafe(factorKeyMetadata, true);\n      }\n\n      // Finalize initialization.\n      await this.tKey.reconstructKey();\n      await this.finalizeTkey(factorKey);\n    } catch (err) {\n      log.error(\"login error\", err);\n      if (err instanceof CoreError) {\n        if (err.code === 1302) {\n          throw CoreKitError.default(ERRORS.TKEY_SHARES_REQUIRED);\n        }\n      }\n      throw CoreKitError.default(err.message);\n    }\n  }\n  setTssWalletIndex(accountIndex) {\n    this.updateState({\n      tssPubKey: this.tKey.getTSSPub(accountIndex).toSEC1(this.tkey.tssCurve, false),\n      accountIndex\n    });\n  }\n  getCurrentFactorKey() {\n    this.checkReady();\n    if (!this.state.factorKey) {\n      throw CoreKitError.factorKeyNotPresent(\"factorKey not present in state when getting current factor key.\");\n    }\n    if (!this.state.tssShareIndex) {\n      throw CoreKitError.tssShareTypeIndexMissing(\"TSS Share Type (Index) not present in state when getting current factor key.\");\n    }\n    try {\n      return {\n        factorKey: this.state.factorKey,\n        shareType: this.state.tssShareIndex\n      };\n    } catch (err) {\n      log.error(\"state error\", err);\n      throw CoreKitError.default(err.message);\n    }\n  }\n  async enableMFA(enableMFAParams, recoveryFactor = true) {\n    this.checkReady();\n    const {\n      postBoxKey\n    } = this.state;\n    const hashedFactorKey = getHashedPrivateKey(postBoxKey, this.options.hashedFactorNonce);\n    if (!(await this.checkIfFactorKeyValid(hashedFactorKey))) {\n      if (this.tKey._localMetadataTransitions[0].length) {\n        throw CoreKitError.commitChangesBeforeMFA();\n      }\n      throw CoreKitError.mfaAlreadyEnabled();\n    }\n    return this.atomicSync(async () => {\n      let browserData;\n      if (this.isNodejsOrRN(this.options.uxMode)) {\n        browserData = {\n          browserName: \"Node Env\",\n          browserVersion: \"\",\n          deviceName: \"nodejs\"\n        };\n      } else {\n        // try {\n        const browserInfo = bowser.parse(navigator.userAgent);\n        const browserName = `${browserInfo.browser.name}`;\n        browserData = {\n          browserName,\n          browserVersion: browserInfo.browser.version,\n          deviceName: browserInfo.os.name\n        };\n      }\n      const deviceFactorKey = new BN(await this.createFactor({\n        shareType: TssShareType.DEVICE,\n        additionalMetadata: browserData\n      }), \"hex\");\n      await this.setDeviceFactor(deviceFactorKey);\n      await this.inputFactorKey(new BN(deviceFactorKey, \"hex\"));\n      const hashedFactorPub = getPubKeyPoint(hashedFactorKey, factorKeyCurve);\n      await this.deleteFactor(hashedFactorPub, hashedFactorKey);\n      await this.deleteMetadataShareBackup(hashedFactorKey);\n\n      // only recovery factor = true\n      let backupFactorKey;\n      if (recoveryFactor) {\n        backupFactorKey = await this.createFactor(_objectSpread({\n          shareType: TssShareType.RECOVERY\n        }, enableMFAParams));\n      }\n\n      // update to undefined for next major release\n      return backupFactorKey;\n    }).catch(reason => {\n      log.error(\"error enabling MFA:\", reason.message);\n      const err = CoreKitError.default(reason.message);\n      err.stack = reason.stack;\n      throw err;\n    });\n  }\n  // mutation function\n  async createFactor(createFactorParams) {\n    this.checkReady();\n    const {\n      shareType\n    } = createFactorParams;\n    let {\n      factorKey,\n      shareDescription,\n      additionalMetadata\n    } = createFactorParams;\n    if (!VALID_SHARE_INDICES.includes(shareType)) {\n      throw CoreKitError.newShareIndexInvalid(`Invalid share type provided (${shareType}). Valid share types are ${VALID_SHARE_INDICES}.`);\n    }\n    if (!factorKey) {\n      factorKey = generateFactorKey().private;\n    }\n    if (!shareDescription) {\n      shareDescription = FactorKeyTypeShareDescription.Other;\n    }\n    if (!additionalMetadata) {\n      additionalMetadata = {};\n    }\n    const factorPub = getPubKeyPoint(factorKey, factorKeyCurve);\n    if (this.getTssFactorPub().includes(factorPub.toSEC1(factorKeyCurve, true).toString(\"hex\"))) {\n      throw CoreKitError.factorKeyAlreadyExists();\n    }\n    return this.atomicSync(async () => {\n      await this.copyOrCreateShare(shareType, factorPub);\n      await this.backupMetadataShare(factorKey);\n      await this.addFactorDescription({\n        factorKey,\n        shareDescription,\n        additionalMetadata,\n        updateMetadata: false\n      });\n      return scalarBNToBufferSEC1(factorKey).toString(\"hex\");\n    }).catch(reason => {\n      log.error(\"error creating factor:\", reason.message);\n      const err = CoreKitError.default(`error creating factor: ${reason.message}`);\n      err.stack = reason.stack;\n      throw err;\n    });\n  }\n\n  /**\n   * Get public key point in SEC1 format.\n   */\n  getPubKey() {\n    const {\n      tssPubKey\n    } = this.state;\n    return Buffer.from(tssPubKey);\n  }\n\n  /**\n   * Get public key point.\n   */\n  getPubKeyPoint() {\n    const {\n      tssPubKey\n    } = this.state;\n    return Point.fromSEC1(this.tkey.tssCurve, tssPubKey.toString(\"hex\"));\n  }\n\n  /**\n   * Get public key in ed25519 format.\n   *\n   * Throws an error if keytype is not compatible with ed25519.\n   */\n  getPubKeyEd25519() {\n    const p = this.tkey.tssCurve.keyFromPublic(this.getPubKey()).getPublic();\n    return ed25519().keyFromPublic(p).getPublic();\n  }\n  async precompute_secp256k1() {\n    this.wasmLib = await this.loadTssWasm();\n    // PreSetup\n    const {\n      tssShareIndex\n    } = this.state;\n    const tssPubKey = this.getPubKeyPoint();\n    const {\n      torusNodeTSSEndpoints\n    } = fetchLocalConfig(this.options.web3AuthNetwork, this.keyType);\n    if (!this.state.factorKey) {\n      throw CoreKitError.factorKeyNotPresent(\"factorKey not present in state when signing.\");\n    }\n    const {\n      tssShare\n    } = await this.tKey.getTSSShare(this.state.factorKey, {\n      accountIndex: 0\n    });\n    const tssNonce = this.getTssNonce();\n    if (!tssPubKey || !torusNodeTSSEndpoints) {\n      throw CoreKitError.tssPublicKeyOrEndpointsMissing();\n    }\n\n    // session is needed for authentication to the web3auth infrastructure holding the factor 1\n    const randomSessionNonce = generateSessionNonce();\n    const currentSession = getSessionId(this.verifier, this.verifierId, this.tKey.tssTag, tssNonce, randomSessionNonce);\n    const parties = 4;\n    const clientIndex = parties - 1;\n    // 1. setup\n    // generate endpoints for servers\n    const {\n      nodeIndexes\n    } = await this.torusSp.getTSSPubKey(this.tKey.tssTag, this.tKey.metadata.tssNonces[this.tKey.tssTag]);\n    const {\n      endpoints,\n      tssWSEndpoints,\n      partyIndexes,\n      nodeIndexesReturned: participatingServerDKGIndexes\n    } = generateTSSEndpoints(torusNodeTSSEndpoints, parties, clientIndex, nodeIndexes);\n\n    // Setup sockets.\n    const sockets = await setupSockets(tssWSEndpoints, randomSessionNonce);\n    const dklsCoeff = getDKLSCoeff(true, participatingServerDKGIndexes, tssShareIndex);\n    const denormalisedShare = dklsCoeff.mul(tssShare).umod(secp256k1.curve.n);\n    const accountNonce = this.tkey.computeAccountNonce(this.state.accountIndex);\n    const derivedShare = denormalisedShare.add(accountNonce).umod(secp256k1.curve.n);\n    const share = scalarBNToBufferSEC1(derivedShare).toString(\"base64\");\n    if (!currentSession) {\n      throw CoreKitError.activeSessionNotFound();\n    }\n    const {\n      signatures\n    } = this;\n    if (!signatures) {\n      throw CoreKitError.signaturesNotPresent();\n    }\n\n    // Client lib expects pub key in XY-format, base64-encoded.\n    const tssPubKeyBase64 = Buffer.from(tssPubKey.toSEC1(secp256k1).subarray(1)).toString(\"base64\");\n    const client = new Client(currentSession, clientIndex, partyIndexes, endpoints, sockets, share, tssPubKeyBase64, true, this.wasmLib);\n    const serverCoeffs = {};\n    for (let i = 0; i < participatingServerDKGIndexes.length; i++) {\n      const serverIndex = participatingServerDKGIndexes[i];\n      serverCoeffs[serverIndex] = getDKLSCoeff(false, participatingServerDKGIndexes, tssShareIndex, serverIndex).toString(\"hex\");\n    }\n    client.precompute({\n      signatures,\n      server_coeffs: serverCoeffs,\n      nonce: scalarBNToBufferSEC1(this.getAccountNonce()).toString(\"base64\")\n    });\n    await client.ready().catch(err => {\n      client.cleanup({\n        signatures,\n        server_coeffs: serverCoeffs\n      });\n      throw err;\n    });\n    return {\n      client,\n      serverCoeffs\n    };\n  }\n  async sign(data, hashed = false, secp256k1Precompute) {\n    if (this.preSigningHook) {\n      const result = await this.preSigningHook({\n        data: Uint8Array.from(data),\n        hashed\n      });\n      if (!result.success || result.error) {\n        throw Error(result.error || \"preSigningValidator failed\");\n      }\n    }\n    this.wasmLib = await this.loadTssWasm();\n    if (this.keyType === KeyType.secp256k1) {\n      const sig = await this.sign_ECDSA_secp256k1(data, hashed, secp256k1Precompute);\n      return Buffer.concat([sig.r, sig.s, Buffer.from([sig.v])]);\n    } else if (this.keyType === KeyType.ed25519) {\n      return this.sign_ed25519(data, hashed);\n    }\n    throw CoreKitError.default(`sign not supported for key type ${this.keyType}`);\n  }\n\n  // mutation function\n  async deleteFactor(factorPub, factorKey) {\n    if (!this.state.factorKey) {\n      throw CoreKitError.factorKeyNotPresent(\"factorKey not present in state when deleting a factor.\");\n    }\n    if (!this.tKey.metadata.factorPubs) {\n      throw CoreKitError.factorPubsMissing();\n    }\n    await this.atomicSync(async () => {\n      const remainingFactors = this.tKey.metadata.factorPubs[this.tKey.tssTag].length || 0;\n      if (remainingFactors <= 1) {\n        throw CoreKitError.cannotDeleteLastFactor(\"Cannot delete last factor\");\n      }\n      const fpp = factorPub;\n      const stateFpp = getPubKeyPoint(this.state.factorKey, factorKeyCurve);\n      if (fpp.equals(stateFpp)) {\n        throw CoreKitError.factorInUseCannotBeDeleted(\"Cannot delete current active factor\");\n      }\n      await this.tKey.deleteFactorPub({\n        factorKey: this.state.factorKey,\n        deleteFactorPub: factorPub,\n        authSignatures: this.signatures\n      });\n      const factorPubHex = fpp.toSEC1(factorKeyCurve, true).toString(\"hex\");\n      const allDesc = this.tKey.metadata.getShareDescription();\n      const keyDesc = allDesc[factorPubHex];\n      if (keyDesc) {\n        await Promise.all(keyDesc.map(async desc => {\n          var _this$tKey;\n          return (_this$tKey = this.tKey) === null || _this$tKey === void 0 ? void 0 : _this$tKey.metadata.deleteShareDescription(factorPubHex, desc);\n        }));\n      }\n\n      // delete factorKey share metadata if factorkey is provided\n      if (factorKey) {\n        const factorKeyBN = new BN(factorKey, \"hex\");\n        const derivedFactorPub = getPubKeyPoint(factorKeyBN, factorKeyCurve);\n        // only delete if factorPub matches\n        if (derivedFactorPub.equals(fpp)) {\n          await this.deleteMetadataShareBackup(factorKeyBN);\n        }\n      }\n    });\n  }\n  async logout() {\n    var _this$sessionManager2;\n    if ((_this$sessionManager2 = this.sessionManager) !== null && _this$sessionManager2 !== void 0 && _this$sessionManager2.sessionId) {\n      await this.sessionManager.invalidateSession();\n    }\n    // to accommodate async storage\n    await this.currentStorage.set(\"sessionId\", \"\");\n    this.resetState();\n    await this.init({\n      handleRedirectResult: false,\n      rehydrate: false\n    });\n  }\n  getUserInfo() {\n    if (!this.state.userInfo) {\n      throw CoreKitError.userNotLoggedIn();\n    }\n    return this.state.userInfo;\n  }\n  getKeyDetails() {\n    this.checkReady();\n    const tkeyDetails = this.tKey.getKeyDetails();\n    const tssPubKey = this.state.tssPubKey ? Point.fromSEC1(this.tkey.tssCurve, this.state.tssPubKey.toString(\"hex\")) : undefined;\n    const factors = this.tKey.metadata.factorPubs ? this.tKey.metadata.factorPubs[this.tKey.tssTag] : [];\n    const keyDetails = {\n      // use tkey's for now\n      requiredFactors: tkeyDetails.requiredShares,\n      threshold: tkeyDetails.threshold,\n      totalFactors: factors.length + 1,\n      shareDescriptions: this.tKey.getMetadata().getShareDescription(),\n      metadataPubKey: tkeyDetails.pubKey,\n      tssPubKey,\n      keyType: this.keyType\n    };\n    return keyDetails;\n  }\n  async commitChanges() {\n    this.checkReady();\n    if (!this.state.factorKey) {\n      throw CoreKitError.factorKeyNotPresent(\"factorKey not present in state when committing changes.\");\n    }\n    try {\n      // in case for manualsync = true, _syncShareMetadata will not call syncLocalMetadataTransitions()\n      // it will not create a new LocalMetadataTransition\n      // manual call syncLocalMetadataTransitions() required to sync local transitions to storage\n      await this.tKey._syncShareMetadata();\n      await this.tKey.syncLocalMetadataTransitions();\n    } catch (error) {\n      log.error(\"sync metadata error\", error);\n      throw error;\n    }\n  }\n  async setManualSync(manualSync) {\n    this.checkReady();\n    // sync local transistion to storage before allow changes\n    await this.tKey.syncLocalMetadataTransitions();\n    this.options.manualSync = manualSync;\n    this.tKey.manualSync = manualSync;\n  }\n\n  // device factor\n  async setDeviceFactor(factorKey, replace = false) {\n    if (!replace) {\n      const existingFactor = await this.getDeviceFactor();\n      if (existingFactor) {\n        throw CoreKitError.default(\"Device factor already exists\");\n      }\n    }\n    const metadata = this.tKey.getMetadata();\n    const tkeyPubX = metadata.pubKey.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n    await this.currentStorage.set(tkeyPubX, JSON.stringify({\n      factorKey: factorKey.toString(\"hex\").padStart(64, \"0\")\n    }));\n  }\n  async getDeviceFactor() {\n    const metadata = this.tKey.getMetadata();\n    const tkeyPubX = metadata.pubKey.x.toString(16, FIELD_ELEMENT_HEX_LEN);\n    const tKeyLocalStoreString = await this.currentStorage.get(tkeyPubX);\n    const tKeyLocalStore = JSON.parse(tKeyLocalStoreString || \"{}\");\n    return tKeyLocalStore.factorKey;\n  }\n\n  /**\n   * WARNING: Use with caution. This will export the private signing key.\n   *\n   * Exports the private key scalar for the current account index.\n   *\n   * For keytype ed25519, consider using _UNSAFE_exportTssEd25519Seed.\n   */\n  async _UNSAFE_exportTssKey() {\n    if (this.keyType !== KeyType.secp256k1) {\n      throw CoreKitError.default(\"Wrong KeyType. Method can only be used when KeyType is secp256k1\");\n    }\n    if (!this.state.factorKey) {\n      throw CoreKitError.factorKeyNotPresent(\"factorKey not present in state when exporting tss key.\");\n    }\n    if (!this.state.signatures) {\n      throw CoreKitError.signaturesNotPresent(\"Signatures not present in state when exporting tss key.\");\n    }\n    const exportTssKey0 = await this.tKey._UNSAFE_exportTssKey({\n      factorKey: this.state.factorKey,\n      authSignatures: this.state.signatures\n    });\n    const accountNonce = this.getAccountNonce();\n    const tssKey = exportTssKey0.add(accountNonce).umod(this.tKey.tssCurve.n);\n    return tssKey.toString(\"hex\", FIELD_ELEMENT_HEX_LEN);\n  }\n\n  /**\n   * WARNING: Use with caution. This will export the private signing key.\n   *\n   * Attempts to export the ed25519 private key seed. Only works if import key\n   * flow has been used.\n   */\n  async _UNSAFE_exportTssEd25519Seed() {\n    if (this.keyType !== KeyType.ed25519) {\n      throw CoreKitError.default(\"Wrong KeyType. Method can only be used when KeyType is ed25519\");\n    }\n    if (!this.state.factorKey) throw CoreKitError.factorKeyNotPresent(\"factorKey not present in state when exporting tss ed25519 seed.\");\n    if (!this.state.signatures) throw CoreKitError.signaturesNotPresent(\"Signatures not present in state when exporting tss ed25519 seed.\");\n    try {\n      const exportEd25519Seed = await this.tKey._UNSAFE_exportTssEd25519Seed({\n        factorKey: this.state.factorKey,\n        authSignatures: this.state.signatures\n      });\n      return exportEd25519Seed;\n    } catch (error) {\n      throw CoreKitError.default(`Error exporting ed25519 seed: ${error}`);\n    }\n  }\n  updateState(newState) {\n    this.state = _objectSpread(_objectSpread({}, this.state), newState);\n  }\n  async atomicSync(f) {\n    this.atomicCallStackCounter += 1;\n    this.tkey.manualSync = true;\n    try {\n      const r = await f();\n      if (this.atomicCallStackCounter === 1) {\n        if (!this.options.manualSync) {\n          await this.commitChanges();\n        }\n      }\n      return r;\n    } catch (error) {\n      throw error;\n    } finally {\n      this.atomicCallStackCounter -= 1;\n      if (this.atomicCallStackCounter === 0) {\n        this.tkey.manualSync = this.options.manualSync;\n      }\n    }\n  }\n  async importTssKey(tssKey, factorPub, newTSSIndex = TssShareType.DEVICE) {\n    if (!this.state.signatures) {\n      throw CoreKitError.signaturesNotPresent(\"Signatures not present in state when importing tss key.\");\n    }\n    await this.tKey.importTssKey({\n      tag: this.tKey.tssTag,\n      importKey: Buffer.from(tssKey, \"hex\"),\n      factorPub,\n      newTSSIndex\n    }, {\n      authSignatures: this.state.signatures\n    });\n  }\n  getTssNonce() {\n    if (!this.tKey.metadata.tssNonces || this.tKey.metadata.tssNonces[this.tKey.tssTag] === undefined) {\n      throw CoreKitError.tssNoncesMissing(`tssNonce not present for tag ${this.tKey.tssTag}`);\n    }\n    const tssNonce = this.tKey.metadata.tssNonces[this.tKey.tssTag];\n    return tssNonce;\n  }\n  async setupTkey(providedImportKey, sfaLoginResponse, importingSFAKey) {\n    if (importingSFAKey && !sfaLoginResponse) {\n      throw CoreKitError.default(\"SFA key registration requires SFA login response\");\n    }\n    if (!this.state.postBoxKey) {\n      throw CoreKitError.userNotLoggedIn();\n    }\n    const existingUser = await this.isMetadataPresent(this.state.postBoxKey);\n    let importKey = providedImportKey;\n    if (!existingUser) {\n      if (!importKey && this.useClientGeneratedTSSKey) {\n        if (this.keyType === KeyType.ed25519) {\n          const k = generateEd25519Seed();\n          importKey = k.toString(\"hex\");\n        } else if (this.keyType === KeyType.secp256k1) {\n          const k = secp256k1.genKeyPair().getPrivate();\n          importKey = scalarBNToBufferSEC1(k).toString(\"hex\");\n        } else {\n          throw CoreKitError.default(\"Unsupported key type\");\n        }\n      }\n      if (importingSFAKey && sfaLoginResponse && sfaLoginResponse.metadata.upgraded) {\n        throw CoreKitError.default(\"SFA key registration is not allowed for already upgraded users\");\n      }\n      await this.handleNewUser(importKey, importingSFAKey);\n    } else {\n      if (importKey) {\n        throw CoreKitError.tssKeyImportNotAllowed();\n      }\n      await this.handleExistingUser();\n    }\n  }\n\n  // mutation function\n  async handleNewUser(importTssKey, isSfaKey) {\n    await this.atomicSync(async () => {\n      // Generate or use hash factor and initialize tkey with it.\n      let factorKey;\n      if (this.options.disableHashedFactorKey) {\n        factorKey = generateFactorKey().private;\n        // delete previous hashed factorKey if present\n        const hashedFactorKey = getHashedPrivateKey(this.state.postBoxKey, this.options.hashedFactorNonce);\n        await this.deleteMetadataShareBackup(hashedFactorKey);\n      } else {\n        factorKey = getHashedPrivateKey(this.state.postBoxKey, this.options.hashedFactorNonce);\n      }\n      const deviceTSSIndex = TssShareType.DEVICE;\n      const factorPub = getPubKeyPoint(factorKey, factorKeyCurve);\n      if (!importTssKey) {\n        const ec$1 = new ec(this.keyType);\n        const deviceTSSShare = ec$1.genKeyPair().getPrivate();\n        await this.tKey.initialize({\n          factorPub,\n          deviceTSSShare,\n          deviceTSSIndex\n        });\n      } else {\n        await this.tKey.initialize({\n          skipTssInit: true\n        });\n        await this.tKey.reconstructKey();\n        await this.importTssKey(importTssKey, factorPub, deviceTSSIndex);\n      }\n\n      // Finalize initialization.\n      await this.tKey.reconstructKey();\n      await this.finalizeTkey(factorKey);\n\n      // Store factor description.\n      await this.backupMetadataShare(factorKey);\n      if (this.options.disableHashedFactorKey) {\n        await this.addFactorDescription({\n          factorKey,\n          shareDescription: FactorKeyTypeShareDescription.Other,\n          updateMetadata: false\n        });\n      } else {\n        await this.addFactorDescription({\n          factorKey,\n          shareDescription: FactorKeyTypeShareDescription.HashedShare,\n          updateMetadata: false\n        });\n      }\n      if (importTssKey && isSfaKey) {\n        await this.tkey.addLocalMetadataTransitions({\n          input: [{\n            message: ONE_KEY_DELETE_NONCE\n          }],\n          privKey: [new BN(this.state.postBoxKey, \"hex\")]\n        });\n      }\n    });\n  }\n  async handleExistingUser() {\n    await this.tKey.initialize({\n      neverInitializeNewKey: true\n    });\n    if (this.options.disableHashedFactorKey) {\n      return;\n    }\n    const hashedFactorKey = getHashedPrivateKey(this.state.postBoxKey, this.options.hashedFactorNonce);\n    this.state.factorKey = hashedFactorKey;\n    if (await this.checkIfFactorKeyValid(hashedFactorKey)) {\n      // Initialize tkey with existing hashed share if available.\n      const factorKeyMetadata = await this.getFactorKeyMetadata(hashedFactorKey);\n      try {\n        await this.tKey.inputShareStoreSafe(factorKeyMetadata, true);\n        await this.tKey.reconstructKey();\n        await this.finalizeTkey(hashedFactorKey);\n      } catch (err) {\n        log.error(\"error initializing tkey with hashed share\", err);\n      }\n    } else {\n      var _this$tKey2;\n      const factorKeyMetadata = await ((_this$tKey2 = this.tKey) === null || _this$tKey2 === void 0 ? void 0 : _this$tKey2.readMetadata(hashedFactorKey));\n      if (factorKeyMetadata.message === \"SHARE_DELETED\") {\n        // throw CoreKitError.hashedFactorDeleted();\n        log.warn(\"hashed factor deleted\");\n      }\n    }\n  }\n  async finalizeTkey(factorKey) {\n    if (this.state.accountIndex !== 0) {\n      log.warn(\"AccountIndex should be 0\");\n      this.state.accountIndex = 0;\n    }\n    // Read tss meta data.\n    const {\n      tssIndex: tssShareIndex\n    } = await this.tKey.getTSSShare(factorKey);\n    const tssPubKey = this.tKey.getTSSPub().toSEC1(this.tkey.tssCurve, false);\n    this.updateState({\n      tssShareIndex,\n      tssPubKey,\n      factorKey\n    });\n    await this.createSession();\n  }\n  checkReady() {\n    if (!this.ready) {\n      throw CoreKitError.mpcCoreKitNotInitialized();\n    }\n  }\n  async rehydrateSession(result) {\n    try {\n      this.checkReady();\n      const factorKey = new BN(result.factorKey, \"hex\");\n      if (!factorKey) {\n        throw CoreKitError.providedFactorKeyInvalid();\n      }\n      const postBoxKey = result.postBoxKey || result.oAuthKey;\n      if (!postBoxKey) {\n        throw CoreKitError.default(\"postBoxKey or oAuthKey not present in session data\");\n      }\n      this.torusSp.postboxKey = new BN(postBoxKey, \"hex\");\n      this.torusSp.verifierName = result.userInfo.aggregateVerifier || result.userInfo.verifier;\n      this.torusSp.verifierId = result.userInfo.verifierId;\n      const factorKeyMetadata = await this.getFactorKeyMetadata(factorKey);\n      await this.tKey.initialize({\n        neverInitializeNewKey: true\n      });\n      await this.tKey.inputShareStoreSafe(factorKeyMetadata, true);\n      await this.tKey.reconstructKey();\n      this.updateState({\n        factorKey: new BN(result.factorKey, \"hex\"),\n        postBoxKey,\n        postboxKeyNodeIndexes: result.postboxKeyNodeIndexes || [],\n        tssShareIndex: result.tssShareIndex,\n        tssPubKey: this.tkey.getTSSPub().toSEC1(this.tKey.tssCurve, false),\n        signatures: result.signatures,\n        userInfo: result.userInfo\n      });\n    } catch (err) {\n      log.warn(\"failed to authorize session\", err);\n    }\n  }\n  async createSession() {\n    if (!this.options.disableSessionManager && !this.sessionManager) {\n      throw new Error(\"sessionManager is not available\");\n    }\n    if (this.options.disableSessionManager) {\n      return;\n    }\n    try {\n      const sessionId = SessionManager.generateRandomSessionKey();\n      this.sessionManager.sessionId = sessionId;\n      const {\n        postBoxKey,\n        factorKey,\n        userInfo,\n        tssShareIndex,\n        tssPubKey,\n        postboxKeyNodeIndexes\n      } = this.state;\n      if (!this.state.factorKey) {\n        throw CoreKitError.factorKeyNotPresent(\"factorKey not present in state when creating session.\");\n      }\n      const {\n        tssShare\n      } = await this.tKey.getTSSShare(this.state.factorKey, {\n        accountIndex: this.state.accountIndex\n      });\n      if (!postBoxKey || !factorKey || !tssShare || !tssPubKey || !userInfo) {\n        throw CoreKitError.userNotLoggedIn();\n      }\n      const payload = {\n        postBoxKey,\n        postboxKeyNodeIndexes: postboxKeyNodeIndexes || [],\n        factorKey: factorKey === null || factorKey === void 0 ? void 0 : factorKey.toString(\"hex\"),\n        tssShareIndex: tssShareIndex,\n        tssPubKey: Buffer.from(tssPubKey).toString(\"hex\"),\n        signatures: this.signatures,\n        userInfo\n      };\n      await this.sessionManager.createSession(payload);\n      // to accommodate async storage\n      await this.currentStorage.set(\"sessionId\", sessionId);\n    } catch (err) {\n      log.error(\"error creating session\", err);\n    }\n  }\n  async isMetadataPresent(privateKey) {\n    var _this$tKey3;\n    const privateKeyBN = new BN(privateKey, \"hex\");\n    const metadata = await ((_this$tKey3 = this.tKey) === null || _this$tKey3 === void 0 ? void 0 : _this$tKey3.readMetadata(privateKeyBN));\n    if (metadata && metadata.message !== \"KEY_NOT_FOUND\") {\n      return true;\n    }\n    return false;\n  }\n  async checkIfFactorKeyValid(factorKey) {\n    var _this$tKey4;\n    this.checkReady();\n    const factorKeyMetadata = await ((_this$tKey4 = this.tKey) === null || _this$tKey4 === void 0 ? void 0 : _this$tKey4.readMetadata(factorKey));\n    if (!factorKeyMetadata || factorKeyMetadata.message === \"KEY_NOT_FOUND\" || factorKeyMetadata.message === \"SHARE_DELETED\") {\n      return false;\n    }\n    return true;\n  }\n  async getFactorKeyMetadata(factorKey) {\n    var _this$tKey5;\n    this.checkReady();\n    const factorKeyMetadata = await ((_this$tKey5 = this.tKey) === null || _this$tKey5 === void 0 ? void 0 : _this$tKey5.readMetadata(factorKey));\n    if (!factorKeyMetadata || factorKeyMetadata.message === \"KEY_NOT_FOUND\") {\n      throw CoreKitError.noMetadataFound();\n    }\n    return ShareStore.fromJSON(factorKeyMetadata);\n  }\n\n  /**\n   * Copies a share and makes it available under a new factor key. If no share\n   * exists at the specified share index, a new share is created.\n   * @param newFactorTSSIndex - The index of the share to copy.\n   * @param newFactorPub - The public key of the new share.\n   */\n  async copyOrCreateShare(newFactorTSSIndex, newFactorPub) {\n    this.checkReady();\n    if (!this.tKey.metadata.factorPubs || !Array.isArray(this.tKey.metadata.factorPubs[this.tKey.tssTag])) {\n      throw CoreKitError.factorPubsMissing(\"'factorPubs' is missing in the metadata. Failed to copy factor public key.\");\n    }\n    if (!this.tKey.metadata.factorEncs || typeof this.tKey.metadata.factorEncs[this.tKey.tssTag] !== \"object\") {\n      throw CoreKitError.factorEncsMissing(\"'factorEncs' is missing in the metadata. Failed to copy factor public key.\");\n    }\n    if (!this.state.factorKey) {\n      throw CoreKitError.factorKeyNotPresent(\"factorKey not present in state when copying or creating a share.\");\n    }\n    if (VALID_SHARE_INDICES.indexOf(newFactorTSSIndex) === -1) {\n      throw CoreKitError.newShareIndexInvalid(`Invalid share type provided (${newFactorTSSIndex}). Valid share types are ${VALID_SHARE_INDICES}.`);\n    }\n    if (this.tKey.metadata.factorPubs[this.tKey.tssTag].length >= MAX_FACTORS) {\n      throw CoreKitError.maximumFactorsReached(`The maximum number of allowable factors (${MAX_FACTORS}) has been reached.`);\n    }\n\n    // Generate new share.\n    await this.tkey.addFactorPub({\n      existingFactorKey: this.state.factorKey,\n      authSignatures: this.signatures,\n      newFactorPub,\n      newTSSIndex: newFactorTSSIndex,\n      refreshShares: this.state.tssShareIndex !== newFactorTSSIndex // Refresh shares if we have a new factor key index.\n    });\n  }\n  async getMetadataShare() {\n    try {\n      var _this$tKey6, _this$tKey7;\n      const polyId = (_this$tKey6 = this.tKey) === null || _this$tKey6 === void 0 ? void 0 : _this$tKey6.metadata.getLatestPublicPolynomial().getPolynomialID();\n      const shares = (_this$tKey7 = this.tKey) === null || _this$tKey7 === void 0 ? void 0 : _this$tKey7.shares[polyId];\n      let share = null;\n      for (const shareIndex in shares) {\n        if (shareIndex !== SOCIAL_TKEY_INDEX.toString()) {\n          share = shares[shareIndex];\n        }\n      }\n      if (!share) {\n        throw CoreKitError.noMetadataShareFound();\n      }\n      return share;\n    } catch (err) {\n      log.error(\"create device share error\", err);\n      throw CoreKitError.default(err.message);\n    }\n  }\n  async deleteMetadataShareBackup(factorKey) {\n    var _this$tkey, _this$tkey2;\n    await this.tKey.addLocalMetadataTransitions({\n      input: [{\n        message: SHARE_DELETED,\n        dateAdded: Date.now()\n      }],\n      privKey: [factorKey]\n    });\n    if (!((_this$tkey = this.tkey) !== null && _this$tkey !== void 0 && _this$tkey.manualSync)) await ((_this$tkey2 = this.tkey) === null || _this$tkey2 === void 0 ? void 0 : _this$tkey2.syncLocalMetadataTransitions());\n  }\n  async backupMetadataShare(factorKey) {\n    var _this$tKey8, _this$tkey3, _this$tkey4;\n    const metadataShare = await this.getMetadataShare();\n\n    // Set metadata for factor key backup\n    await ((_this$tKey8 = this.tKey) === null || _this$tKey8 === void 0 ? void 0 : _this$tKey8.addLocalMetadataTransitions({\n      input: [metadataShare],\n      privKey: [factorKey]\n    }));\n    if (!((_this$tkey3 = this.tkey) !== null && _this$tkey3 !== void 0 && _this$tkey3.manualSync)) await ((_this$tkey4 = this.tkey) === null || _this$tkey4 === void 0 ? void 0 : _this$tkey4.syncLocalMetadataTransitions());\n  }\n  async addFactorDescription(args) {\n    var _this$tKey9;\n    const {\n      factorKey,\n      shareDescription,\n      updateMetadata\n    } = args;\n    let {\n      additionalMetadata\n    } = args;\n    if (!additionalMetadata) {\n      additionalMetadata = {};\n    }\n    const {\n      tssIndex\n    } = await this.tKey.getTSSShare(factorKey);\n    const factorPoint = getPubKeyPoint(factorKey, factorKeyCurve);\n    const factorPub = factorPoint.toSEC1(factorKeyCurve, true).toString(\"hex\");\n    const params = _objectSpread(_objectSpread({\n      module: shareDescription,\n      dateAdded: Date.now()\n    }, additionalMetadata), {}, {\n      tssShareIndex: tssIndex\n    });\n    await ((_this$tKey9 = this.tKey) === null || _this$tKey9 === void 0 ? void 0 : _this$tKey9.addShareDescription(factorPub, JSON.stringify(params), updateMetadata));\n  }\n  resetState() {\n    this.ready = false;\n    this.tkey = null;\n    this.torusSp = null;\n    this.storageLayer = null;\n    this.state = {\n      accountIndex: 0\n    };\n  }\n  _getPostBoxKey(result) {\n    return Torus.getPostboxKey(result);\n  }\n  _getSignatures(sessionData) {\n    // There is a check in torus.js which pushes undefined to session data in case\n    // that particular node call fails.\n    // and before returning we are not filtering out undefined vals in torus.js\n    // TODO: fix this in torus.js\n    return sessionData.filter(session => !!session).map(session => JSON.stringify({\n      data: session.token,\n      sig: session.signature\n    }));\n  }\n  isNodejsOrRN(params) {\n    const mode = params;\n    return mode === \"nodejs\" || mode === \"react-native\";\n  }\n  async featureRequest() {\n    const accessUrl = SIGNER_MAP[this.options.web3AuthNetwork];\n    const accessRequest = {\n      network: this.options.web3AuthNetwork,\n      client_id: this.options.web3AuthClientId,\n      is_mpc_core_kit: \"true\",\n      enable_gating: \"true\",\n      session_time: this.options.sessionTime.toString()\n    };\n    const url = new URL(`${accessUrl}/api/feature-access`);\n    url.search = new URLSearchParams(accessRequest).toString();\n    const result = await fetch(url);\n    if (result.status !== 200) {\n      // reset state on no mpc access\n      this.resetState();\n      const errMessage = await result.json();\n      throw CoreKitError.default(errMessage.error);\n    }\n    return result.json();\n  }\n  getAccountNonce() {\n    return this.tkey.computeAccountNonce(this.state.accountIndex);\n  }\n  async sign_ECDSA_secp256k1(data, hashed = false, precomputedTssClient) {\n    const executeSign = async (client, serverCoeffs, hashedData, signatures) => {\n      const {\n        r,\n        s,\n        recoveryParam\n      } = await client.sign(hashedData.toString(\"base64\"), true, \"\", \"keccak256\", {\n        signatures\n      });\n      // skip await cleanup\n      client.cleanup({\n        signatures,\n        server_coeffs: serverCoeffs\n      });\n      return {\n        v: recoveryParam,\n        r: scalarBNToBufferSEC1(r),\n        s: scalarBNToBufferSEC1(s)\n      };\n    };\n    if (!hashed) {\n      data = keccak256(data);\n    }\n    const isAlreadyPrecomputed = (precomputedTssClient === null || precomputedTssClient === void 0 ? void 0 : precomputedTssClient.client) && (precomputedTssClient === null || precomputedTssClient === void 0 ? void 0 : precomputedTssClient.serverCoeffs);\n    const {\n      client,\n      serverCoeffs\n    } = isAlreadyPrecomputed ? precomputedTssClient : await this.precompute_secp256k1();\n    const {\n      signatures\n    } = this;\n    if (!signatures) {\n      throw CoreKitError.signaturesNotPresent();\n    }\n    try {\n      return await executeSign(client, serverCoeffs, data, signatures);\n    } catch (error) {\n      if (!isAlreadyPrecomputed) {\n        throw error;\n      }\n      // Retry with new client if precomputed client failed, this is to handle the case when precomputed session might have expired\n      const {\n        client: newClient,\n        serverCoeffs: newServerCoeffs\n      } = await this.precompute_secp256k1();\n      const result = await executeSign(newClient, newServerCoeffs, data, signatures);\n      return result;\n    }\n  }\n  async sign_ed25519(data, hashed = false) {\n    if (hashed) {\n      throw CoreKitError.default(\"hashed data not supported for ed25519\");\n    }\n    const nodeDetails = fetchLocalConfig(this.options.web3AuthNetwork, \"ed25519\");\n    if (!nodeDetails.torusNodeTSSEndpoints) {\n      throw CoreKitError.default(\"could not fetch tss node endpoints\");\n    }\n\n    // Endpoints must end with backslash, but URLs returned by\n    // `fetch-node-details` don't have it.\n    const ED25519_ENDPOINTS = nodeDetails.torusNodeTSSEndpoints.map((ep, i) => ({\n      index: nodeDetails.torusIndexes[i],\n      url: `${ep}/`\n    }));\n\n    // Select endpoints and derive party indices.\n    const serverThreshold = Math.floor(ED25519_ENDPOINTS.length / 2) + 1;\n    const endpoints = sampleEndpoints(ED25519_ENDPOINTS, serverThreshold);\n    const serverXCoords = endpoints.map(x => x.index);\n    const clientXCoord = Math.max(...endpoints.map(ep => ep.index)) + 1;\n\n    // Derive share coefficients for flat hierarchy.\n    const ec = new Ed25519Curve();\n    const {\n      serverCoefficients,\n      clientCoefficient\n    } = deriveShareCoefficients(ec, serverXCoords, clientXCoord, this.state.tssShareIndex);\n\n    // Get pub key.\n    const tssPubKey = await this.getPubKey();\n    const tssPubKeyPoint = ec.keyFromPublic(tssPubKey).getPublic();\n\n    // Get client key share and adjust by coefficient.\n    if (this.state.accountIndex !== 0) {\n      throw CoreKitError.default(\"Account index not supported for ed25519\");\n    }\n    const {\n      tssShare\n    } = await this.tKey.getTSSShare(this.state.factorKey);\n    const clientShareAdjusted = tssShare.mul(clientCoefficient).umod(ec.n);\n    const clientShareAdjustedHex = ec.scalarToBuffer(clientShareAdjusted, Buffer).toString(\"hex\");\n\n    // Generate session identifier.\n    const tssNonce = this.getTssNonce();\n    const sessionNonce = generateSessionNonce();\n    const session = getSessionId(this.verifier, this.verifierId, this.tKey.tssTag, tssNonce, sessionNonce);\n\n    // Run signing protocol.\n    const serverURLs = endpoints.map(x => x.url);\n    const pubKeyHex = ec.pointToBuffer(tssPubKeyPoint, Buffer).toString(\"hex\");\n    const serverCoefficientsHex = serverCoefficients.map(c => ec.scalarToBuffer(c, Buffer).toString(\"hex\"));\n    const signature = await sign(this.wasmLib, session, this.signatures, serverXCoords, serverURLs, clientXCoord, clientShareAdjustedHex, pubKeyHex, data, serverCoefficientsHex);\n    log.info(`signature: ${signature}`);\n    return Buffer.from(signature, \"hex\");\n  }\n  async loadTssWasm() {\n    if (this.wasmLib) return this.wasmLib;\n    if (typeof this._tssLib.load === \"function\") {\n      // dont wait for wasm to be loaded, we can reload it during signing if not loaded\n      return this._tssLib.load();\n    } else if (this._tssLib.lib) {\n      return this._tssLib.lib;\n    }\n  }\n}\n\nexport { Web3AuthMPCCoreKit };\n", "import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport base64urlLib from 'base64url';\nimport _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport { TORUS_SAPPHIRE_NETWORK, TORUS_LEGACY_NETWORK } from '@toruslabs/constants';\nexport { TORUS_LEGACY_NETWORK, TORUS_SAPPHIRE_NETWORK } from '@toruslabs/constants';\nimport Color from 'color';\n\nconst base64url = base64urlLib;\nfunction safebtoa(str) {\n  return base64url.encode(str);\n}\nfunction safeatob(str) {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return base64url.decode(str);\n}\nfunction base64toJSON(b64str) {\n  return JSON.parse(base64url.decode(b64str));\n}\nfunction jsonToBase64(json) {\n  return base64url.encode(JSON.stringify(json));\n}\nfunction storageAvailable(type) {\n  let storageExists = false;\n  let storageLength = 0;\n  let storage;\n  try {\n    storage = window[type];\n    storageExists = true;\n    storageLength = storage.length;\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (err) {\n    const error = err;\n    return error && (\n    // everything except Firefox\n    error.code === 22 ||\n    // Firefox\n    error.code === 1014 ||\n    // test name field too, because code might not be present\n    // everything except Firefox\n    error.name === \"QuotaExceededError\" ||\n    // Firefox\n    error.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n    // acknowledge QuotaExceededError only if there's something already stored\n    storageExists && storageLength !== 0;\n  }\n}\n\nclass MemoryStore {\n  constructor() {\n    _defineProperty(this, \"store\", new Map());\n  }\n  getItem(key) {\n    return this.store.get(key) || null;\n  }\n  setItem(key, value) {\n    this.store.set(key, value);\n  }\n  removeItem(key) {\n    this.store.delete(key);\n  }\n}\nclass BrowserStorage {\n  constructor(storeKey, storage) {\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"_storeKey\", void 0);\n    this.storage = storage;\n    this._storeKey = storeKey;\n    try {\n      if (!storage.getItem(storeKey)) {\n        this.resetStore();\n      }\n    } catch (error) {\n      // Storage is not available\n    }\n  }\n  static getInstance(key) {\n    let storageKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"local\";\n    if (!this.instanceMap.has(key)) {\n      let storage;\n      if (storageKey === \"local\" && storageAvailable(\"localStorage\")) {\n        storage = window.localStorage;\n      } else if (storageKey === \"session\" && storageAvailable(\"sessionStorage\")) {\n        storage = window.sessionStorage;\n      } else {\n        storage = new MemoryStore();\n      }\n      this.instanceMap.set(key, new this(key, storage));\n    }\n    return this.instanceMap.get(key);\n  }\n  toJSON() {\n    return this.storage.getItem(this._storeKey);\n  }\n  resetStore() {\n    const currStore = this.getStore();\n    this.storage.removeItem(this._storeKey);\n    return currStore;\n  }\n  getStore() {\n    return JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n  }\n  get(key) {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    return store[key];\n  }\n  set(key, value) {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    store[key] = value;\n    this.storage.setItem(this._storeKey, JSON.stringify(store));\n  }\n}\n_defineProperty(BrowserStorage, \"instanceMap\", new Map());\n\nconst storeKey = \"openlogin_store\";\nconst UX_MODE = {\n  POPUP: \"popup\",\n  REDIRECT: \"redirect\"\n};\nconst OPENLOGIN_NETWORK = _objectSpread(_objectSpread({}, TORUS_SAPPHIRE_NETWORK), TORUS_LEGACY_NETWORK);\nconst SUPPORTED_KEY_CURVES = {\n  SECP256K1: \"secp256k1\",\n  ED25519: \"ed25519\"\n};\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  FARCASTER: \"farcaster\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\",\n  SMS_PASSWORDLESS: \"sms_passwordless\",\n  WEBAUTHN: \"webauthn\",\n  JWT: \"jwt\"\n};\nconst MFA_LEVELS = {\n  DEFAULT: \"default\",\n  OPTIONAL: \"optional\",\n  MANDATORY: \"mandatory\",\n  NONE: \"none\"\n};\nconst OPENLOGIN_ACTIONS = {\n  LOGIN: \"login\",\n  ENABLE_MFA: \"enable_mfa\",\n  MANAGE_MFA: \"manage_mfa\",\n  MODIFY_SOCIAL_FACTOR: \"modify_social_factor\"\n};\nconst BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  STAGING: \"staging\",\n  TESTING: \"testing\"\n};\n\n/**\n * {@label loginProviderType}\n */\n\n// autocomplete workaround https://github.com/microsoft/TypeScript/issues/29729\n\nconst LANGUAGES = {\n  en: \"en\",\n  ja: \"ja\",\n  ko: \"ko\",\n  de: \"de\",\n  zh: \"zh\",\n  es: \"es\",\n  fr: \"fr\",\n  pt: \"pt\",\n  nl: \"nl\",\n  tr: \"tr\"\n};\nconst LANGUAGE_MAP = {\n  en: \"english\",\n  ja: \"japanese\",\n  ko: \"korean\",\n  de: \"german\",\n  zh: \"mandarin\",\n  es: \"spanish\",\n  fr: \"french\",\n  pt: \"portuguese\",\n  nl: \"dutch\",\n  tr: \"turkish\"\n};\nconst THEME_MODES = {\n  light: \"light\",\n  dark: \"dark\",\n  auto: \"auto\"\n};\nconst MFA_FACTOR = {\n  DEVICE: \"deviceShareFactor\",\n  BACKUP_SHARE: \"backUpShareFactor\",\n  SOCIAL_BACKUP: \"socialBackupFactor\",\n  PASSWORD: \"passwordFactor\",\n  PASSKEYS: \"passkeysFactor\",\n  AUTHENTICATOR: \"authenticatorFactor\"\n};\n\nfunction getColorsList() {\n  let colorsAmount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n  let colorsShiftAmount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n  let mixColor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"black\";\n  let rotate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  let saturation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 20;\n  let mainColor = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"#0346ff\";\n  const colorsList = [];\n  let step;\n  for (step = 0; step < colorsAmount; step += 1) {\n    colorsList.push(Color(mainColor).rotate((step + 1) / colorsAmount * -rotate).saturate((step + 1) / colorsAmount * (saturation / 100)).mix(Color(mixColor), colorsShiftAmount / 100 * (step + 1) / colorsAmount).hex());\n  }\n  return colorsList;\n}\nfunction generateWhiteLabelTheme(primary) {\n  const darkSet = getColorsList(3, 50, \"black\", 0, 20, primary);\n  const lightSet = getColorsList(6, 85, \"white\", 0, 20, primary);\n  return [...darkSet.reverse(), primary, ...lightSet];\n}\nfunction applyWhiteLabelTheme(rootElement, theme) {\n  if (theme.primary) {\n    const themeSet = generateWhiteLabelTheme(theme.primary);\n    rootElement.style.setProperty(\"--app-primary-900\", themeSet[0]);\n    rootElement.style.setProperty(\"--app-primary-800\", themeSet[1]);\n    rootElement.style.setProperty(\"--app-primary-700\", themeSet[2]);\n    rootElement.style.setProperty(\"--app-primary-600\", themeSet[3]);\n    rootElement.style.setProperty(\"--app-primary-500\", themeSet[4]);\n    rootElement.style.setProperty(\"--app-primary-400\", themeSet[5]);\n    rootElement.style.setProperty(\"--app-primary-300\", themeSet[6]);\n    rootElement.style.setProperty(\"--app-primary-200\", themeSet[7]);\n    rootElement.style.setProperty(\"--app-primary-100\", themeSet[8]);\n    rootElement.style.setProperty(\"--app-primary-50\", themeSet[9]);\n  }\n  if (theme.onPrimary) {\n    rootElement.style.setProperty(\"--app-on-primary\", theme.onPrimary);\n  }\n}\n\nexport { BUILD_ENV, BrowserStorage, LANGUAGES, LANGUAGE_MAP, LOGIN_PROVIDER, MFA_FACTOR, MFA_LEVELS, MemoryStore, OPENLOGIN_ACTIONS, OPENLOGIN_NETWORK, SUPPORTED_KEY_CURVES, THEME_MODES, UX_MODE, applyWhiteLabelTheme, base64toJSON, base64url, generateWhiteLabelTheme, getColorsList, jsonToBase64, safeatob, safebtoa, storageAvailable, storeKey };\n", "const TORUS_LEGACY_NETWORK = {\n  MAINNET: \"mainnet\",\n  TESTNET: \"testnet\",\n  CYAN: \"cyan\",\n  AQUA: \"aqua\",\n  CELESTE: \"celeste\"\n};\nconst TORUS_SAPPHIRE_NETWORK = {\n  SAPPHIRE_DEVNET: \"sapphire_devnet\",\n  SAPPHIRE_MAINNET: \"sapphire_mainnet\"\n};\nconst PROXY_CONTRACT_ADDRESS = {\n  [TORUS_LEGACY_NETWORK.MAINNET]: \"0xf20336e16B5182637f09821c27BDe29b0AFcfe80\",\n  [TORUS_LEGACY_NETWORK.TESTNET]: \"0xd084604e5FA387FbC2Da8bAab07fDD6aDED4614A\",\n  [TORUS_LEGACY_NETWORK.CYAN]: \"0x9f072ba19b3370e512aa1b4bfcdaf97283168005\",\n  [TORUS_LEGACY_NETWORK.AQUA]: \"0x29Dea82a0509153b91040ee13cDBba0f03efb625\",\n  [TORUS_LEGACY_NETWORK.CELESTE]: \"0x6Bffb4e89453069E7487f0fa5c9f4a2D771cce6c\"\n};\nconst MULTI_CLUSTER_NETWORKS = [\n  // TORUS_LEGACY_NETWORK.AQUA,\n  // TORUS_LEGACY_NETWORK.CELESTE,\n  // TORUS_LEGACY_NETWORK.CYAN,\n];\nconst LEGACY_NETWORKS_ROUTE_MAP = {\n  [TORUS_LEGACY_NETWORK.AQUA]: {\n    migrationCompleted: true,\n    networkIdentifier: \"aqua\",\n    networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET\n  },\n  [TORUS_LEGACY_NETWORK.CELESTE]: {\n    migrationCompleted: true,\n    networkIdentifier: \"celeste\",\n    networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET\n  },\n  [TORUS_LEGACY_NETWORK.CYAN]: {\n    migrationCompleted: true,\n    networkIdentifier: \"cyan\",\n    networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET\n  },\n  [TORUS_LEGACY_NETWORK.MAINNET]: {\n    migrationCompleted: true,\n    networkIdentifier: \"mainnet\",\n    networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET\n  },\n  [TORUS_LEGACY_NETWORK.TESTNET]: {\n    migrationCompleted: true,\n    networkIdentifier: \"teal\",\n    networkMigratedTo: TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET\n  }\n};\nconst NETWORK_MAP = {\n  [TORUS_LEGACY_NETWORK.MAINNET]: \"mainnet\",\n  [TORUS_LEGACY_NETWORK.TESTNET]: \"goerli\",\n  [TORUS_LEGACY_NETWORK.CYAN]: \"polygon-mainnet\",\n  [TORUS_LEGACY_NETWORK.AQUA]: \"polygon-mainnet\",\n  [TORUS_LEGACY_NETWORK.CELESTE]: \"polygon-mainnet\"\n};\nconst SIGNER_MAP = {\n  [TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET]: \"https://signer.web3auth.io\",\n  [TORUS_SAPPHIRE_NETWORK.SAPPHIRE_DEVNET]: \"https://signer.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.MAINNET]: \"https://signer.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.TESTNET]: \"https://signer.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.CYAN]: \"https://signer-polygon.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.AQUA]: \"https://signer-polygon.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.CELESTE]: \"https://signer-polygon.web3auth.io\"\n};\nconst METADATA_MAP = {\n  [TORUS_LEGACY_NETWORK.MAINNET]: \"https://metadata.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.TESTNET]: \"https://metadata.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.CYAN]: \"https://metadata.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.AQUA]: \"https://metadata.web3auth.io\",\n  [TORUS_LEGACY_NETWORK.CELESTE]: \"https://metadata.web3auth.io\"\n};\nconst FND_SERVER = \"https://fnd.web3auth.io\";\nconst SESSION_SERVER = \"https://session.web3auth.io\";\nconst KEY_TYPE = {\n  SECP256K1: \"secp256k1\",\n  ED25519: \"ed25519\"\n};\n\nconst abi = [{\n  inputs: [{\n    internalType: \"string\",\n    name: \"_verifier\",\n    type: \"string\"\n  }, {\n    internalType: \"bytes32\",\n    name: \"hashedVerifierId\",\n    type: \"bytes32\"\n  }],\n  name: \"getNodeSet\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"currentEpoch\",\n    type: \"uint256\"\n  }, {\n    internalType: \"string[]\",\n    name: \"torusNodeEndpoints\",\n    type: \"string[]\"\n  }, {\n    internalType: \"uint256[]\",\n    name: \"torusNodePubX\",\n    type: \"uint256[]\"\n  }, {\n    internalType: \"uint256[]\",\n    name: \"torusNodePubY\",\n    type: \"uint256[]\"\n  }, {\n    internalType: \"uint256[]\",\n    name: \"torusIndexes\",\n    type: \"uint256[]\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}];\n\nexport { FND_SERVER, KEY_TYPE, LEGACY_NETWORKS_ROUTE_MAP, METADATA_MAP, MULTI_CLUSTER_NETWORKS, NETWORK_MAP, PROXY_CONTRACT_ADDRESS, SESSION_SERVER, SIGNER_MAP, TORUS_LEGACY_NETWORK, TORUS_SAPPHIRE_NETWORK, abi };\n", "import { Point, KeyType, secp256k1 } from '@tkey/common-types';\nimport { generatePrivateBN } from '@tkey/core';\nimport { factorKeyCurve } from '@tkey/tss';\nimport { safeatob } from '@toruslabs/openlogin-utils';\nimport { keccak256 } from '@toruslabs/torus.js';\nimport BN from 'bn.js';\nimport { eddsa } from 'elliptic';\nimport loglevel from 'loglevel';\nimport { SCALAR_LEN, DELIMITERS } from './constants.js';\n\nconst ed25519 = () => {\n  return new eddsa(\"ed25519\");\n};\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nfunction randomBytes(bytesLength = 32) {\n  // We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n  const crypto = typeof globalThis === \"object\" && \"crypto\" in globalThis ? globalThis.crypto : undefined;\n  if (crypto && typeof crypto.getRandomValues === \"function\") {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error(\"crypto.getRandomValues must be defined\");\n}\nfunction generateEd25519Seed() {\n  return Buffer.from(randomBytes(32));\n}\nconst generateFactorKey = () => {\n  const keyPair = factorKeyCurve.genKeyPair();\n  const pub = Point.fromElliptic(keyPair.getPublic());\n  return {\n    private: keyPair.getPrivate(),\n    pub\n  };\n};\nconst generateTSSEndpoints = (tssNodeEndpoints, parties, clientIndex, nodeIndexes) => {\n  const endpoints = [];\n  const tssWSEndpoints = [];\n  const partyIndexes = [];\n  const nodeIndexesReturned = [];\n  for (let i = 0; i < parties; i++) {\n    partyIndexes.push(i);\n    if (i === clientIndex) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      endpoints.push(null);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      tssWSEndpoints.push(null);\n    } else {\n      const targetNodeIndex = nodeIndexes[i] - 1;\n      endpoints.push(tssNodeEndpoints[targetNodeIndex]);\n      tssWSEndpoints.push(new URL(tssNodeEndpoints[targetNodeIndex]).origin);\n      nodeIndexesReturned.push(nodeIndexes[i]);\n    }\n  }\n  return {\n    endpoints,\n    tssWSEndpoints,\n    partyIndexes,\n    nodeIndexesReturned\n  };\n};\nasync function storageAvailable(storage) {\n  try {\n    const x = \"__storage_test__\";\n    const rand = Math.random().toString();\n    await storage.setItem(x, rand);\n    const value = await storage.getItem(rand);\n    if (value !== rand) {\n      throw new Error(\"Value mismatch\");\n    }\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n// TODO think which conversion functions to keep and how to export them.\n\n/**\n * Parses a JWT Token, without verifying the signature.\n * @param token - JWT Token\n * @returns Extracted JSON payload from the token\n */\nfunction parseToken(token) {\n  const payload = token.split(\".\")[1];\n  return JSON.parse(safeatob(payload));\n}\nconst getHashedPrivateKey = (postboxKey, clientId) => {\n  const uid = `${postboxKey}_${clientId}`;\n  let hashUid = keccak256(Buffer.from(uid, \"utf8\"));\n  hashUid = hashUid.replace(\"0x\", \"\");\n  return new BN(hashUid, \"hex\");\n};\n\n/**\n * Converts an elliptic curve scalar represented by a BN to a byte buffer in SEC1\n * format (i.e., padded to maximum length).\n * @param s - The scalar of type BN.\n * @returns The SEC1 encoded representation of the scalar.\n */\nfunction scalarBNToBufferSEC1(s) {\n  return s.toArrayLike(Buffer, \"be\", SCALAR_LEN);\n}\nfunction sampleEndpoints(endpoints, n) {\n  if (n > endpoints.length) {\n    throw new Error(\"Invalid number of endpoints\");\n  }\n  const shuffledEndpoints = endpoints.slice().sort(() => Math.random() - 0.5);\n  return shuffledEndpoints.slice(0, n).sort((a, b) => a.index - b.index);\n}\nfunction fraction(curve, nom, denom) {\n  return nom.mul(denom.invm(curve.n)).umod(curve.n);\n}\nfunction lagrangeCoefficient(curve, xCoords, targetCoeff, targetX) {\n  return xCoords.filter((_, i) => i !== targetCoeff).reduce((prev, cur) => {\n    const frac = fraction(curve, targetX.sub(cur), xCoords[targetCoeff].sub(cur));\n    return prev.mul(frac).umod(curve.n);\n  }, new BN(1));\n}\nfunction lagrangeCoefficients(curve, xCoords, targetX) {\n  const xCoordsBN = xCoords.map(i => new BN(i));\n  const targetXBN = new BN(targetX);\n  return xCoordsBN.map((_value, i) => lagrangeCoefficient(curve, xCoordsBN, i, targetXBN));\n}\nconst SERVER_XCOORD_L1 = 1;\nconst CLIENT_XCOORD_L1 = 2;\n\n/**\n * Derive share coefficients for client and servers.\n *\n * @param curve - The curve to be used.\n * @param serverXCoords - The source and target x-coordinates of the selected\n * servers.\n * @param targetClientXCoord - The target x-coordinate of the client.\n * @param sourceClientXCoord - The source x-coordinate of the client in the L1\n * hierarchy.\n * @returns - The share coefficients for the client and the servers.\n */\nfunction deriveShareCoefficients(ec, serverXCoords, targetClientXCoord, sourceClientXCoord = CLIENT_XCOORD_L1) {\n  const l1Coefficients = lagrangeCoefficients(ec, [SERVER_XCOORD_L1, sourceClientXCoord], 0);\n  const l2Coefficients = lagrangeCoefficients(ec, serverXCoords, 0);\n  if (serverXCoords.includes(targetClientXCoord)) {\n    throw new Error(`Invalid server x-coordinates: overlapping with client x-coordinate: ${serverXCoords} ${targetClientXCoord}`);\n  }\n  const targetCoefficients = lagrangeCoefficients(ec, [targetClientXCoord, ...serverXCoords], 0);\n\n  // Derive server coefficients.\n  const serverCoefficients = l2Coefficients.map((coeff, i) => fraction(ec, l1Coefficients[0].mul(coeff), targetCoefficients[i + 1]));\n\n  // Derive client coefficient.\n  const clientCoefficient = fraction(ec, l1Coefficients[1], targetCoefficients[0]);\n  return {\n    serverCoefficients,\n    clientCoefficient\n  };\n}\nfunction generateSessionNonce() {\n  return keccak256(Buffer.from(generatePrivateBN().toString(\"hex\") + Date.now(), \"utf8\"));\n}\nfunction getSessionId(verifier, verifierId, tssTag, tssNonce, sessionNonce) {\n  return `${verifier}${DELIMITERS.Delimiter1}${verifierId}${DELIMITERS.Delimiter2}${tssTag}${DELIMITERS.Delimiter3}${tssNonce}${DELIMITERS.Delimiter4}${sessionNonce}`;\n}\nfunction sigToRSV(sig) {\n  if (sig.length !== 65) {\n    throw new Error(`Invalid signature length: expected 65, got ${sig.length}`);\n  }\n  return {\n    r: Buffer.from(sig.subarray(0, 32)),\n    s: Buffer.from(sig.subarray(32, 64)),\n    v: sig[64]\n  };\n}\nfunction makeEthereumSigner(kit) {\n  if (kit.keyType !== KeyType.secp256k1) {\n    throw new Error(`Invalid key type: expected secp256k1, got ${kit.keyType}`);\n  }\n  return {\n    sign: async msgHash => {\n      const sig = await kit.sign(msgHash, true);\n      return sigToRSV(sig);\n    },\n    getPublic: async () => {\n      const pk = Point.fromSEC1(secp256k1, kit.getPubKey().toString(\"hex\"));\n      return pk.toSEC1(secp256k1).subarray(1);\n    }\n  };\n}\nconst log = loglevel.getLogger(\"mpc-core-kit\");\nlog.disableAll();\n\nexport { deriveShareCoefficients, ed25519, fraction, generateEd25519Seed, generateFactorKey, generateSessionNonce, generateTSSEndpoints, getHashedPrivateKey, getSessionId, lagrangeCoefficient, lagrangeCoefficients, log, makeEthereumSigner, parseToken, randomBytes, sampleEndpoints, scalarBNToBufferSEC1, sigToRSV, storageAvailable };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,aAAS,QAAQ,GAAG;AAClB;AAEA,aAAO,OAAO,UAAU,UAAU,cAAc,OAAO,UAAU,YAAY,OAAO,OAAO,WAAW,SAAUA,IAAG;AACjH,eAAO,OAAOA;AAAA,MAChB,IAAI,SAAUA,IAAG;AACf,eAAOA,MAAK,cAAc,OAAO,UAAUA,GAAE,gBAAgB,UAAUA,OAAM,OAAO,YAAY,WAAW,OAAOA;AAAA,MACpH,GAAG,OAAO,QAAQ,aAAa,MAAM,OAAO,QAAQ,SAAS,IAAI,OAAO,SAAS,QAAQ,CAAC;AAAA,IAC5F;AACA,WAAO,UAAU,SAAS,OAAO,QAAQ,aAAa,MAAM,OAAO,QAAQ,SAAS,IAAI,OAAO;AAAA;AAAA;;;ACT/F;AAAA;AAAA,QAAI,UAAU,iBAAuB,SAAS;AAC9C,aAAS,YAAY,GAAG,GAAG;AACzB,UAAI,YAAY,QAAQ,CAAC,KAAK,CAAC,EAAG,QAAO;AACzC,UAAI,IAAI,EAAE,OAAO,WAAW;AAC5B,UAAI,WAAW,GAAG;AAChB,YAAI,IAAI,EAAE,KAAK,GAAG,KAAK,SAAS;AAChC,YAAI,YAAY,QAAQ,CAAC,EAAG,QAAO;AACnC,cAAM,IAAI,UAAU,8CAA8C;AAAA,MACpE;AACA,cAAQ,aAAa,IAAI,SAAS,QAAQ,CAAC;AAAA,IAC7C;AACA,WAAO,UAAU,aAAa,OAAO,QAAQ,aAAa,MAAM,OAAO,QAAQ,SAAS,IAAI,OAAO;AAAA;AAAA;;;ACXnG;AAAA;AAAA,QAAI,UAAU,iBAAuB,SAAS;AAC9C,QAAI,cAAc;AAClB,aAAS,cAAc,GAAG;AACxB,UAAI,IAAI,YAAY,GAAG,QAAQ;AAC/B,aAAO,YAAY,QAAQ,CAAC,IAAI,IAAI,IAAI;AAAA,IAC1C;AACA,WAAO,UAAU,eAAe,OAAO,QAAQ,aAAa,MAAM,OAAO,QAAQ,SAAS,IAAI,OAAO;AAAA;AAAA;;;ACNrG;AAAA;AAAA,QAAI,gBAAgB;AACpB,aAASC,iBAAgB,GAAG,GAAG,GAAG;AAChC,cAAQ,IAAI,cAAc,CAAC,MAAM,IAAI,OAAO,eAAe,GAAG,GAAG;AAAA,QAC/D,OAAO;AAAA,QACP,YAAY;AAAA,QACZ,cAAc;AAAA,QACd,UAAU;AAAA,MACZ,CAAC,IAAI,EAAE,CAAC,IAAI,GAAG;AAAA,IACjB;AACA,WAAO,UAAUA,kBAAiB,OAAO,QAAQ,aAAa,MAAM,OAAO,QAAQ,SAAS,IAAI,OAAO;AAAA;AAAA;;;ACTvG;AAAA;AAAS,KAAC,MAAM;AACN;AAEA,UAAI,sBAAsB,CAAC;AAI3B,OAAC,MAAM;AAEN,4BAAoB,IAAI,CAACC,YAAW;AACnC,cAAI,SAASA,WAAUA,QAAO;AAAA;AAAA,YAC7B,MAAOA,QAAO,SAAS;AAAA;AAAA;AAAA,YACvB,MAAOA;AAAA;AACR,8BAAoB,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;AAC3C,iBAAO;AAAA,QACR;AAAA,MACD,GAAG;AAGH,OAAC,MAAM;AAEN,4BAAoB,IAAI,CAACC,UAAS,eAAe;AAChD,mBAAQ,OAAO,YAAY;AAC1B,gBAAG,oBAAoB,EAAE,YAAY,GAAG,KAAK,CAAC,oBAAoB,EAAEA,UAAS,GAAG,GAAG;AAClF,qBAAO,eAAeA,UAAS,KAAK,EAAE,YAAY,MAAM,KAAK,WAAW,GAAG,EAAE,CAAC;AAAA,YAC/E;AAAA,UACD;AAAA,QACD;AAAA,MACD,GAAG;AAGH,OAAC,MAAM;AACN,4BAAoB,IAAI,CAAC,KAAK,SAAU,OAAO,UAAU,eAAe,KAAK,KAAK,IAAI;AAAA,MACvF,GAAG;AAGH,OAAC,MAAM;AAEN,4BAAoB,IAAI,CAACA,aAAY;AACpC,cAAG,OAAO,WAAW,eAAe,OAAO,aAAa;AACvD,mBAAO,eAAeA,UAAS,OAAO,aAAa,EAAE,OAAO,SAAS,CAAC;AAAA,UACvE;AACA,iBAAO,eAAeA,UAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAAA,QAC7D;AAAA,MACD,GAAG;AAGb,UAAI,sBAAsB,CAAC;AAE3B,0BAAoB,EAAE,mBAAmB;AAGzC,0BAAoB,EAAE,qBAAqB;AAAA,QACzC,cAAc;AAAA;AAAA,UAAsB;AAAA;AAAA,QACpC,UAAU;AAAA;AAAA,UAAsBC;AAAA;AAAA,QAChC,yBAAyB;AAAA;AAAA,UAAsBC;AAAA;AAAA,QAC/C,UAAU;AAAA;AAAA,UAAsBC;AAAA;AAAA,QAChC,qBAAqB;AAAA;AAAA,UAAsBC;AAAA;AAAA,QAC3C,sBAAsB;AAAA;AAAA,UAAsBC;AAAA;AAAA,MAC9C,CAAC;AAED;AACA,YAAM,iCAAiC;AACvC,UAAI,yBAAsC,oBAAoB,EAAE,8BAA8B;AAC9F;AAAA,MAEA,MAAM,aAAa;AAAA,QACjB,cAAc;AACZ,iCAAuB,EAAE,MAAM,OAAO,oBAAI,IAAI,CAAC;AAC/C,iCAAuB,EAAE,MAAM,SAAS,oBAAI,IAAI,CAAC;AAAA,QACnD;AAAA,QACA,IAAI,OAAO;AACT,iBAAO,KAAK,IAAI;AAAA,QAClB;AAAA,QACA,QAAQ,GAAG;AACT,iBAAO,KAAK,IAAI,IAAI,CAAC;AAAA,QACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOA,MAAM,IAAI,GAAG,UAAU,GAAG;AACxB,gBAAM,IAAI,KAAK,IAAI,IAAI,CAAC;AACxB,cAAI,GAAG;AACL,mBAAO;AAAA,UACT;AACA,iBAAO,IAAI,QAAQ,aAAW;AAC5B,kBAAM,OAAO;AAAA,cACX;AAAA,cACA,SAAS,WAAW,MAAM;AAIxB,sBAAMC,SAAQ,KAAK,MAAM,IAAI,CAAC;AAC9B,oBAAIA,QAAO;AACT,wBAAM,IAAIA,OAAM,QAAQ,IAAI;AAC5B,sBAAI,KAAK,GAAG;AACV,oBAAAA,OAAM,OAAO,GAAG,CAAC;AAAA,kBACnB;AAAA,gBACF;AAGA,wBAAQ,MAAS;AAAA,cACnB,GAAG,OAAO;AAAA,YACZ;AACA,gBAAI,QAAQ,KAAK,MAAM,IAAI,CAAC;AAC5B,gBAAI,CAAC,OAAO;AACV,sBAAQ,CAAC;AACT,mBAAK,MAAM,IAAI,GAAG,KAAK;AAAA,YACzB;AACA,kBAAM,KAAK,IAAI;AAAA,UACjB,CAAC;AAAA,QACH;AAAA,QACA,IAAI,GAAG,GAAG;AACR,eAAK,IAAI,IAAI,GAAG,CAAC;AACjB,gBAAM,QAAQ,KAAK,MAAM,IAAI,CAAC;AAC9B,cAAI,OAAO;AACT,uBAAW,QAAQ,OAAO;AACxB,2BAAa,KAAK,OAAO;AACzB,mBAAK,QAAQ,CAAC;AAAA,YAChB;AACA,iBAAK,MAAM,OAAO,CAAC;AAAA,UACrB;AAAA,QACF;AAAA,QACA,OAAO,GAAG;AACR,eAAK,IAAI,OAAO,CAAC;AACjB,eAAK,MAAM,OAAO,CAAC;AAAA,QACrB;AAAA,QACA,QAAQ,YAAY;AAClB,eAAK,IAAI,QAAQ,UAAU;AAAA,QAC7B;AAAA,QACA,QAAQ;AACN,eAAK,IAAI,MAAM;AACf,eAAK,MAAM,MAAM;AAAA,QACnB;AAAA,MACF;AAAA,MACA,MAAML,UAAS;AAAA,QACb,cAAc;AACZ,iCAAuB,EAAE,MAAM,UAAU,oBAAI,IAAI,CAAC;AAClD,iCAAuB,EAAE,MAAM,SAAS,oBAAI,IAAI,CAAC;AAAA,QACnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMA,MAAM,IAAI,GAAG,UAAU,GAAG;AACxB,gBAAM,OAAO,KAAK,OAAO,IAAI,CAAC;AAC9B,cAAI,QAAQ,KAAK,SAAS,GAAG;AAC3B,kBAAM,MAAM,KAAK,OAAO,GAAG,CAAC,EAAE,CAAC;AAC/B,mBAAO;AAAA,UACT;AACA,iBAAO,IAAI,QAAQ,aAAW;AAC5B,kBAAM,OAAO;AAAA,cACX;AAAA,cACA,SAAS,WAAW,MAAM;AAIxB,sBAAMK,SAAQ,KAAK,MAAM,IAAI,CAAC;AAC9B,oBAAIA,QAAO;AACT,wBAAM,IAAIA,OAAM,QAAQ,IAAI;AAC5B,sBAAI,KAAK,GAAG;AACV,oBAAAA,OAAM,OAAO,GAAG,CAAC;AAAA,kBACnB;AAAA,gBACF;AAGA,wBAAQ,MAAS;AAAA,cACnB,GAAG,OAAO;AAAA,YACZ;AACA,gBAAI,QAAQ,KAAK,MAAM,IAAI,CAAC;AAC5B,gBAAI,CAAC,OAAO;AACV,sBAAQ,CAAC;AACT,mBAAK,MAAM,IAAI,GAAG,KAAK;AAAA,YACzB;AACA,kBAAM,KAAK,IAAI;AAAA,UACjB,CAAC;AAAA,QACH;AAAA,QACA,KAAK,GAAG,GAAG;AACT,gBAAM,QAAQ,KAAK,MAAM,IAAI,CAAC;AAC9B,cAAI,SAAS,MAAM,SAAS,GAAG;AAC7B,kBAAM,OAAO,MAAM,OAAO,GAAG,CAAC,EAAE,CAAC;AACjC,yBAAa,KAAK,OAAO;AACzB,iBAAK,QAAQ,CAAC;AACd;AAAA,UACF;AACA,cAAI,OAAO,KAAK,OAAO,IAAI,CAAC;AAC5B,cAAI,CAAC,MAAM;AACT,mBAAO,CAAC;AACR,iBAAK,OAAO,IAAI,GAAG,IAAI;AAAA,UACzB;AACA,eAAK,KAAK,CAAC;AAAA,QACb;AAAA,QACA,OAAO,GAAG;AACR,eAAK,OAAO,OAAO,CAAC;AACpB,eAAK,MAAM,OAAO,CAAC;AAAA,QACrB;AAAA,QACA,QAAQ,YAAY;AAClB,eAAK,OAAO,QAAQ,CAAC,MAAM,MAAM;AAC/B,iBAAK,QAAQ,OAAK;AAChB,yBAAW,GAAG,CAAC;AAAA,YACjB,CAAC;AAAA,UACH,CAAC;AAAA,QACH;AAAA,QACA,QAAQ;AACN,eAAK,OAAO,MAAM;AAClB,eAAK,MAAM,MAAM;AAAA,QACnB;AAAA,MACF;AACA;AACA,YAAM,iCAAiC;AACvC,UAAI,yBAAsC,oBAAoB,EAAE,8BAA8B;AAC9F;AAEA,eAASH,UAAS,KAAK,OAAO,SAAS;AACrC,eAAO,IAAI,IAAI,MAAM,KAAK,OAAO,CAAC,EAAE,KAAK,OAAO;AAAA,MAClD;AACA,eAASC,qBAAoB,UAAU,cAAc,UAAU,SAAS;AACtE,eAAO,SAAS,OAAO,CAAC,GAAG,MAAM,MAAM,YAAY,EAAE,OAAO,CAAC,MAAM,QAAQ;AACzE,gBAAM,OAAOD,UAAS,SAAS,IAAI,GAAG,GAAG,SAAS,YAAY,EAAE,IAAI,GAAG,GAAG,OAAO;AACjF,iBAAO,KAAK,IAAI,IAAI,EAAE,KAAK,OAAO;AAAA,QACpC,GAAG,KAAK,uBAAuB,GAAG,CAAC,CAAC;AAAA,MACtC;AACA,eAASE,sBAAqB,UAAU,UAAU,SAAS;AACzD,cAAM,cAAc,SAAS,IAAI,OAAK,KAAK,uBAAuB,GAAG,CAAC,CAAC;AACvE,cAAM,cAAc,KAAK,uBAAuB,GAAG,QAAQ;AAC3D,eAAO,YAAY,IAAI,CAAC,QAAQ,MAAMD,qBAAoB,aAAa,GAAG,aAAa,OAAO,CAAC;AAAA,MACjG;AAsBA,eAASF,yBAAwB,eAAe,cAAc,SAAS,kBAAkB,GAAG,iBAAiB,GAAG;AAC9G,cAAM,iBAAiBG,sBAAqB,CAAC,iBAAiB,cAAc,GAAG,GAAG,OAAO;AACzF,cAAM,iBAAiBA,sBAAqB,eAAe,GAAG,OAAO;AACrE,YAAI,cAAc,SAAS,YAAY,GAAG;AACxC,gBAAM,IAAI,MAAM,uEAAuE,aAAa,IAAI,YAAY,EAAE;AAAA,QACxH;AACA,cAAM,qBAAqBA,sBAAqB,CAAC,cAAc,GAAG,aAAa,GAAG,GAAG,OAAO;AAG5F,cAAM,qBAAqB,eAAe,IAAI,CAAC,OAAO,MAAMF,UAAS,eAAe,CAAC,EAAE,IAAI,KAAK,GAAG,mBAAmB,IAAI,CAAC,GAAG,OAAO,CAAC;AAGtI,cAAM,oBAAoBA,UAAS,eAAe,CAAC,GAAG,mBAAmB,CAAC,GAAG,OAAO;AACpF,eAAO;AAAA,UACL;AAAA,UACA;AAAA,QACF;AAAA,MACF;AACA;AAGA,aAAO,UAAU;AAAA,IACR,GAAG;AAAA;AAAA;;;AClRZ,IAAM,uBAAuB;AAAA,EAC3B,SAAS;AAAA,EACT,SAAS;AAAA,EACT,MAAM;AAAA,EACN,MAAM;AAAA,EACN,SAAS;AACX;AACA,IAAM,yBAAyB;AAAA,EAC7B,iBAAiB;AAAA,EACjB,kBAAkB;AACpB;AACA,IAAM,yBAAyB;AAAA,EAC7B,CAAC,qBAAqB,OAAO,GAAG;AAAA,EAChC,CAAC,qBAAqB,OAAO,GAAG;AAAA,EAChC,CAAC,qBAAqB,IAAI,GAAG;AAAA,EAC7B,CAAC,qBAAqB,IAAI,GAAG;AAAA,EAC7B,CAAC,qBAAqB,OAAO,GAAG;AAClC;AAMA,IAAM,4BAA4B;AAAA,EAChC,CAAC,qBAAqB,IAAI,GAAG;AAAA,IAC3B,oBAAoB;AAAA,IACpB,mBAAmB;AAAA,IACnB,mBAAmB,uBAAuB;AAAA,EAC5C;AAAA,EACA,CAAC,qBAAqB,OAAO,GAAG;AAAA,IAC9B,oBAAoB;AAAA,IACpB,mBAAmB;AAAA,IACnB,mBAAmB,uBAAuB;AAAA,EAC5C;AAAA,EACA,CAAC,qBAAqB,IAAI,GAAG;AAAA,IAC3B,oBAAoB;AAAA,IACpB,mBAAmB;AAAA,IACnB,mBAAmB,uBAAuB;AAAA,EAC5C;AAAA,EACA,CAAC,qBAAqB,OAAO,GAAG;AAAA,IAC9B,oBAAoB;AAAA,IACpB,mBAAmB;AAAA,IACnB,mBAAmB,uBAAuB;AAAA,EAC5C;AAAA,EACA,CAAC,qBAAqB,OAAO,GAAG;AAAA,IAC9B,oBAAoB;AAAA,IACpB,mBAAmB;AAAA,IACnB,mBAAmB,uBAAuB;AAAA,EAC5C;AACF;AACA,IAAM,cAAc;AAAA,EAClB,CAAC,qBAAqB,OAAO,GAAG;AAAA,EAChC,CAAC,qBAAqB,OAAO,GAAG;AAAA,EAChC,CAAC,qBAAqB,IAAI,GAAG;AAAA,EAC7B,CAAC,qBAAqB,IAAI,GAAG;AAAA,EAC7B,CAAC,qBAAqB,OAAO,GAAG;AAClC;AACA,IAAM,aAAa;AAAA,EACjB,CAAC,uBAAuB,gBAAgB,GAAG;AAAA,EAC3C,CAAC,uBAAuB,eAAe,GAAG;AAAA,EAC1C,CAAC,qBAAqB,OAAO,GAAG;AAAA,EAChC,CAAC,qBAAqB,OAAO,GAAG;AAAA,EAChC,CAAC,qBAAqB,IAAI,GAAG;AAAA,EAC7B,CAAC,qBAAqB,IAAI,GAAG;AAAA,EAC7B,CAAC,qBAAqB,OAAO,GAAG;AAClC;AACA,IAAM,eAAe;AAAA,EACnB,CAAC,qBAAqB,OAAO,GAAG;AAAA,EAChC,CAAC,qBAAqB,OAAO,GAAG;AAAA,EAChC,CAAC,qBAAqB,IAAI,GAAG;AAAA,EAC7B,CAAC,qBAAqB,IAAI,GAAG;AAAA,EAC7B,CAAC,qBAAqB,OAAO,GAAG;AAClC;AAGA,IAAM,WAAW;AAAA,EACf,WAAW;AAAA,EACX,SAAS;AACX;;;AC5EA,IAAM,mBAAmB;AAAA,EACvB,SAAS,uBAAuB;AAAA,EAChC,QAAQ,uBAAuB;AACjC;AACA,IAAM,YAAY;AAAA,EAChB,KAAK;AAAA,EACL,UAAU;AAAA,EACV,WAAW;AAAA,EACX,SAAS;AACX;AACA,IAAI,gCAA6C,SAAUI,gCAA+B;AACxF,EAAAA,+BAA8B,aAAa,IAAI;AAC/C,EAAAA,+BAA8B,mBAAmB,IAAI;AACrD,EAAAA,+BAA8B,aAAa,IAAI;AAC/C,EAAAA,+BAA8B,YAAY,IAAI;AAC9C,EAAAA,+BAA8B,eAAe,IAAI;AACjD,EAAAA,+BAA8B,aAAa,IAAI;AAC/C,EAAAA,+BAA8B,OAAO,IAAI;AACzC,SAAOA;AACT,EAAE,CAAC,CAAC;AACJ,IAAM,aAAa;AAAA,EACjB,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AACd;AACA,IAAM,SAAS;AAAA,EACb,sBAAsB;AAAA,EACtB,sBAAsB;AACxB;AACA,IAAM,sBAAsB;AAK5B,IAAI,eAA4B,SAAUC,eAAc;AACtD,EAAAA,cAAaA,cAAa,QAAQ,IAAI,CAAC,IAAI;AAC3C,EAAAA,cAAaA,cAAa,UAAU,IAAI,CAAC,IAAI;AAC7C,SAAOA;AACT,EAAE,CAAC,CAAC;AACJ,IAAM,sBAAsB,CAAC,aAAa,QAAQ,aAAa,QAAQ;AACvE,IAAM,aAAa;AACnB,IAAM,wBAAwB,KAAK;AAEnC,IAAM,cAAc;AACpB,IAAM,oBAAoB;;;ACpC1B,SAAS,SAAS,QAAQ,WAAW;AACnC,QAAM;AAAA,IACJ;AAAA,EACF,IAAI;AACJ,MAAI,gBAAgB;AAClB,mBAAe,QAAQ,SAAS;AAAA,EAClC,OAAO;AAEL,WAAO,YAAY;AAAA,EACrB;AACF;AAQA,SAAS,SAAS,QAAQ,KAAK,OAAO,aAAa;AACjD,QAAM;AAAA,IACJ;AAAA,EACF,IAAI;AACJ,MAAI,mBAAmB;AACrB,sBAAkB,QAAQ,EAAE;AAAA,EAC9B;AACF;AAuBA,IAAM,cAAN,cAA0B,MAAM;AAAA,EAC9B,YAAY,SAAS,SAAS;AAC5B,UAAM,SAAS,OAAO;AAItB,oBAAgB,MAAM,QAAQ,MAAM;AACpC,WAAO,eAAe,MAAM,QAAQ;AAAA,MAClC,OAAO,WAAW;AAAA,MAClB,YAAY;AAAA,MACZ,cAAc;AAAA,IAChB,CAAC;AAID,aAAS,MAAM,WAAW,SAAS;AAEnC,aAAS,IAAI;AAAA,EACf;AACF;AACA,IAAM,uBAAN,cAAmC,YAAY;AAAA,EAC7C,YAAY,MAAM,SAAS;AAEzB,UAAM,OAAO;AACb,oBAAgB,MAAM,QAAQ,MAAM;AACpC,oBAAgB,MAAM,WAAW,MAAM;AACvC,SAAK,OAAO;AACZ,SAAK,UAAU,WAAW;AAE1B,WAAO,eAAe,MAAM,QAAQ;AAAA,MAClC,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,SAAS;AACP,WAAO;AAAA,MACL,MAAM,KAAK;AAAA,MACX,MAAM,KAAK;AAAA,MACX,SAAS,KAAK;AAAA,IAChB;AAAA,EACF;AAAA,EACA,WAAW;AACT,WAAO,KAAK,UAAU,KAAK,OAAO,CAAC;AAAA,EACrC;AACF;AAgBA,IAAM,eAAN,MAAM,sBAAqB,qBAAqB;AAAA,EAC9C,YAAY,MAAM,SAAS;AACzB,UAAM,MAAM,OAAO;AACnB,WAAO,eAAe,MAAM,QAAQ;AAAA,MAClC,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,OAAO,SAAS,MAAM,eAAe,IAAI;AACvC,WAAO,IAAI,cAAa,MAAM,GAAG,cAAa,SAAS,IAAI,CAAC,IAAI,YAAY,EAAE;AAAA,EAChF;AAAA,EACA,OAAO,QAAQ,eAAe,IAAI;AAChC,WAAO,IAAI,cAAa,KAAM,GAAG,cAAa,SAAS,GAAI,CAAC,IAAI,YAAY,EAAE;AAAA,EAChF;AAAA;AAAA,EAGA,OAAO,mBAAmB,eAAe,IAAI;AAC3C,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,gBAAgB,eAAe,IAAI;AACxC,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,uBAAuB,eAAe,IAAI;AAC/C,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,sBAAsB,eAAe,IAAI;AAC9C,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,0BAA0B,eAAe,IAAI;AAClD,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,qBAAqB,eAAe,IAAI;AAC7C,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,cAAc,eAAe,IAAI;AACtC,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA;AAAA,EAGA,OAAO,eAAe,eAAe,IAAI;AACvC,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,0BAA0B,eAAe,IAAI;AAClD,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,kBAAkB,eAAe,IAAI;AAC1C,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,2BAA2B,eAAe,IAAI;AACnD,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,sBAAsB,eAAe,IAAI;AAC9C,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,0BAA0B,eAAe,IAAI;AAClD,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,mCAAmC,eAAe,IAAI;AAC3D,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,0BAA0B,eAAe,IAAI;AAClD,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,kBAAkB,eAAe,IAAI;AAC1C,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,yBAAyB,eAAe,IAAI;AACjD,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,+BAA+B,eAAe,IAAI;AACvD,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,sBAAsB,eAAe,IAAI;AAC9C,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,iBAAiB,eAAe,IAAI;AACzC,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,uBAAuB,eAAe,IAAI;AAC/C,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA;AAAA,EAGA,OAAO,oBAAoB,eAAe,IAAI;AAC5C,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,uBAAuB,eAAe,IAAI;AAC/C,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,kBAAkB,eAAe,IAAI;AAC1C,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,uBAAuB,eAAe,IAAI;AAC/C,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,2BAA2B,eAAe,IAAI;AACnD,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,gBAAgB,eAAe,IAAI;AACxC,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,yBAAyB,eAAe,IAAI;AACjD,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,kBAAkB,eAAe,IAAI;AAC1C,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,gBAAgB,eAAe,IAAI;AACxC,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,qBAAqB,eAAe,IAAI;AAC7C,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,sBAAsB,eAAe,IAAI;AAC9C,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,qBAAqB,eAAe,IAAI;AAC7C,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,qBAAqB,eAAe,IAAI;AAC7C,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,kBAAkB,eAAe,IAAI;AAC1C,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA;AAAA,EAGA,OAAO,uBAAuB,eAAe,IAAI;AAC/C,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AAAA,EACA,OAAO,yBAAyB,eAAe,IAAI;AACjD,WAAO,cAAa,SAAS,MAAM,YAAY;AAAA,EACjD;AACF;AACA,gBAAgB,cAAc,YAAY;AAAA;AAAA,EAExC,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA;AAAA,EAEN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA;AAAA,EAEN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA;AAAA,EAEN,MAAM;AAAA,EACN,MAAM;AACR,CAAC;;;AClSD,IAAM,gBAAN,MAAoB;AAAA,EAClB,cAAc;AACZ,oBAAgB,MAAM,UAAU,CAAC,CAAC;AAAA,EACpC;AAAA,EACA,QAAQ,KAAK;AACX,WAAO,KAAK,OAAO,GAAG,KAAK;AAAA,EAC7B;AAAA,EACA,QAAQ,KAAK,OAAO;AAClB,SAAK,OAAO,GAAG,IAAI;AAAA,EACrB;AAAA,EACA,WAAW,KAAK;AACd,WAAO,KAAK,OAAO,GAAG;AAAA,EACxB;AAAA,EACA,QAAQ;AACN,SAAK,SAAS,CAAC;AAAA,EACjB;AACF;AACA,IAAM,eAAN,MAAmB;AAAA,EACjB,YAAY,UAAU,SAAS;AAC7B,oBAAgB,MAAM,WAAW,MAAM;AACvC,oBAAgB,MAAM,aAAa,MAAM;AACzC,SAAK,UAAU;AACf,SAAK,YAAY;AAAA,EACnB;AAAA,EACA,MAAM,SAAS;AACb,UAAM,SAAS,MAAM,KAAK,QAAQ,QAAQ,KAAK,SAAS;AACxD,QAAI,CAAC,QAAQ;AACX,YAAM,aAAa,qBAAqB,uCAAuC,KAAK,SAAS,IAAI;AAAA,IACnG;AACA,WAAO;AAAA,EACT;AAAA,EACA,MAAM,aAAa;AACjB,UAAM,YAAY,MAAM,KAAK,SAAS;AACtC,UAAM,KAAK,QAAQ,QAAQ,KAAK,WAAW,KAAK,UAAU,CAAC,CAAC,CAAC;AAC7D,WAAO;AAAA,EACT;AAAA,EACA,MAAM,WAAW;AACf,WAAO,KAAK,MAAO,MAAM,KAAK,QAAQ,QAAQ,KAAK,SAAS,KAAM,IAAI;AAAA,EACxE;AAAA,EACA,MAAM,IAAI,KAAK;AACb,UAAM,QAAQ,KAAK,MAAO,MAAM,KAAK,QAAQ,QAAQ,KAAK,SAAS,KAAM,IAAI;AAC7E,WAAO,MAAM,GAAG;AAAA,EAClB;AAAA,EACA,MAAM,IAAI,KAAK,OAAO;AACpB,UAAM,QAAQ,KAAK,MAAO,MAAM,KAAK,QAAQ,QAAQ,KAAK,SAAS,KAAM,IAAI;AAC7E,UAAM,GAAG,IAAI;AACb,UAAM,KAAK,QAAQ,QAAQ,KAAK,WAAW,KAAK,UAAU,KAAK,CAAC;AAAA,EAClE;AAAA,EACA,MAAM,OAAO,KAAK;AAChB,UAAM,QAAQ,KAAK,MAAO,MAAM,KAAK,QAAQ,QAAQ,KAAK,SAAS,KAAM,IAAI;AAC7E,WAAO,MAAM,GAAG;AAChB,UAAM,KAAK,QAAQ,QAAQ,KAAK,WAAW,KAAK,UAAU,KAAK,CAAC;AAAA,EAClE;AACF;;;ACrDA,IAAM,0BAAN,MAAM,iCAAgC,UAAU;AAAA,EAC9C,YAAY,MAAM,SAAS;AAEzB,UAAM,MAAM,OAAO;AAEnB,WAAO,eAAe,MAAM,QAAQ;AAAA,MAClC,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,OAAO,SAAS,MAAM,eAAe,IAAI;AACvC,WAAO,IAAI,yBAAwB,MAAM,GAAG,yBAAwB,SAAS,IAAI,CAAC,GAAG,YAAY,EAAE;AAAA,EACrG;AAAA,EACA,OAAO,QAAQ,eAAe,IAAI;AAChC,WAAO,IAAI,yBAAwB,KAAM,GAAG,yBAAwB,SAAS,GAAI,CAAC,GAAG,YAAY,EAAE;AAAA,EACrG;AAAA;AAAA,EAGA,OAAO,iBAAiB,eAAe,IAAI;AACzC,WAAO,yBAAwB,SAAS,MAAM,YAAY;AAAA,EAC5D;AAAA,EACA,OAAO,eAAe,eAAe,IAAI;AACvC,WAAO,yBAAwB,SAAS,MAAM,YAAY;AAAA,EAC5D;AAAA,EACA,OAAO,gBAAgB,eAAe,IAAI;AACxC,WAAO,yBAAwB,SAAS,MAAM,YAAY;AAAA,EAC5D;AAAA,EACA,OAAO,gBAAgB,eAAe,IAAI;AACxC,WAAO,yBAAwB,SAAS,MAAM,YAAY;AAAA,EAC5D;AACF;AACA,gBAAgB,yBAAyB,YAAY;AAAA,EACnD,KAAM;AAAA;AAAA,EAEN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AACR,CAAC;AACD,IAAI,4BAA4B;;;ACxChC,gBAAe;;;ACDf,IAAM,UAAU,CAAC,WAAW,WAAW,QAAQ,SAAS,SAAS,UAAU,UAAU,YAAY,UAAU,SAAS,UAAU,YAAY,WAAW,UAAU,WAAW,QAAQ,YAAY,WAAW,UAAU,OAAO,UAAU,SAAS,WAAW,UAAU,SAAS,OAAO,UAAU,WAAW,UAAU,SAAS,SAAS,WAAW,UAAU,WAAW,UAAU,UAAU,UAAU,SAAS,OAAO,SAAS,SAAS,SAAS,OAAO,OAAO,WAAW,SAAS,SAAS,SAAS,WAAW,SAAS,SAAS,OAAO,SAAS,SAAS,UAAU,SAAS,SAAS,WAAW,QAAQ,SAAS,UAAU,WAAW,WAAW,SAAS,UAAU,UAAU,WAAW,UAAU,WAAW,SAAS,SAAS,SAAS,UAAU,SAAS,YAAY,UAAU,WAAW,UAAU,WAAW,WAAW,WAAW,OAAO,SAAS,WAAW,UAAU,SAAS,WAAW,SAAS,QAAQ,UAAU,QAAQ,SAAS,SAAS,OAAO,SAAS,SAAS,QAAQ,UAAU,WAAW,UAAU,UAAU,SAAS,OAAO,YAAY,UAAU,WAAW,OAAO,UAAU,WAAW,SAAS,UAAU,UAAU,UAAU,WAAW,QAAQ,UAAU,UAAU,YAAY,WAAW,WAAW,SAAS,UAAU,QAAQ,UAAU,QAAQ,UAAU,WAAW,WAAW,SAAS,SAAS,SAAS,QAAQ,WAAW,SAAS,WAAW,QAAQ,QAAQ,YAAY,SAAS,SAAS,OAAO,WAAW,WAAW,QAAQ,UAAU,UAAU,UAAU,OAAO,UAAU,WAAW,UAAU,QAAQ,SAAS,UAAU,UAAU,SAAS,QAAQ,UAAU,WAAW,UAAU,QAAQ,UAAU,SAAS,UAAU,UAAU,WAAW,SAAS,QAAQ,SAAS,WAAW,QAAQ,UAAU,UAAU,WAAW,UAAU,WAAW,OAAO,QAAQ,QAAQ,WAAW,QAAQ,SAAS,UAAU,SAAS,SAAS,SAAS,WAAW,SAAS,SAAS,SAAS,SAAS,SAAS,WAAW,UAAU,QAAQ,QAAQ,SAAS,SAAS,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,SAAS,QAAQ,SAAS,UAAU,UAAU,UAAU,QAAQ,UAAU,UAAU,OAAO,OAAO,WAAW,SAAS,SAAS,SAAS,SAAS,SAAS,UAAU,SAAS,UAAU,SAAS,UAAU,SAAS,SAAS,YAAY,UAAU,UAAU,SAAS,WAAW,SAAS,SAAS,UAAU,SAAS,UAAU,WAAW,SAAS,QAAQ,QAAQ,UAAU,UAAU,UAAU,UAAU,UAAU,SAAS,OAAO,YAAY,QAAQ,UAAU,SAAS,QAAQ,WAAW,SAAS,SAAS,UAAU,QAAQ,QAAQ,QAAQ,QAAQ,UAAU,QAAQ,OAAO,SAAS,UAAU,SAAS,UAAU,SAAS,UAAU,UAAU,WAAW,WAAW,WAAW,OAAO,UAAU,QAAQ,SAAS,UAAU,SAAS,QAAQ,QAAQ,QAAQ,UAAU,UAAU,UAAU,OAAO,WAAW,SAAS,YAAY,UAAU,UAAU,SAAS,WAAW,QAAQ,WAAW,UAAU,UAAU,UAAU,WAAW,UAAU,WAAW,SAAS,SAAS,YAAY,UAAU,SAAS,WAAW,UAAU,SAAS,QAAQ,SAAS,SAAS,UAAU,QAAQ,UAAU,SAAS,WAAW,SAAS,SAAS,WAAW,UAAU,UAAU,WAAW,WAAW,SAAS,SAAS,SAAS,YAAY,UAAU,WAAW,QAAQ,SAAS,SAAS,QAAQ,WAAW,QAAQ,QAAQ,SAAS,SAAS,UAAU,SAAS,UAAU,SAAS,SAAS,UAAU,QAAQ,SAAS,QAAQ,SAAS,SAAS,SAAS,SAAS,QAAQ,SAAS,WAAW,UAAU,SAAS,SAAS,WAAW,QAAQ,UAAU,QAAQ,QAAQ,WAAW,SAAS,UAAU,WAAW,QAAQ,WAAW,SAAS,UAAU,WAAW,WAAW,WAAW,WAAW,YAAY,WAAW,YAAY,WAAW,YAAY,QAAQ,QAAQ,UAAU,QAAQ,SAAS,QAAQ,QAAQ,WAAW,QAAQ,UAAU,SAAS,WAAW,UAAU,UAAU,UAAU,SAAS,UAAU,SAAS,UAAU,SAAS,QAAQ,SAAS,SAAS,UAAU,SAAS,SAAS,SAAS,UAAU,SAAS,QAAQ,WAAW,SAAS,SAAS,UAAU,QAAQ,SAAS,UAAU,SAAS,WAAW,SAAS,UAAU,WAAW,UAAU,SAAS,OAAO,WAAW,QAAQ,WAAW,OAAO,YAAY,WAAW,WAAW,WAAW,SAAS,WAAW,UAAU,QAAQ,SAAS,OAAO,UAAU,QAAQ,SAAS,UAAU,UAAU,QAAQ,YAAY,QAAQ,OAAO,QAAQ,UAAU,UAAU,UAAU,YAAY,UAAU,WAAW,YAAY,YAAY,QAAQ,WAAW,UAAU,QAAQ,UAAU,SAAS,WAAW,UAAU,UAAU,UAAU,WAAW,QAAQ,UAAU,UAAU,WAAW,SAAS,UAAU,UAAU,YAAY,UAAU,UAAU,QAAQ,WAAW,WAAW,UAAU,UAAU,WAAW,UAAU,UAAU,WAAW,QAAQ,WAAW,SAAS,QAAQ,UAAU,QAAQ,UAAU,WAAW,WAAW,WAAW,UAAU,YAAY,UAAU,QAAQ,YAAY,YAAY,WAAW,QAAQ,WAAW,YAAY,WAAW,YAAY,UAAU,UAAU,WAAW,SAAS,UAAU,YAAY,OAAO,QAAQ,WAAW,UAAU,UAAU,UAAU,SAAS,QAAQ,QAAQ,UAAU,QAAQ,SAAS,UAAU,SAAS,WAAW,QAAQ,SAAS,SAAS,SAAS,SAAS,SAAS,QAAQ,SAAS,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,UAAU,QAAQ,SAAS,QAAQ,SAAS,WAAW,SAAS,SAAS,SAAS,QAAQ,SAAS,UAAU,QAAQ,QAAQ,QAAQ,WAAW,WAAW,QAAQ,QAAQ,WAAW,UAAU,OAAO,SAAS,UAAU,SAAS,SAAS,YAAY,WAAW,WAAW,YAAY,YAAY,SAAS,QAAQ,UAAU,UAAU,WAAW,UAAU,WAAW,UAAU,WAAW,SAAS,UAAU,SAAS,OAAO,WAAW,WAAW,SAAS,UAAU,WAAW,UAAU,UAAU,WAAW,SAAS,UAAU,UAAU,UAAU,UAAU,UAAU,SAAS,UAAU,SAAS,YAAY,WAAW,SAAS,SAAS,OAAO,SAAS,SAAS,WAAW,SAAS,SAAS,UAAU,SAAS,WAAW,UAAU,WAAW,UAAU,YAAY,QAAQ,SAAS,UAAU,SAAS,WAAW,UAAU,YAAY,UAAU,WAAW,UAAU,WAAW,YAAY,WAAW,WAAW,SAAS,SAAS,QAAQ,UAAU,UAAU,UAAU,UAAU,WAAW,UAAU,WAAW,UAAU,SAAS,OAAO,WAAW,UAAU,QAAQ,WAAW,QAAQ,SAAS,SAAS,QAAQ,SAAS,QAAQ,UAAU,UAAU,OAAO,SAAS,WAAW,QAAQ,WAAW,OAAO,SAAS,UAAU,WAAW,SAAS,YAAY,WAAW,YAAY,WAAW,OAAO,QAAQ,QAAQ,UAAU,SAAS,YAAY,SAAS,SAAS,OAAO,SAAS,WAAW,SAAS,UAAU,QAAQ,QAAQ,UAAU,SAAS,QAAQ,QAAQ,UAAU,UAAU,QAAQ,QAAQ,SAAS,UAAU,QAAQ,OAAO,WAAW,OAAO,QAAQ,SAAS,SAAS,QAAQ,UAAU,QAAQ,UAAU,QAAQ,SAAS,SAAS,SAAS,UAAU,SAAS,SAAS,OAAO,QAAQ,SAAS,OAAO,QAAQ,QAAQ,UAAU,QAAQ,QAAQ,SAAS,UAAU,UAAU,QAAQ,WAAW,SAAS,WAAW,UAAU,UAAU,SAAS,OAAO,WAAW,SAAS,YAAY,SAAS,UAAU,UAAU,QAAQ,SAAS,SAAS,SAAS,UAAU,SAAS,QAAQ,OAAO,SAAS,WAAW,QAAQ,UAAU,UAAU,QAAQ,UAAU,WAAW,QAAQ,OAAO,UAAU,WAAW,UAAU,UAAU,WAAW,OAAO,QAAQ,QAAQ,UAAU,SAAS,QAAQ,WAAW,UAAU,SAAS,UAAU,WAAW,WAAW,SAAS,SAAS,QAAQ,UAAU,UAAU,WAAW,QAAQ,QAAQ,QAAQ,UAAU,SAAS,SAAS,SAAS,WAAW,SAAS,SAAS,SAAS,SAAS,QAAQ,QAAQ,QAAQ,WAAW,QAAQ,QAAQ,SAAS,WAAW,UAAU,UAAU,UAAU,QAAQ,QAAQ,SAAS,SAAS,SAAS,SAAS,SAAS,WAAW,SAAS,SAAS,QAAQ,SAAS,QAAQ,WAAW,SAAS,QAAQ,SAAS,SAAS,SAAS,SAAS,SAAS,UAAU,OAAO,OAAO,SAAS,QAAQ,QAAQ,UAAU,WAAW,QAAQ,SAAS,UAAU,QAAQ,SAAS,WAAW,OAAO,QAAQ,QAAQ,UAAU,QAAQ,UAAU,SAAS,SAAS,YAAY,UAAU,SAAS,UAAU,QAAQ,OAAO,QAAQ,UAAU,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,WAAW,SAAS,UAAU,QAAQ,QAAQ,WAAW,UAAU,QAAQ,SAAS,QAAQ,QAAQ,QAAQ,UAAU,SAAS,YAAY,QAAQ,SAAS,QAAQ,SAAS,OAAO,QAAQ,SAAS,UAAU,SAAS,WAAW,UAAU,QAAQ,UAAU,SAAS,QAAQ,WAAW,UAAU,OAAO,QAAQ,QAAQ,YAAY,QAAQ,UAAU,OAAO,WAAW,WAAW,SAAS,WAAW,WAAW,UAAU,UAAU,UAAU,WAAW,WAAW,QAAQ,WAAW,UAAU,YAAY,SAAS,YAAY,UAAU,YAAY,UAAU,WAAW,UAAU,UAAU,WAAW,WAAW,UAAU,UAAU,UAAU,SAAS,YAAY,SAAS,WAAW,UAAU,UAAU,UAAU,WAAW,WAAW,UAAU,YAAY,QAAQ,UAAU,UAAU,WAAW,QAAQ,UAAU,WAAW,SAAS,QAAQ,SAAS,UAAU,UAAU,OAAO,QAAQ,WAAW,SAAS,SAAS,SAAS,OAAO,QAAQ,QAAQ,WAAW,OAAO,SAAS,SAAS,QAAQ,UAAU,UAAU,QAAQ,QAAQ,YAAY,QAAQ,QAAQ,WAAW,OAAO,QAAQ,OAAO,UAAU,QAAQ,WAAW,QAAQ,OAAO,WAAW,QAAQ,UAAU,QAAQ,QAAQ,SAAS,SAAS,QAAQ,OAAO,SAAS,SAAS,UAAU,QAAQ,QAAQ,QAAQ,YAAY,UAAU,SAAS,SAAS,SAAS,SAAS,WAAW,QAAQ,OAAO,QAAQ,WAAW,SAAS,QAAQ,UAAU,QAAQ,SAAS,SAAS,WAAW,QAAQ,OAAO,SAAS,UAAU,WAAW,SAAS,QAAQ,UAAU,QAAQ,WAAW,UAAU,UAAU,SAAS,QAAQ,WAAW,WAAW,WAAW,QAAQ,QAAQ,SAAS,QAAQ,QAAQ,SAAS,QAAQ,QAAQ,UAAU,QAAQ,UAAU,QAAQ,UAAU,QAAQ,QAAQ,WAAW,SAAS,QAAQ,SAAS,UAAU,QAAQ,QAAQ,WAAW,QAAQ,UAAU,QAAQ,SAAS,SAAS,WAAW,UAAU,SAAS,SAAS,UAAU,UAAU,WAAW,OAAO,SAAS,UAAU,QAAQ,QAAQ,QAAQ,SAAS,QAAQ,UAAU,OAAO,UAAU,WAAW,SAAS,WAAW,UAAU,SAAS,UAAU,SAAS,UAAU,UAAU,UAAU,YAAY,QAAQ,QAAQ,UAAU,SAAS,YAAY,QAAQ,UAAU,UAAU,WAAW,QAAQ,UAAU,QAAQ,WAAW,QAAQ,YAAY,SAAS,SAAS,UAAU,QAAQ,UAAU,UAAU,WAAW,QAAQ,SAAS,SAAS,SAAS,SAAS,QAAQ,WAAW,SAAS,UAAU,UAAU,YAAY,QAAQ,WAAW,SAAS,QAAQ,WAAW,SAAS,UAAU,WAAW,UAAU,UAAU,QAAQ,WAAW,OAAO,SAAS,WAAW,UAAU,SAAS,UAAU,OAAO,UAAU,WAAW,UAAU,WAAW,SAAS,QAAQ,SAAS,QAAQ,WAAW,YAAY,UAAU,UAAU,SAAS,YAAY,SAAS,QAAQ,SAAS,QAAQ,UAAU,QAAQ,YAAY,UAAU,UAAU,YAAY,SAAS,QAAQ,UAAU,UAAU,WAAW,QAAQ,SAAS,QAAQ,UAAU,UAAU,SAAS,UAAU,UAAU,QAAQ,QAAQ,QAAQ,YAAY,WAAW,WAAW,UAAU,SAAS,QAAQ,OAAO,WAAW,WAAW,SAAS,QAAQ,QAAQ,QAAQ,SAAS,SAAS,SAAS,WAAW,UAAU,UAAU,SAAS,QAAQ,WAAW,QAAQ,WAAW,UAAU,SAAS,OAAO,WAAW,UAAU,SAAS,OAAO,OAAO,QAAQ,UAAU,UAAU,WAAW,WAAW,UAAU,WAAW,SAAS,SAAS,WAAW,QAAQ,OAAO,SAAS,UAAU,SAAS,OAAO,QAAQ,OAAO,SAAS,WAAW,QAAQ,QAAQ,OAAO,SAAS,UAAU,QAAQ,QAAQ,SAAS,WAAW,UAAU,UAAU,UAAU,SAAS,WAAW,SAAS,YAAY,SAAS,UAAU,YAAY,UAAU,WAAW,SAAS,WAAW,SAAS,UAAU,WAAW,QAAQ,QAAQ,QAAQ,OAAO,SAAS,UAAU,UAAU,SAAS,QAAQ,UAAU,QAAQ,QAAQ,UAAU,QAAQ,SAAS,SAAS,SAAS,WAAW,SAAS,UAAU,UAAU,QAAQ,UAAU,SAAS,QAAQ,SAAS,QAAQ,WAAW,UAAU,WAAW,SAAS,QAAQ,WAAW,SAAS,UAAU,QAAQ,WAAW,WAAW,OAAO,WAAW,UAAU,UAAU,UAAU,WAAW,UAAU,UAAU,OAAO,SAAS,SAAS,UAAU,YAAY,SAAS,UAAU,WAAW,SAAS,OAAO,UAAU,QAAQ,SAAS,QAAQ,WAAW,QAAQ,UAAU,SAAS,SAAS,SAAS,UAAU,WAAW,SAAS,QAAQ,UAAU,UAAU,SAAS,QAAQ,UAAU,QAAQ,QAAQ,SAAS,SAAS,QAAQ,UAAU,QAAQ,QAAQ,QAAQ,WAAW,WAAW,YAAY,YAAY,QAAQ,UAAU,WAAW,WAAW,UAAU,SAAS,YAAY,UAAU,WAAW,UAAU,WAAW,WAAW,UAAU,WAAW,SAAS,SAAS,WAAW,SAAS,YAAY,UAAU,WAAW,SAAS,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,SAAS,YAAY,WAAW,WAAW,SAAS,WAAW,UAAU,WAAW,QAAQ,QAAQ,SAAS,WAAW,SAAS,SAAS,SAAS,YAAY,UAAU,WAAW,SAAS,QAAQ,OAAO,UAAU,WAAW,WAAW,WAAW,WAAW,YAAY,SAAS,QAAQ,QAAQ,SAAS,UAAU,WAAW,QAAQ,QAAQ,SAAS,SAAS,QAAQ,QAAQ,SAAS,SAAS,QAAQ,SAAS,UAAU,SAAS,SAAS,QAAQ,QAAQ,UAAU,SAAS,OAAO,SAAS,SAAS,QAAQ,UAAU,SAAS,WAAW,UAAU,WAAW,UAAU,UAAU,WAAW,UAAU,WAAW,UAAU,UAAU,UAAU,UAAU,WAAW,UAAU,SAAS,WAAW,UAAU,QAAQ,UAAU,YAAY,UAAU,UAAU,UAAU,SAAS,QAAQ,UAAU,UAAU,UAAU,WAAW,UAAU,WAAW,UAAU,YAAY,UAAU,YAAY,YAAY,UAAU,UAAU,WAAW,UAAU,WAAW,UAAU,UAAU,UAAU,UAAU,OAAO,UAAU,QAAQ,QAAQ,QAAQ,SAAS,SAAS,SAAS,SAAS,QAAQ,QAAQ,UAAU,QAAQ,UAAU,SAAS,SAAS,QAAQ,SAAS,SAAS,UAAU,UAAU,WAAW,QAAQ,UAAU,QAAQ,QAAQ,UAAU,SAAS,SAAS,SAAS,SAAS,UAAU,QAAQ,OAAO,QAAQ,OAAO,UAAU,SAAS,OAAO,UAAU,WAAW,QAAQ,QAAQ,SAAS,UAAU,SAAS,QAAQ,UAAU,QAAQ,UAAU,QAAQ,WAAW,WAAW,SAAS,WAAW,QAAQ,OAAO,SAAS,QAAQ,SAAS,WAAW,SAAS,UAAU,UAAU,WAAW,YAAY,YAAY,SAAS,SAAS,UAAU,UAAU,SAAS,OAAO,UAAU,UAAU,QAAQ,UAAU,UAAU,WAAW,YAAY,QAAQ,QAAQ,WAAW,UAAU,QAAQ,WAAW,UAAU,SAAS,YAAY,UAAU,WAAW,WAAW,UAAU,SAAS,SAAS,UAAU,SAAS,WAAW,SAAS,QAAQ,SAAS,WAAW,UAAU,SAAS,SAAS,QAAQ,UAAU,SAAS,QAAQ,SAAS,QAAQ,SAAS,YAAY,SAAS,UAAU,SAAS,WAAW,OAAO,WAAW,QAAQ,QAAQ,SAAS,SAAS,QAAQ,UAAU,QAAQ,SAAS,UAAU,WAAW,UAAU,SAAS,QAAQ,SAAS,UAAU,WAAW,OAAO,QAAQ,SAAS,UAAU,OAAO,SAAS,QAAQ,SAAS,SAAS,QAAQ,QAAQ,SAAS,WAAW,SAAS,SAAS,UAAU,QAAQ,UAAU,QAAQ,QAAQ,SAAS,SAAS,SAAS,SAAS,SAAS,UAAU,SAAS,SAAS,QAAQ,SAAS,QAAQ,QAAQ,UAAU,UAAU,QAAQ,QAAQ,QAAQ,SAAS,WAAW,SAAS,YAAY,SAAS,WAAW,QAAQ,QAAQ,SAAS,QAAQ,QAAQ,SAAS,QAAQ,UAAU,SAAS,SAAS,SAAS,WAAW,SAAS,SAAS,WAAW,SAAS,SAAS,SAAS,UAAU,SAAS,UAAU,SAAS,QAAQ,UAAU,SAAS,SAAS,WAAW,SAAS,SAAS,QAAQ,SAAS,UAAU,UAAU,OAAO,UAAU,WAAW,YAAY,UAAU,WAAW,SAAS,SAAS,UAAU,SAAS,SAAS,SAAS,SAAS,QAAQ,SAAS,SAAS,QAAQ,QAAQ,UAAU,SAAS,SAAS,SAAS,SAAS,WAAW,SAAS,SAAS,SAAS,SAAS,YAAY,UAAU,UAAU,UAAU,YAAY,WAAW,SAAS,WAAW,SAAS,WAAW,UAAU,UAAU,WAAW,QAAQ,UAAU,UAAU,SAAS,WAAW,QAAQ,UAAU,OAAO,SAAS,UAAU,SAAS,UAAU,WAAW,QAAQ,WAAW,SAAS,YAAY,YAAY,UAAU,WAAW,WAAW,WAAW,SAAS,QAAQ,SAAS,SAAS,SAAS,SAAS,QAAQ,SAAS,UAAU,SAAS,UAAU,WAAW,SAAS,UAAU,SAAS,UAAU,OAAO,QAAQ,UAAU,QAAQ,QAAQ,QAAQ,UAAU,QAAQ,SAAS,UAAU,QAAQ,SAAS,QAAQ,QAAQ,OAAO,UAAU,UAAU,QAAQ,QAAQ,QAAQ,QAAQ,SAAS,QAAQ,SAAS,QAAQ,UAAU,SAAS,QAAQ,SAAS,QAAQ,WAAW,SAAS,UAAU,SAAS,SAAS,WAAW,UAAU,QAAQ,SAAS,QAAQ,UAAU,QAAQ,QAAQ,OAAO,SAAS,UAAU,SAAS,SAAS,WAAW,SAAS,WAAW,OAAO,YAAY,UAAU,SAAS,UAAU,YAAY,QAAQ,UAAU,WAAW,QAAQ,SAAS,OAAO,SAAS,UAAU,SAAS,WAAW,YAAY,QAAQ,SAAS,WAAW,UAAU,SAAS,QAAQ,OAAO,SAAS,SAAS,WAAW,UAAU,SAAS,YAAY,QAAQ,SAAS,UAAU,QAAQ,SAAS,QAAQ,SAAS,SAAS,SAAS,SAAS,WAAW,QAAQ,QAAQ,UAAU,WAAW,SAAS,QAAQ,SAAS,WAAW,SAAS,SAAS,OAAO,QAAQ,WAAW,UAAU,QAAQ,UAAU,UAAU,QAAQ,UAAU,UAAU,UAAU,SAAS,QAAQ,SAAS,OAAO,QAAQ,WAAW,QAAQ,YAAY,UAAU,WAAW,SAAS,WAAW,SAAS,QAAQ,UAAU,UAAU,WAAW,WAAW,UAAU,QAAQ,YAAY,WAAW,UAAU,SAAS,WAAW,UAAU,UAAU,WAAW,UAAU,QAAQ,SAAS,SAAS,SAAS,QAAQ,SAAS,OAAO,QAAQ,UAAU,WAAW,SAAS,WAAW,UAAU,UAAU,SAAS,SAAS,UAAU,SAAS,OAAO,UAAU,SAAS,WAAW,QAAQ,SAAS,WAAW,UAAU,UAAU,WAAW,SAAS,QAAQ,UAAU,WAAW,QAAQ,UAAU,WAAW,UAAU,WAAW,WAAW,WAAW,SAAS,QAAQ,WAAW,WAAW,UAAU,WAAW,SAAS,QAAQ,SAAS,UAAU,SAAS,SAAS,SAAS,SAAS,QAAQ,WAAW,UAAU,QAAQ,UAAU,QAAQ,SAAS,QAAQ,QAAQ,QAAQ,UAAU,QAAQ,WAAW,QAAQ,WAAW,QAAQ,QAAQ,SAAS,SAAS,QAAQ,OAAO,UAAU,UAAU,QAAQ,UAAU,WAAW,OAAO,WAAW,WAAW,SAAS,WAAW,QAAQ,OAAO,SAAS,QAAQ,SAAS,SAAS,QAAQ,SAAS,QAAQ,WAAW,QAAQ,SAAS,QAAQ,QAAQ,QAAQ,OAAO,UAAU,QAAQ,QAAQ,QAAQ,UAAU,UAAU,QAAQ,UAAU,QAAQ,QAAQ,WAAW,QAAQ,SAAS,UAAU,QAAQ,QAAQ,QAAQ,QAAQ,SAAS,SAAS,SAAS,QAAQ,SAAS,WAAW,SAAS,SAAS,SAAS,QAAQ,QAAQ,UAAU,OAAO,SAAS,SAAS,SAAS,QAAQ,QAAQ,KAAK;;;ACG30lB,SAAS,UAAU,KAAK;AACtB,UAAQ,OAAO,IAAI,UAAU,MAAM;AACrC;AACA,SAAS,aAAa,KAAK;AACzB,SAAO,SAAS,KAAK,CAAC;AACxB;AACA,SAAS,KAAK,KAAK,WAAW,QAAQ;AACpC,MAAI,SAAS;AACb,SAAO,OAAO,SAAS,QAAQ;AAC7B,aAAS,YAAY;AAAA,EACvB;AACA,SAAO;AACT;AACA,SAAS,cAAc,OAAO;AAC5B,SAAO,MAAM,IAAI,OAAK,KAAK,EAAE,SAAS,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE;AAC5D;AACA,SAAS,mBAAmB,eAAe;AACzC,QAAM,MAAM,cAAc,SAAS;AACnC,QAAM,KAAK,MAAM;AACjB,QAAM,OAAO,OAAO,aAAa;AACjC,SAAO,cAAc,MAAM,KAAK,IAAI,CAAC,EAAE,MAAM,GAAG,EAAE;AACpD;AACA,SAAS,kBAAkB,SAASC,UAAS;AAC3C,MAAI;AACJ,MAAI,CAAC,OAAO,SAAS,OAAO,GAAG;AAC7B,iBAAa,OAAO,KAAK,SAAS,KAAK;AAAA,EACzC;AAGA,MAAI,WAAW,SAAS,IAAI;AAC1B,UAAM,0BAAwB,eAAe;AAAA,EAC/C;AACA,MAAI,WAAW,SAAS,IAAI;AAC1B,UAAM,0BAAwB,eAAe;AAAA,EAC/C;AACA,MAAI,WAAW,SAAS,MAAM,GAAG;AAC/B,UAAM,0BAAwB,eAAe;AAAA,EAC/C;AACA,QAAM,cAAc,cAAc,MAAM,KAAK,UAAU,CAAC;AACxD,QAAM,eAAe,mBAAmB,UAAU;AAClD,QAAM,OAAO,cAAc;AAC3B,QAAM,SAAS,KAAK,MAAM,YAAY;AACtC,QAAM,QAAQ,OAAO,IAAI,YAAU;AACjC,UAAM,QAAQ,aAAa,MAAM;AACjC,WAAOA,SAAQ,KAAK;AAAA,EACtB,CAAC;AACD,SAAOA,SAAQ,CAAC,MAAM,WACpB,MAAM,KAAK,GAAQ,IAAI,MAAM,KAAK,GAAG;AACzC;AACA,SAAS,kBAAkB,UAAUA,UAAS;AAC5C,QAAM,QAAQ,UAAU,QAAQ,EAAE,MAAM,GAAG;AAC3C,MAAI,MAAM,SAAS,MAAM,GAAG;AAC1B,UAAM,0BAAwB,gBAAgB;AAAA,EAChD;AAGA,QAAM,OAAO,MAAM,IAAI,UAAQ;AAC7B,UAAM,QAAQA,SAAQ,QAAQ,IAAI;AAClC,QAAI,UAAU,IAAI;AAChB,YAAM,0BAAwB,gBAAgB;AAAA,IAChD;AACA,WAAO,KAAK,MAAM,SAAS,CAAC,GAAG,KAAK,EAAE;AAAA,EACxC,CAAC,EAAE,KAAK,EAAE;AAGV,QAAM,eAAe,KAAK,MAAM,KAAK,SAAS,EAAE,IAAI;AACpD,QAAM,cAAc,KAAK,MAAM,GAAG,YAAY;AAC9C,QAAM,eAAe,KAAK,MAAM,YAAY;AAG5C,QAAM,eAAe,YAAY,MAAM,WAAW,EAAE,IAAI,YAAY;AACpE,MAAI,aAAa,SAAS,IAAI;AAC5B,UAAM,0BAAwB,eAAe;AAAA,EAC/C;AACA,MAAI,aAAa,SAAS,IAAI;AAC5B,UAAM,0BAAwB,eAAe;AAAA,EAC/C;AACA,MAAI,aAAa,SAAS,MAAM,GAAG;AACjC,UAAM,0BAAwB,eAAe;AAAA,EAC/C;AACA,QAAM,UAAU,OAAO,KAAK,YAAY;AACxC,QAAM,cAAc,mBAAmB,OAAO;AAC9C,MAAI,gBAAgB,cAAc;AAChC,UAAM,0BAAwB,gBAAgB;AAAA,EAChD;AACA,SAAO,QAAQ,SAAS,KAAK;AAC/B;;;AFnFA,IAAM,kCAAkC;AACxC,IAAM,2BAAN,MAAM,0BAAyB;AAAA,EAC7B,cAAc;AACZ,oBAAgB,MAAM,cAAc,MAAM;AAC1C,oBAAgB,MAAM,SAAS,MAAM;AACrC,SAAK,aAAa;AAAA,EACpB;AAAA,EACA,OAAO,kBAAkB,OAAO;AAC9B,WAAO,kBAAkB,MAAM,SAAS,KAAK,EAAE,SAAS,IAAI,GAAG,GAAG,OAAO;AAAA,EAC3E;AAAA,EACA,OAAO,oBAAoB,OAAO;AAChC,WAAO,IAAI,UAAAC,QAAG,kBAAkB,OAAO,OAAO,GAAG,KAAK;AAAA,EACxD;AAAA,EACA,oBAAoB,OAAO;AACzB,SAAK,QAAQ;AACb,SAAK,MAAM,iCAAiC,KAAK,UAAU,KAAK,IAAI,GAAG,KAAK,YAAY,KAAK,IAAI,CAAC;AAAA,EACpG;AAAA;AAAA,EAGA,MAAM,aAAa;AAAA,EAAC;AAAA,EACpB,MAAM,UAAU,OAAO,MAAM;AAC3B,QAAI,SAAS,YAAY;AACvB,aAAO,0BAAyB,kBAAkB,KAAK;AAAA,IACzD;AACA,UAAM,0BAAwB,iBAAiB;AAAA,EACjD;AAAA,EACA,MAAM,YAAY,iBAAiB,MAAM;AACvC,QAAI,SAAS,WAAY,QAAO,0BAAyB,oBAAoB,eAAe;AAC5F,UAAM,0BAAwB,iBAAiB;AAAA,EACjD;AACF;AACA,IAAI,6BAA6B;;;AGpCjC,IAAAC,aAAe;AAOf,SAAS,cAAc,eAAe;AACpC,QAAM,YAAY,2BAAyB,oBAAoB,aAAa;AAC5E,SAAO,UAAU,SAAS,KAAK;AACjC;AAOA,SAAS,cAAc,UAAU;AAC/B,QAAM,UAAU,IAAI,WAAAC,QAAG,UAAU,KAAK;AACtC,QAAM,WAAW,2BAAyB,kBAAkB,OAAO;AACnE,SAAO;AACT;;;ACjBA,IAAAC,aAAe;AAGf,IAAM,2BAAN,MAAM,0BAAyB;AAAA,EAC7B,YAAY,YAAY,iBAAiB,UAAU;AACjD,oBAAgB,MAAM,cAAc,MAAM;AAC1C,oBAAgB,MAAM,mBAAmB,MAAM;AAC/C,oBAAgB,MAAM,YAAY,MAAM;AACxC,SAAK,aAAa;AAClB,SAAK,kBAAkB;AACvB,SAAK,WAAW;AAAA,EAClB;AAAA,EACA,OAAO,SAAS,MAAM;AACpB,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI;AACJ,WAAO,IAAI,0BAAyB,YAAY,iBAAiB,QAAQ;AAAA,EAC3E;AAAA,EACA,SAAS;AACP,WAAO;AAAA,MACL,YAAY,KAAK;AAAA,MACjB,iBAAiB,KAAK;AAAA,MACtB,UAAU,KAAK;AAAA,IACjB;AAAA,EACF;AACF;AACA,IAAM,sBAAN,MAA0B;AAAA,EACxB,cAAc;AACZ,oBAAgB,MAAM,mBAAmB,qBAAqB;AAAA,EAChE;AAAA,EACA,MAAM,oBAAoB,QAAQ;AAChC,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI;AACJ,QAAI;AAAA,MACF;AAAA,IACF,IAAI;AACJ,QAAI,CAAC,WAAW,MAAM;AACpB,YAAM,IAAI,MAAM,wCAAwC;AAAA,IAC1D;AACA,QAAI,CAAC,YAAY,CAAC,QAAQ;AACxB,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACpD;AACA,UAAM,YAAY,GAAG,KAAK,eAAe,IAAI,OAAO,WAAW,KAAK,MAAM;AAG1E,QAAI,CAAC,WAAW;AACd,kBAAY,aAAa;AAAA,IAC3B,WAAW,CAAC,oBAAoB,SAAS,SAAS,GAAG;AACnD,YAAM,IAAI,MAAM,sCAAsC,mBAAmB,EAAE;AAAA,IAC7E;AAEA,UAAM,OAAO,WAAW;AACxB,UAAM,cAAc,KAAK,SAAS,sBAAsB,SAAS;AACjE,QAAI,eAAe,YAAY,UAAU;AACvC,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACpD;AAGA,UAAM,SAAS,KAAK,cAAc,EAAE,OAAO,OAAO,WAAW,IAAI,EAAE,SAAS,KAAK,IAAI,KAAK;AAC1F,QAAI,OAAOC,WAAU,OAAO,KAAK,SAAS,QAAQ,MAAM,CAAC;AACzD,WAAO,KAAK,WAAW,IAAI,IAAI,KAAK,MAAM,CAAC,IAAI;AAC/C,UAAM,cAAc,IAAI,WAAAC,QAAG,MAAM,KAAK;AACtC,UAAM,mBAAmB,eAAc;AAAA,MACrC;AAAA,IACF,GAAG,WAAW;AACd,UAAM,WAAW,aAAa;AAAA,MAC5B,WAAW;AAAA,MACX;AAAA,MACA,kBAAkB,8BAA8B;AAAA,MAChD,oBAAoB;AAAA,IACtB,CAAC;AAED,UAAM,SAASC,gBAAe,aAAa,cAAc;AACzD,UAAM,YAAY,OAAO,OAAO,gBAAgB,IAAI,EAAE,SAAS,KAAK;AACpE,UAAM,YAAY,IAAI,yBAAyB,UAAU,SAAS,GAAG,WAAW,QAAQ;AACxF,SAAK,SAAS,sBAAsB,WAAW,UAAU,OAAO,CAAC;AAGjE,QAAI,CAAC,KAAK,WAAY,OAAM,KAAK,mBAAmB;AACpD,WAAO,YAAY,SAAS,KAAK,EAAE,SAAS,IAAI,GAAG;AAAA,EACrD;AAAA,EACA,MAAM,uBAAuB,QAAQ;AACnC,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI;AACJ,QAAI,CAAC,eAAe,CAAC,aAAa,CAAC,QAAQ;AACzC,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACpD;AAEA,UAAM,OAAO,WAAW;AAExB,UAAM,SAAS,KAAK,cAAc,EAAE,OAAO,OAAO,WAAW,IAAI,EAAE,SAAS,KAAK,IAAI,KAAK;AAC1F,UAAM,YAAY,GAAG,KAAK,eAAe,IAAI,OAAO,WAAW,KAAK,MAAM;AAC1E,UAAM,cAAc,KAAK,SAAS,sBAAsB,SAAS;AACjE,QAAI,CAAC,eAAe,CAAC,YAAY,UAAU;AACzC,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACrD;AACA,UAAM,QAAQ,yBAAyB,SAAS,WAAW;AAC3D,UAAM,UAAU,SAAS;AACzB,QAAI,OAAOF,WAAU,OAAO,KAAK,SAAS,MAAM,CAAC;AACjD,WAAO,KAAK,WAAW,IAAI,IAAI,KAAK,MAAM,CAAC,IAAI;AAC/C,UAAM,cAAc,IAAI,WAAAC,QAAG,MAAM,KAAK;AACtC,UAAM,cAAcC,gBAAe,aAAa,cAAc;AAC9D,QAAI,YAAY,OAAO,gBAAgB,IAAI,EAAE,SAAS,KAAK,MAAM,MAAM,iBAAiB;AACtF,YAAM,IAAI,MAAM,gBAAgB;AAAA,IAClC;AAGA,UAAM,aAAa,YAAY;AAC/B,QAAI,UAAUF,WAAU,OAAO,KAAK,YAAY,MAAM,CAAC;AACvD,cAAU,QAAQ,WAAW,IAAI,IAAI,QAAQ,MAAM,CAAC,IAAI;AACxD,UAAM,cAAc,IAAI,WAAAC,QAAG,SAAS,KAAK;AACzC,UAAM,cAAc,QAAM,WAAW,aAAa,cAAc;AAChE,UAAM,WAAW,aAAa;AAAA,MAC5B,WAAW;AAAA,MACX,WAAW,SAAS,MAAM,UAAU;AAAA,MACpC,kBAAkB,8BAA8B;AAAA,IAClD,CAAC;AAGD,QAAI,WAAW,MAAM,UAAU,GAAG,WAAW,GAAG;AAC9C,YAAM,WAAW,eAAe,WAAW;AAAA,IAC7C;AAGA,UAAM,WAAW,aAAa,aAAa,WAAW;AACtD,UAAM,kBAAkB,YAAY,OAAO,gBAAgB,IAAI,EAAE,SAAS,KAAK;AAC/E,UAAM,WAAW;AACjB,SAAK,SAAS,sBAAsB,WAAW,MAAM,OAAO,CAAC;AAG7D,QAAI,CAAC,KAAK,WAAY,OAAM,KAAK,mBAAmB;AAAA,EACtD;AAAA;AAAA,EAGA,MAAM,uBAAuB,YAAY,kBAAkB,MAAM;AAC/D,QAAI,CAAC,WAAW,MAAM;AACpB,YAAM,IAAI,MAAM,wCAAwC;AAAA,IAC1D;AACA,UAAM,YAAY,GAAG,KAAK,eAAe,IAAI,WAAW,KAAK,MAAM;AACnE,UAAM,OAAO,WAAW;AACxB,QAAI,iBAAiB;AACnB,YAAM,cAAc,KAAK,SAAS,sBAAsB,SAAS;AACjE,UAAI,CAAC,eAAe,CAAC,YAAY,UAAU;AACzC,cAAM,IAAI,MAAM,mCAAmC;AAAA,MACrD;AACA,YAAM,QAAQ,yBAAyB,SAAS,WAAW;AAC3D,UAAI,MAAM,iBAAiB;AACzB,cAAM,WAAW,aAAa,QAAM,SAAS,gBAAgB,MAAM,eAAe,CAAC;AAAA,MACrF;AAAA,IACF;AACA,SAAK,SAAS,yBAAyB,SAAS;AAEhD,QAAI,CAAC,KAAK,WAAY,OAAM,KAAK,mBAAmB;AAAA,EACtD;AAAA,EACA,MAAM,cAAc,YAAY,QAAQ;AACtC,QAAI,CAAC,WAAW,MAAM;AACpB,YAAM,IAAI,MAAM,wCAAwC;AAAA,IAC1D;AACA,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI,MAAM,kCAAkC;AAAA,IACpD;AACA,UAAM,OAAO,WAAW;AACxB,UAAM,YAAY,GAAG,KAAK,eAAe,IAAI,WAAW,KAAK,MAAM;AACnE,UAAM,cAAc,KAAK,SAAS,sBAAsB,SAAS;AACjE,QAAI,CAAC,eAAe,CAAC,YAAY,UAAU;AACzC,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACrD;AACA,UAAM,QAAQ,yBAAyB,SAAS,WAAW;AAG3D,UAAM,SAAS,KAAK,cAAc,EAAE,OAAO,OAAO,WAAW,IAAI,EAAE,SAAS,KAAK,IAAI,KAAK;AAC1F,QAAI,OAAOD,WAAU,OAAO,KAAK,SAAS,QAAQ,MAAM,CAAC;AACzD,WAAO,KAAK,WAAW,IAAI,IAAI,KAAK,MAAM,CAAC,IAAI;AAC/C,UAAM,cAAc,IAAI,WAAAC,QAAG,MAAM,KAAK;AACtC,UAAM,cAAc,QAAM,WAAW,aAAa,cAAc;AAChE,QAAI,YAAY,OAAO,gBAAgB,IAAI,EAAE,SAAS,KAAK,MAAM,MAAM,iBAAiB;AACtF,YAAM,IAAI,MAAM,gBAAgB;AAAA,IAClC;AACA,WAAO;AAAA,EACT;AAAA,EACA,YAAY,YAAY;AACtB,QAAI,CAAC,WAAW,MAAM;AACpB,YAAM,IAAI,MAAM,wCAAwC;AAAA,IAC1D;AACA,UAAM,OAAO,WAAW;AACxB,UAAM,YAAY,GAAG,KAAK,eAAe,IAAI,WAAW,KAAK,MAAM;AACnE,UAAM,cAAc,KAAK,SAAS,sBAAsB,SAAS;AACjE,QAAI,CAAC,eAAe,CAAC,YAAY,UAAU;AACzC,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACrD;AACA,UAAM,QAAQ,yBAAyB,SAAS,WAAW;AAC3D,WAAO,MAAM;AAAA,EACf;AACF;;;AC9MA,IAAI,iBAA8B,SAAUE,iBAAgB;AAC1D,EAAAA,gBAAe,iBAAiB,IAAI;AACpC,EAAAA,gBAAe,aAAa,IAAI;AAChC,EAAAA,gBAAe,gBAAgB,IAAI;AACnC,EAAAA,gBAAe,WAAW,IAAI;AAC9B,SAAOA;AACT,EAAE,CAAC,CAAC;;;ACNJ,mCAAsB;;;ACCtB,uBAAsB;AACtB,IAAAC,aAAe;AAEf,IAAAC,gCAAsB;AAEtB,SAAS,oBAAoB,MAAM,SAAS;AAC1C,QAAM,MAAM,UAAU,KAAK,UAAU,OAAO,SAAK,8BAAAC,SAAU,IAAI,GAAG,MAAM,CAAC,GAAG,aAAa,OAAO,GAAG,OAAO;AAC1G,SAAO,IAAI,MAAM,KAAK;AACxB;AACA,IAAM,oBAAN,MAAM,mBAAkB;AAAA,EACtB,YAAY;AAAA,IACV,gBAAgB;AAAA,IAChB,UAAU;AAAA,IACV,mBAAmB;AAAA,EACrB,GAAG;AACD,oBAAgB,MAAM,iBAAiB,MAAM;AAC7C,oBAAgB,MAAM,WAAW,MAAM;AACvC,oBAAgB,MAAM,oBAAoB,MAAM;AAChD,oBAAgB,MAAM,oBAAoB,MAAM;AAChD,SAAK,gBAAgB;AACrB,SAAK,UAAU;AACf,SAAK,mBAAmB;AACxB,SAAK,mBAAmB;AAAA,EAC1B;AAAA,EACA,aAAa,6BAA6B,IAAI,iBAAiB,SAAS;AACtE,QAAI,OAAO,OAAO,UAAU;AAE1B,YAAM,MAAM;AACZ,YAAM,mBAAmB,IAAI,YAAY;AACzC,UAAI,iBAAkB,QAAO,IAAI;AAAA,IACnC;AAGA,UAAM,iBAAiB,OAAO,SAAK,8BAAAA,SAAU,EAAE,CAAC;AAChD,QAAI;AACJ,QAAI,SAAS;AACX,yBAAmB,MAAM,QAAQ,aAAa,OAAO,GAAG,cAAc;AAAA,IACxE,OAAO;AACL,yBAAmB,MAAM,gBAAgB,QAAQ,cAAc;AAAA,IACjE;AACA,UAAM,6BAA6B,iBAAAC,QAAU,WAAO,8BAAAD,SAAU,gBAAgB,CAAC;AAC/E,WAAO;AAAA,EACT;AAAA,EACA,OAAO,SAAS,OAAO;AACrB,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA,mBAAmB;AAAA,IACrB,IAAI;AACJ,QAAI,qBAAqB,oBAAqB,QAAO;AACrD,WAAO,IAAI,mBAAkB;AAAA,MAC3B;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,YAAY,QAAQ;AACxB,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACF,IAAI;AACJ,UAAM,aAAa,KAAK,uBAAuB,CAAC,GAAG,iBAAiB,OAAO;AAC3E,UAAM,mBAAmB,MAAM,KAAK,GAAG,KAAK,OAAO,QAAQ,UAAU;AAErE,QAAI,iBAAiB,YAAY,IAAI;AACnC,aAAO;AAAA,QACL,SAAS;AAAA,MACX;AAAA,IACF;AACA,UAAM,mBAAmB,KAAK,MAAM,iBAAAC,QAAU,OAAO,iBAAiB,OAAO,CAAC;AAC9E,QAAI;AACJ,QAAI,SAAS;AACX,kBAAY,MAAM,QAAQ,aAAa,OAAO,GAAG,gBAAgB;AAAA,IACnE,OAAO;AACL,kBAAY,MAAM,gBAAgB,QAAQ,gBAAgB;AAAA,IAC5D;AACA,WAAO,KAAK,MAAM,UAAU,SAAS,CAAC;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,YAAY,QAAQ;AACxB,QAAI;AACF,YAAM;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,MACF,IAAI;AACJ,YAAM,iBAAiB,KAAK,uBAAuB,MAAM,mBAAkB,6BAA6B,OAAO,iBAAiB,OAAO,GAAG,iBAAiB,OAAO;AAClK,aAAO,MAAM,KAAK,GAAG,KAAK,OAAO,QAAQ,cAAc;AAAA,IACzD,SAAS,OAAO;AACd,YAAM,cAAc,MAAM,iBAAiB,KAAK;AAChD,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EACA,MAAM,kBAAkB,QAAQ;AAC9B,QAAI;AACF,YAAM;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,MACF,IAAI;AACJ,YAAM,WAAW;AACjB,YAAM,sBAAsB,MAAM,QAAQ,IAAI,SAAS,IAAI,OAAO,IAAI,MAAM,KAAK,uBAAuB,MAAM,mBAAkB,6BAA6B,IAAI,iBAAiB,QAAQ,CAAC,CAAC,GAAG,iBAAiB,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC5N,YAAM,KAAK,IAAI,SAAS;AACxB,0BAAoB,QAAQ,CAAC,IAAI,UAAU;AACzC,WAAG,OAAO,MAAM,SAAS,GAAG,KAAK,UAAU,EAAE,CAAC;AAAA,MAChD,CAAC;AACD,YAAM,UAAU;AAAA,QACd,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,SAAS;AAAA;AAAA,QAET;AAAA,MACF;AACA,YAAM,gBAAgB;AAAA,QACpB,kBAAkB;AAAA,QAClB,SAAS,MAAM;AAAA;AAAA,MACjB;AACA,aAAO,MAAM,KAAK,GAAG,KAAK,OAAO,oBAAoB,IAAI,SAAS,aAAa;AAAA,IACjF,SAAS,OAAO;AACd,YAAM,cAAc,MAAM,iBAAiB,KAAK;AAChD,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EACA,uBAAuB,SAAS,iBAAiB,SAAS;AACxD,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI,YAAY;AAChB,UAAM,eAAe;AAAA,MACnB,MAAM;AAAA,MACN,WAAW,IAAI,WAAAC,QAAG,CAAC,EAAE,KAAK,mBAAmB,KAAK,IAAI,IAAI,IAAK,EAAE,SAAS,EAAE;AAAA,IAC9E;AAIA,QAAI,YAAY,sBAAsB;AACpC,kBAAY;AACZ,mBAAa,OAAO;AAAA,IACtB;AACA,UAAM,OAAO,UAAU,OAAO,SAAK,8BAAAF,SAAU,YAAY,GAAG,MAAM,CAAC;AACnE,QAAI,SAAS;AACX,YAAM,cAAc,YAAY,OAAO,EAAE,KAAK,IAAI;AAClD,YAAM,OAAO,KAAK,YAAY,EAAE,SAAS,IAAI,EAAE,IAAI,YAAY,EAAE,SAAS,IAAI,EAAE,IAAI,IAAI,WAAAE,QAAG,CAAC,EAAE,SAAS,IAAI,CAAC,GAAG,KAAK,EAAE,SAAS,QAAQ;AACvI,YAAM,OAAO,eAAe,OAAO;AACnC,aAAO,KAAK,EAAE,SAAS,KAAK;AAC5B,aAAO,KAAK,EAAE,SAAS,KAAK;AAAA,IAC9B,OAAO;AACL,YAAM,QAAQ,gBAAgB,oBAAoB;AAClD,YAAM,gBAAgB,KAAK,IAAI,WAAAA,QAAG,IAAI,CAAC;AACvC,aAAO,MAAM,KAAK,EAAE,SAAS,KAAK;AAClC,aAAO,MAAM,KAAK,EAAE,SAAS,KAAK;AAAA,IACpC;AACA,WAAO;AAAA,MACL,WAAW;AAAA,MACX,WAAW;AAAA,MACX,UAAU;AAAA,MACV,WAAW;AAAA,MACX;AAAA,IACF;AAAA,EACF;AAAA,EACA,MAAM,iBAAiB,QAAQ;AAC7B,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACF,IAAI;AACJ,UAAM,OAAO;AAAA,MACX,WAAW,KAAK,MAAM,KAAK,mBAAmB,KAAK,IAAI,IAAI,GAAI;AAAA,IACjE;AACA,QAAI;AACJ,QAAI,SAAS;AACX,kBAAY,oBAAoB,MAAM,OAAO;AAAA,IAC/C,OAAO;AACL,kBAAY,gBAAgB,KAAK,IAAI,WAAAA,QAAG,UAAU,OAAO,SAAK,8BAAAF,SAAU,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC;AAAA,IAC1F;AACA,UAAM,iBAAiB;AAAA,MACrB,KAAK,YAAY,OAAO,EAAE,UAAU,KAAK;AAAA,MACzC;AAAA,MACA;AAAA,IACF;AACA,WAAO,KAAK,GAAG,KAAK,OAAO,gBAAgB,cAAc;AAAA,EAC3D;AAAA,EACA,MAAM,iBAAiB,QAAQ;AAC7B,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI;AACJ,UAAM,OAAO;AAAA,MACX,WAAW,KAAK,MAAM,KAAK,mBAAmB,KAAK,IAAI,IAAI,GAAI;AAAA,IACjE;AACA,QAAI;AACJ,QAAI,SAAS;AACX,kBAAY,oBAAoB,MAAM,OAAO;AAAA,IAC/C,OAAO;AACL,kBAAY,gBAAgB,KAAK,IAAI,WAAAE,QAAG,UAAU,OAAO,SAAK,8BAAAF,SAAU,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC;AAAA,IAC1F;AACA,UAAM,iBAAiB;AAAA,MACrB,KAAK,YAAY,OAAO,EAAE,UAAU,KAAK;AAAA,MACzC;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,WAAO,KAAK,GAAG,KAAK,OAAO,gBAAgB,cAAc;AAAA,EAC3D;AAAA,EACA,SAAS;AACP,WAAO;AAAA,MACL,eAAe,KAAK;AAAA,MACpB,SAAS,KAAK;AAAA,MACd,kBAAkB,KAAK;AAAA,IACzB;AAAA,EACF;AACF;AACA,IAAI,sBAAsB;;;;;AC7NnB,IAAMG,eAAN,cAA2BC,gBAAAA,QAAGC,GAA4B;EAC/DC,cAAc;AACZ,UAAM,SAAS;EACjB;EAEAC,eAAeC,GAAe;AAC5B,WAAO,IAAIC,WAAAA,QAAGD,GAAG,IAAI;EACvB;EAEAE,iBAAqB;AACnB,WAAO,KAAKC,WAAU,EAAGC,WAAU;EACrC;EAEAC,eAAeC,GAAOC,KAA4B;AAChDD,MAAEE,SAAS,KAAK;AAChB,WAAOF,EAAEG,YAAYF,KAAK,MAAM,EAAE;EACpC;EAEAG,cAAcC,GAAyBJ,KAA4B;AAGjE,UAAMK,IAAID,EAAEE,KAAI;AAChB,UAAMC,IAAIH,EAAEI,KAAI;AAChB,UAAMf,IAAIc,EAAEL,YAAYF,KAAK,MAAM,EAAE;AACrCP,MAAEA,EAAEgB,SAAS,CAAC,KAAKJ,EAAEK,IAAI,IAAIhB,WAAAA,QAAG,CAAC,CAAC,EAAEiB,IAAI,CAAC,IAAI,MAAO;AACpD,WAAOlB;EACT;AACF;;;;;AC7BA,IAAMmB,KAAK,IAAIC,iBAAAA,GAAG,WAAW;AAE7B,IAAMC,gBAAgBC,OAAOC,UAAWD,OAAeE,YAAY,CAAA;AAEnE,IAAMC,SAASJ,cAAcI,UAAWJ,cAAsBK;AAE9D,IAAMC,iBAAiBC,OAAOC,KAAK,oEAAoE,KAAK;AAC5G,IAAMC,SAASF,OAAOG,MAAM,IAAI,CAAC;AAcjC,SAASC,SAASC,GAAoB;AACpC,SAAOC,OAAOC,SAASF,CAAC,KAAKA,EAAEG,WAAW;AAC5C;AAEA,SAASC,kBAAkBC,YAA6B;AACtD,MAAI,CAACN,SAASM,UAAU,GAAG;AACzB,WAAO;EACT;AACA,SACEA,WAAWC,QAAQC,MAAM,IAAI;EAE7BF,WAAWC,QAAQE,cAAc,IAAI;AAEzC;AAkBA,SAASC,YAAYC,MAAsB;AACzC,QAAMC,MAAM,IAAIC,WAAWF,IAAI;AAC/B,MAAI,OAAOG,cAAcC,oBAAoB,aAAa;AACxD,WAAOC,OAAOC,KAAKC,cAAAA,QAAWR,YAAYC,IAAI,CAAC;EACjD;AACAG,gBAAcC,gBAAgBH,GAAG;AAEjC,SAAOI,OAAOC,KAAKL,GAAG;AACxB;AAeA,SAASO,OAAOC,IAA4C;AAC1D,SAAO,eAAgBC,IAAYC,KAAaC,MAAc;AAC5D,QAAIC,QAAQ;AACV,YAAMC,kBAAkB;QACtBC,MAAM;;AAER,YAAMC,YAAY,MAAMH,OAAOI,UAAU,OAAON,KAAKG,iBAAiB,OAAO,CAACL,EAAE,CAAC;AACjF,YAAMS,eAAe;QACnBH,MAAM;QACNL;;AAEF,YAAMS,SAAS,MAAMN,OAAOJ,EAAE,EAAES,cAAcF,WAAWJ,IAAI;AAC7D,aAAOQ,OAAOC,KAAK,IAAIC,WAAWH,MAAM,CAAC;IAC3C,WAAWV,OAAO,WAAW;AAC3B,YAAMc,SAASC,cAAAA,QAAWC,eAAe,eAAed,KAAKD,EAAE;AAC/D,YAAMgB,aAAaH,OAAOI,OAAOf,IAAI;AACrC,YAAMgB,cAAcL,OAAOM,MAAK;AAChC,aAAOT,OAAOU,OAAO,CAACJ,YAAYE,WAAW,CAAC;IAChD,WAAWnB,OAAO,WAAW;AAC3B,YAAMsB,WAAWP,cAAAA,QAAWQ,iBAAiB,eAAerB,KAAKD,EAAE;AACnE,YAAMgB,aAAaK,SAASJ,OAAOf,IAAI;AACvC,YAAMgB,cAAcG,SAASF,MAAK;AAClC,aAAOT,OAAOU,OAAO,CAACJ,YAAYE,WAAW,CAAC;IAChD;AACA,UAAM,IAAIK,MAAO,0BAAyBxB,EAAG,EAAC;;AAElD;AACA,IAAMyB,gBAAgB1B,OAAO,SAAS;AACtC,IAAM2B,gBAAgB3B,OAAO,SAAS;AA6BzB4B,IAAAA,kBAAkB,WAAoB;AACjD,MAAIC,aAAaC,YAAY,EAAE;AAC/B,SAAO,CAACC,kBAAkBF,UAAU,GAAG;AACrCA,iBAAaC,YAAY,EAAE;EAC7B;AACA,SAAOD;AACT;;;AC1IA,IAAAG,aAAe;AAEf,IAAAC,mBAAmB;AAGnB,IAAM,0BAA0B;AAChC,IAAMC,cAAa;AAAA,EACjB,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AACd;AAEA,SAAS,QAAQ;AACf,SAAO,IAAI,oBAAG,WAAW;AAC3B;AACA,SAAS,kBAAkB,aAAa,UAAU;AAChD,MAAI,UAAU,UAAU,SAAS,KAAK,UAAU,CAAC,MAAM,SAAY,UAAU,CAAC,IAAI;AAClF,QAAMC,MAAK,MAAM;AACjB,QAAM,aAAa,YAAY,IAAI,OAAK,IAAI,WAAAC,QAAG,CAAC,CAAC;AACjD,QAAM,UAAU,IAAI,WAAAA,QAAG,QAAQ;AAC/B,QAAM,SAAS,IAAI,WAAAA,QAAG,OAAO;AAC7B,MAAI,QAAQ,IAAI,WAAAA,QAAG,CAAC;AACpB,MAAI,QAAQ,IAAI,WAAAA,QAAG,CAAC;AACpB,WAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK,GAAG;AAC7C,QAAI,QAAQ,IAAI,WAAW,CAAC,CAAC,MAAM,GAAG;AACpC,UAAI,YAAY,OAAO,IAAI,WAAW,CAAC,CAAC;AACxC,kBAAY,UAAU,KAAKD,IAAG,MAAM,CAAC;AACrC,cAAQ,MAAM,IAAI,SAAS;AAC3B,cAAQ,MAAM,KAAKA,IAAG,MAAM,CAAC;AAC7B,UAAI,YAAY,QAAQ,IAAI,WAAW,CAAC,CAAC;AACzC,kBAAY,UAAU,KAAKA,IAAG,MAAM,CAAC;AACrC,cAAQ,MAAM,IAAI,SAAS,EAAE,KAAKA,IAAG,MAAM,CAAC;AAAA,IAC9C;AAAA,EACF;AACA,SAAO,MAAM,IAAI,MAAM,KAAKA,IAAG,MAAM,CAAC,CAAC,EAAE,KAAKA,IAAG,MAAM,CAAC;AAC1D;AAQA,IAAM,mBAAmB,CAAC,QAAQ,4BAA4B,cAAc,gBAAgB;AAC1F,QAAME,MAAK,MAAM;AACjB,MAAI,QAAQ;AACV,WAAO,kBAAkB,CAAC,GAAG,YAAY,GAAG,YAAY;AAAA,EAC1D;AAEA,QAAM,sBAAsB,kBAAkB,4BAA4B,WAAW;AACrF,QAAM,sBAAsB,kBAAkB,CAAC,GAAG,YAAY,GAAG,CAAC;AAClE,QAAM,wBAAwB,oBAAoB,IAAI,mBAAmB,EAAE,KAAKA,IAAG,MAAM,CAAC;AAC1F,SAAO;AACT;AAGA,IAAM,sBAAsB,CAAC,OAAO,YAAY;AAC9C,MAAI,QAAQ,QAAQ,KAAK,MAAM,GAAI,OAAM,IAAI,MAAM,SAAS,KAAK,yBAAyB,OAAO,EAAE;AACnG,QAAMA,MAAK,MAAM;AAEjB,QAAM,2BAA2B,kBAAkB,SAAS,KAAK,EAAE,KAAKA,IAAG,MAAM,CAAC,EAAE,KAAKA,IAAG,MAAM,CAAC;AACnG,SAAO;AACT;AACA,IAAM,eAAe,CAAC,QAAQ,4BAA4B,cAAc,gBAAgB;AACtF,QAAM,sBAAsB,2BAA2B,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAC3E,WAAS,IAAI,GAAG,IAAI,oBAAoB,QAAQ,KAAK;AACnD,QAAI,oBAAoB,CAAC,MAAM,2BAA2B,CAAC,EAAG,OAAM,IAAI,MAAM,+BAA+B;AAAA,EAC/G;AAEA,QAAM,UAAU,CAAC;AAIjB,MAAI,mBAAmB;AACvB,WAAS,IAAI,GAAG,IAAI,2BAA2B,QAAQ,KAAK;AAC1D,UAAM,oBAAoB,IAAI;AAC9B,YAAQ,KAAK,iBAAiB;AAC9B,QAAI,2BAA2B,CAAC,MAAM,YAAa,oBAAmB;AAAA,EACxE;AACA,QAAM,iBAAiB,QAAQ,SAAS;AACxC,UAAQ,KAAK,cAAc;AAC3B,MAAI,QAAQ;AACV,UAAMC,iBAAgB,iBAAiB,QAAQ,4BAA4B,cAAc,WAAW;AACpG,UAAMC,oBAAmB,oBAAoB,gBAAgB,OAAO;AACpE,UAAMF,MAAK,MAAM;AACjB,WAAOE,kBAAiB,IAAID,cAAa,EAAE,KAAKD,IAAG,MAAM,CAAC;AAAA,EAC5D;AACA,QAAM,gBAAgB,iBAAiB,QAAQ,4BAA4B,cAAc,WAAW;AACpG,QAAM,mBAAmB,oBAAoB,kBAAkB,OAAO;AACtE,QAAMA,MAAK,MAAM;AACjB,QAAM,QAAQ,iBAAiB,IAAI,aAAa,EAAE,KAAKA,IAAG,MAAM,CAAC;AACjE,SAAO;AACT;AACA,IAAM,gBAAgB,OAAO,aAAa,cAAc;AACtD,SAAO,YAAY,IAAI,gBAAc;AACnC,QAAI,eAAe,QAAQ,eAAe,QAAW;AACnD,aAAO;AAAA,IACT;AACA,WAAO,OAAG,YAAY;AAAA,MACpB,MAAM;AAAA,MACN,OAAO;AAAA,QACL;AAAA,MACF;AAAA,MACA,YAAY,CAAC,aAAa,SAAS;AAAA,MACnC,iBAAiB;AAAA,MACjB,sBAAsB;AAAA,MACtB,sBAAsB;AAAA,IACxB,CAAC;AAAA,EACH,CAAC;AACH;AA4BA,IAAM,eAAe,OAAO,gBAAgB,cAAc;AACxD,QAAM,UAAU,MAAM,cAAc,gBAAgB,SAAS;AAE7D,QAAM,IAAI,QAAQ,aAAW;AAC3B,UAAM,uBAAuB,YAAY,MAAM;AAC7C,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,YAAI,QAAQ,CAAC,MAAM,QAAQ,CAAC,QAAQ,CAAC,EAAE,UAAW;AAAA,MACpD;AACA,oBAAc,oBAAoB;AAClC,cAAQ,IAAI;AAAA,IACd,GAAG,GAAG;AAAA,EACR,CAAC;AACD,SAAO;AACT;AAGA,IAAI,WAAW,gBAAgB,QAAW;AAGxC,aAAW,cAAc,oBAAI,IAAI;AACnC;AACA,IAAI,WAAW,gBAAgB,QAAW;AACxC,aAAW,cAAc,eAAgB,SAAS,YAAY,OAAO,UAAU;AAC7E,UAAM,aAAa,WAAW,YAAY,IAAI,OAAO;AACrD,eAAW,IAAI,gBAAgB,QAAQ,EAAE;AACzC,QAAI,aAAa,sBAAsB;AACrC,aAAO;AAAA,IACT;AACA,UAAM,KAAK,WAAW,SAAS,KAAK,OAAK,EAAE,WAAW,SAAS,EAAE,cAAc,cAAc,EAAE,aAAa,QAAQ;AACpH,QAAI,CAAC,IAAI;AAGP,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAI,UAAU;AACd,cAAM,QAAQ,YAAY,MAAM;AAC9B,gBAAM,QAAQ,WAAW,SAAS,KAAK,OAAK,EAAE,WAAW,SAAS,EAAE,cAAc,cAAc,EAAE,aAAa,QAAQ;AACvH,cAAI,UAAU,QAAW;AACvB,0BAAc,KAAK;AACnB,oBAAQ,MAAM,QAAQ;AAAA,UACxB;AACA,cAAI,WAAW,KAAM;AACnB,0BAAc,KAAK;AAKnB,mBAAO,2CAA2C;AAAA,UACpD;AACA;AAAA,QACF,GAAG,EAAE;AAAA,MACP,CAAC;AAAA,IACH;AACA,WAAO,GAAG;AAAA,EACZ;AACF;AACA,IAAI,WAAW,gBAAgB,QAAW;AACxC,aAAW,cAAc,eAAgB,SAAS,YAAY,OAAO,UAAU,UAAU;AACvF,UAAM,aAAa,WAAW,YAAY,IAAI,OAAO;AACrD,eAAW,IAAI,gBAAgB,QAAQ,EAAE;AACzC,QAAI,SAAS,QAAQ,sBAAsB,IAAI,IAAI;AACjD,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACpE;AACA,QAAI,WAAW,eAAe;AAC5B,YAAM,SAAS,WAAW,QAAQ,KAAK;AACvC,aAAO,KAAK,YAAY;AAAA,QACtB;AAAA,QACA,QAAQ;AAAA,QACR,WAAW;AAAA,QACX;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH,OAAO;AACL,YAAM,MAAM,QAAQ,MAAMG,YAAW,UAAU,EAAE,CAAC;AAClD,YAAM,WAAW,WAAW,eAAe,SAAS,KAAK;AACzD,YAAM,GAAG,QAAQ,SAAS;AAAA,QACxB,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,CAAC,uBAAuB,GAAG;AAAA,UAC3B,gBAAgB;AAAA,QAClB;AAAA,QACA,MAAM,KAAK,UAAU;AAAA,UACnB;AAAA,UACA,QAAQ;AAAA,UACR,WAAW;AAAA,UACX;AAAA,UACA;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AACA,WAAO;AAAA,EACT;AACF;AACA,IAAM,SAAN,MAAa;AAAA;AAAA,EAEX,YAAY,UAAU,QAAQ,UAAU,YAAY,UAAU,QAAQ,SAAS,gBAAgB,SAAS;AACtG,oBAAgB,MAAM,WAAW,MAAM;AACvC,oBAAgB,MAAM,SAAS,MAAM;AACrC,oBAAgB,MAAM,WAAW,MAAM;AACvC,oBAAgB,MAAM,YAAY,CAAC,CAAC;AACpC,oBAAgB,MAAM,WAAW,MAAM;AACvC,oBAAgB,MAAM,aAAa,MAAM;AACzC,oBAAgB,MAAM,SAAS,MAAM;AACrC,oBAAgB,MAAM,UAAU,MAAM;AACtC,oBAAgB,MAAM,iBAAiB,MAAM;AAC7C,oBAAgB,MAAM,UAAU,MAAM;AACtC,oBAAgB,MAAM,wBAAwB,MAAM;AACpD,oBAAgB,MAAM,sBAAsB,MAAM;AAClD,oBAAgB,MAAM,kBAAkB,MAAM;AAC9C,oBAAgB,MAAM,gBAAgB,MAAM;AAC5C,oBAAgB,MAAM,OAAO,MAAM;AACnC,oBAAgB,MAAM,aAAa,MAAM;AACzC,oBAAgB,MAAM,kBAAkB,MAAM;AAC9C,oBAAgB,MAAM,uBAAuB,CAAC,CAAC;AAC/C,oBAAgB,MAAM,qBAAqB,CAAC,CAAC;AAC7C,oBAAgB,MAAM,qBAAqB,IAAI;AAC/C,oBAAgB,MAAM,UAAU,KAAK;AACrC,oBAAgB,MAAM,WAAW,MAAM;AACvC,oBAAgB,MAAM,QAAQ,MAAM;AAEpC,oBAAgB,MAAM,iBAAiB,IAAI;AAC3C,QAAI,SAAS,WAAW,SAAS,QAAQ;AACvC,YAAM,IAAI,MAAM,4EAA4E;AAAA,IAC9F;AACA,QAAI,SAAS,WAAW,WAAW,QAAQ;AACzC,YAAM,IAAI,MAAM,8EAA8E;AAAA,IAChG;AACA,SAAK,UAAU;AACf,SAAK,QAAQ;AACb,SAAK,UAAU;AACf,SAAK,YAAY;AACjB,SAAK,UAAU;AACf,SAAK,QAAQ;AACb,SAAK,SAAS;AACd,SAAK,gBAAgB;AACrB,SAAK,MAAM,QAAQ;AACnB,SAAK,YAAY;AACjB,SAAK,iBAAiB;AACtB,SAAK,SAAS;AACd,aAAS,QAAQ,YAAU;AACzB,UAAI,QAAQ;AACV,YAAI,OAAO,aAAa,MAAM,GAAG;AAC/B,iBAAO,IAAI,MAAM;AAAA,QACnB;AAGA,eAAO,GAAG,QAAQ,OAAO,MAAM,OAAO;AACpC,gBAAM;AAAA,YACJ;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF,IAAI;AACJ,cAAI,YAAY,KAAK,SAAS;AAC5B,iBAAK,IAAI,+DAA+D,KAAK,OAAO,sBAAsB,OAAO,EAAE;AACnH;AAAA,UACF;AACA,eAAK,SAAS,KAAK;AAAA,YACjB;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF,CAAC;AACD,cAAI,GAAI,IAAG;AAAA,QACb,CAAC;AAED,eAAO,GAAG,uBAAuB,OAAO,MAAM,OAAO;AACnD,gBAAM;AAAA,YACJ;AAAA,YACA;AAAA,UACF,IAAI;AACJ,cAAI,YAAY,KAAK,SAAS;AAC5B,iBAAK,IAAI,+DAA+D,KAAK,OAAO,sBAAsB,OAAO,EAAE;AACnH;AAAA,UACF;AACA,eAAK,oBAAoB,KAAK,KAAK;AACnC,cAAI,GAAI,IAAG;AAAA,QACb,CAAC;AACD,eAAO,GAAG,qBAAqB,OAAO,MAAM,OAAO;AACjD,gBAAM;AAAA,YACJ;AAAA,YACA;AAAA,UACF,IAAI;AACJ,cAAI,YAAY,KAAK,SAAS;AAC5B,iBAAK,IAAI,+DAA+D,KAAK,OAAO,sBAAsB,OAAO,EAAE;AACnH;AAAA,UACF;AACA,eAAK,kBAAkB,KAAK,KAAK;AACjC,cAAI,GAAI,IAAG;AAAA,QACb,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AACD,eAAW,YAAY,IAAI,KAAK,SAAS,IAAI;AAAA,EAC/C;AAAA,EACA,IAAI,MAAM;AACR,WAAO,KAAK,QAAQ,MAAMA,YAAW,UAAU,EAAE,CAAC;AAAA,EACpD;AAAA,EACA,MAAM,QAAQ;AACZ,QAAI,KAAK,iBAAiB,MAAM;AAC9B,YAAM,KAAK;AAAA,IACb,OAAO;AACL,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AAGA,UAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AACrC,UAAI,UAAU;AACd,YAAM,QAAQ,YAAY,MAAM;AAC9B,YAAI,KAAK,kBAAkB,WAAW,KAAK,KAAK,oBAAoB,OAAO,CAAC,GAAG,GAAG,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,EAAE,WAAW,KAAK,QAAQ,UAAU,KAAK,qBAAqB,MAAM;AAC5K,wBAAc,KAAK;AACnB,eAAK,SAAS;AACd,kBAAQ;AAAA,QACV,WAAW,KAAK,kBAAkB,SAAS,GAAG;AAC5C,iBAAO,IAAI,MAAM,yCAAyC,CAAC;AAAA,QAC7D;AACA,YAAI,WAAW,KAAK;AAClB,wBAAc,KAAK;AACnB,iBAAO,IAAI,MAAM,qBAAqB,CAAC;AAAA,QACzC;AACA;AAAA,MACF,GAAG,EAAE;AAAA,IACP,CAAC;AAAA,EACH;AAAA,EACA,WAAW,kBAAkB;AAE3B,SAAK,QAAQ,QAAQ,CAAC,QAAQ,UAAU;AACtC,UAAI,WAAW,MAAM;AACnB,YAAI,OAAO,OAAO,QAAW;AAC3B,gBAAM,IAAI,MAAM,sCAAsC,KAAK,OAAO,YAAY,KAAK,EAAE;AAAA,QACvF;AAAA,MACF;AAAA,IACF,CAAC;AACD,UAAM,qBAAqB,CAAC;AAC5B,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC5C,YAAM,QAAQ,KAAK,QAAQ,CAAC;AAC5B,UAAI,UAAU,KAAK,OAAO;AACxB,2BAAmB,KAAK,IAAI,QAAQ,CAAC,SAAS,WAAW;AACvD,gBAAM,GAAG,KAAK,eAAe,KAAK,SAAS,KAAK,CAAC,eAAe;AAAA,YAC9D,QAAQ;AAAA,YACR,SAAS;AAAA,cACP,gBAAgB;AAAA,cAChB,CAAC,uBAAuB,GAAG,KAAK;AAAA,YAClC;AAAA,YACA,MAAM,KAAK,UAAU,eAAc;AAAA,cACjC,WAAW,KAAK,UAAU,IAAI,CAAC,UAAU,MAAM;AAC7C,oBAAI,MAAM,KAAK,OAAO;AACpB,yBAAO;AAAA,gBACT;AAEA,uBAAO,aAAa,KAAK,QAAQ,KAAK,EAAE,EAAE;AAAA,cAC5C,CAAC;AAAA,cACD,SAAS,KAAK;AAAA,cACd,SAAS,KAAK;AAAA,cACd,cAAc;AAAA,cACd,WAAW,KAAK,QAAQ;AAAA,cACxB,QAAQ,KAAK;AAAA,cACb,mBAAmB,KAAK,QAAQ,KAAK,EAAE;AAAA,cACvC,eAAe,KAAK,QAAQ,KAAK,EAAE;AAAA,YACrC,GAAG,gBAAgB,CAAC;AAAA,UACtB,CAAC,EAAE,KAAK,OAAM,SAAQ;AACpB,kBAAM,OAAO,MAAM,KAAK,KAAK;AAC7B,gBAAI,KAAK,WAAW,KAAK;AACvB,oBAAM,IAAI,MAAM,8BAA8B,KAAK,eAAe,KAAK,SAAS,KAAK,CAAC,gBAAgB,KAAK,MAAM;AAAA,GAAO,KAAK,UAAU,IAAI,CAAC,GAAG;AAAA,YACjJ;AACA,mBAAO,QAAQ,IAAI;AAAA,UACrB,CAAC,EAAE,MAAM,SAAO;AACd,mBAAO,GAAG;AAAA,UACZ,CAAC;AAAA,QACH,CAAC,CAAC;AAAA,MACJ;AAAA,IACF;AAGA,UAAM,kBAAkB,YAAY;AAClC,WAAK,uBAAuB,KAAK,IAAI;AACrC,YAAM,QAAQ,IAAI,kBAAkB;AACpC,WAAK,UAAU,MAAM,KAAK,OAAO,iBAAiB,KAAK,SAAS,KAAK,OAAO,KAAK,QAAQ,QAAQ,KAAK,QAAQ,QAAQ,KAAK,OAAO,KAAK,MAAM;AAC7I,WAAK,OAAO,MAAM,KAAK,OAAO,iBAAiB,OAAO,KAAK,gBAAgB,CAAC,EAAE,SAAS,QAAQ,CAAC;AAChG,YAAM,KAAK,OAAO,MAAM,KAAK,SAAS,KAAK,IAAI;AAC/C,YAAM,mBAAmB,MAAM,KAAK,OAAO,WAAW,IAAI,WAAW,KAAK,OAAO,GAAG,KAAK,SAAS,KAAK,IAAI;AAC3G,WAAK,oBAAoB;AACzB,WAAK,oBAAoB,KAAK,KAAK,KAAK;AACxC,WAAK,YAAY;AACjB,WAAK,qBAAqB,KAAK,IAAI;AAAA,IACrC;AACA,SAAK,gBAAgB,gBAAgB,EAAE,MAAM,OAAK;AAChD,WAAK,kBAAkB,KAAK,KAAK,KAAK;AACtC,cAAQ,MAAM,CAAC;AAAA,IACjB,CAAC;AAAA,EACH;AAAA,EACA,MAAM,KAAK,KAAK,WAAW,kBAAkB,WAAW,kBAAkB;AACxE,QAAI,KAAK,cAAc,MAAM;AAC3B,YAAM,IAAI,MAAM,iEAAiE;AAAA,IACnF;AACA,QAAI,KAAK,WAAW,OAAO;AACzB,YAAM,IAAI,MAAM,qBAAqB;AAAA,IACvC;AAGA,QAAI,CAAC,WAAW;AACd,UAAI,cAAc,aAAa;AAC7B,YAAI,OAAO,KAAK,UAAU,OAAO,KAAK,gBAAgB,CAAC,CAAC,EAAE,SAAS,QAAQ,MAAM,KAAK;AACpF,gBAAM,IAAI,MAAM,6CAA6C;AAAA,QAC/D;AAAA,MACF,OAAO;AACL,cAAM,IAAI,MAAM,aAAa,SAAS,gBAAgB;AAAA,MACxD;AAAA,IACF;AACA,SAAK,iBAAiB,KAAK,IAAI;AAC/B,UAAM,eAAe,CAAC;AACtB,UAAM,mBAAmB,CAAC;AAC1B,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC5C,YAAM,QAAQ;AACd,UAAI,UAAU,KAAK,OAAO;AAExB,qBAAa,KAAK,MAAM,KAAK,OAAO,WAAW,KAAK,WAAW,KAAK,iBAAiB,CAAC;AAAA,MACxF,OAAO;AAEL,yBAAiB,KAAK,IAAI,QAAQ,CAAC,SAAS,WAAW;AACrD,gBAAM,WAAW,KAAK,eAAe,KAAK,SAAS,KAAK;AACxD,gBAAM,GAAG,QAAQ,SAAS;AAAA,YACxB,QAAQ;AAAA,YACR,SAAS;AAAA,cACP,gBAAgB;AAAA,cAChB,CAAC,uBAAuB,GAAG,KAAK;AAAA,YAClC;AAAA,YACA,MAAM,KAAK,UAAU,eAAc;AAAA,cACjC,SAAS,KAAK;AAAA,cACd,QAAQ,KAAK;AAAA,cACb,WAAW;AAAA,cACX;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF,GAAG,gBAAgB,CAAC;AAAA,UACtB,CAAC,EAAE,KAAK,SAAO,IAAI,KAAK,CAAC,EAAE,KAAK,SAAO,QAAQ,IAAI,GAAG,CAAC,EAAE,MAAM,SAAO;AACpE,mBAAO,GAAG;AAAA,UACZ,CAAC;AAAA,QACH,CAAC,CAAC;AAAA,MACJ;AAAA,IACF;AACA,UAAM,gBAAgB,MAAM,QAAQ,IAAI,gBAAgB;AACxD,kBAAc,QAAQ,cAAY;AAChC,mBAAa,KAAK,QAAQ;AAAA,IAC5B,CAAC;AACD,UAAM,IAAI,MAAM,KAAK,OAAO,sBAAsB,KAAK,iBAAiB;AACxE,UAAM,MAAM,MAAM,KAAK,OAAO,aAAa,KAAK,WAAW,GAAG,cAAc,KAAK,MAAM;AACvF,SAAK,eAAe,KAAK,IAAI;AAC7B,UAAM,SAAS,OAAO,KAAK,KAAK,QAAQ,EAAE,SAAS,KAAK;AACxD,UAAM,IAAI,IAAI,WAAAC,QAAG,OAAO,MAAM,GAAG,EAAE,GAAG,EAAE;AACxC,QAAI,IAAI,IAAI,WAAAA,QAAG,OAAO,MAAM,EAAE,GAAG,EAAE;AACnC,QAAI,gBAAgB,OAAO,KAAK,GAAG,QAAQ,EAAE,EAAE,IAAI;AACnD,QAAI,KAAK,gBAAgB;AACvB,YAAMC,MAAK,MAAM;AACjB,YAAM,mBAAmBA,IAAG,EAAE,IAAI,IAAI,WAAAD,QAAG,CAAC,CAAC;AAC3C,UAAI,EAAE,GAAG,gBAAgB,GAAG;AAC1B,YAAIC,IAAG,EAAE,IAAI,CAAC;AACd,yBAAiB,gBAAgB,KAAK;AAAA,MACxC;AAAA,IACF;AACA,SAAK,YAAY;AACjB,SAAK,SAAS;AACd,SAAK,gBAAgB;AACrB,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EACA,eAAe,SAAS,OAAO;AAC7B,QAAI,YAAY,KAAK,QAAS,OAAM,IAAI,MAAM,4CAA4C;AAC1F,WAAO,KAAK,UAAU,KAAK;AAAA,EAC7B;AAAA,EACA,MAAM,QAAQ,kBAAkB;AAE9B,SAAK,OAAO,sBAAsB,KAAK,IAAI;AAC3C,SAAK,OAAO,sBAAsB,KAAK,OAAO;AAG9C,SAAK,sBAAsB,CAAC;AAC5B,SAAK,oBAAoB,CAAC;AAC1B,SAAK,oBAAoB;AACzB,SAAK,qBAAqB;AAC1B,SAAK,uBAAuB;AAC5B,SAAK,eAAe;AACpB,SAAK,iBAAiB;AACtB,SAAK,YAAY;AACjB,SAAK,SAAS;AACd,SAAK,gBAAgB;AAGrB,eAAW,YAAY,OAAO,KAAK,OAAO;AAC1C,SAAK,QAAQ,QAAQ,SAAO;AAC1B,UAAI,OAAO,IAAI,WAAW;AACxB,YAAI,MAAM;AAAA,MACZ;AAAA,IACF,CAAC;AACD,UAAM,QAAQ,IAAI,KAAK,QAAQ,IAAI,OAAM,UAAS;AAChD,UAAI,UAAU,KAAK,OAAO;AACxB,cAAM,MAAM,GAAG,KAAK,eAAe,KAAK,SAAS,KAAK,CAAC,YAAY;AAAA,UACjE,QAAQ;AAAA,UACR,SAAS;AAAA,YACP,gBAAgB;AAAA,YAChB,CAAC,uBAAuB,GAAG,KAAK;AAAA,UAClC;AAAA,UACA,MAAM,KAAK,UAAU,eAAc;AAAA,YACjC,SAAS,KAAK;AAAA,UAChB,GAAG,gBAAgB,CAAC;AAAA,QACtB,CAAC;AAAA,MACH;AACA,aAAO,QAAQ,QAAQ,IAAI;AAAA,IAC7B,CAAC,CAAC;AAAA,EACJ;AACF;AAKA,IAAM,QAAN,MAAY;AAAA,EACV,cAAc;AACZ,oBAAgB,MAAM,OAAO,SAAO;AAClC,aAAO,IAAI,QAAQ,aAAW;AAC5B,YAAI,eAAe,QAAQ,eAAe,UAAU,WAAW,cAAc;AAE3E,gBAAM,QAAQ,WAAW,aAAa,QAAQ,GAAG;AACjD,kBAAQ,KAAK;AAAA,QACf,OAAO;AACL,iBAAO,QAAQ,MAAM,IAAI,KAAK,YAAU;AACtC,oBAAQ,OAAO,GAAG,CAAC;AACnB,mBAAO;AAAA,UACT,CAAC;AAAA,QACH;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AACD,oBAAgB,MAAM,OAAO,CAAC,KAAK,UAAU;AAC3C,aAAO,IAAI,QAAQ,aAAW;AAC5B,YAAI,eAAe,QAAQ,eAAe,UAAU,WAAW,cAAc;AAC3E,qBAAW,aAAa,QAAQ,KAAK,KAAK;AAE1C,kBAAQ;AAAA,QACV,OAAO;AACL,iBAAO,QAAQ,MAAM,IAAI;AAAA,YACvB,CAAC,GAAG,GAAG;AAAA,UACT,GAAG,MAAM;AACP,oBAAQ;AAAA,UACV,CAAC;AAAA,QACH;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AACD,oBAAgB,MAAM,UAAU,SAAO;AACrC,aAAO,IAAI,QAAQ,aAAW;AAC5B,YAAI,eAAe,QAAQ,eAAe,UAAU,WAAW,cAAc;AAE3E,qBAAW,aAAa,WAAW,GAAG;AACtC,kBAAQ;AAAA,QACV,OAAO;AACL,iBAAO,QAAQ,MAAM,OAAO,GAAG;AAC/B,kBAAQ;AAAA,QACV;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACF;AACA,IAAM,iBAAiB,IAAI,MAAM;;;AC3lBjC,SAAS,cAAc,QAAQ;AAC7B,QAAM,YAAY,KAAK,MAAM;AAC7B,SAAO,WAAW,KAAK,WAAW,OAAK,EAAE,YAAY,CAAC,CAAC;AACzD;AACA,SAAS,cAAc,OAAO;AAC5B,QAAM,YAAY,OAAO,cAAc,GAAG,KAAK;AAC/C,SAAO,KAAK,SAAS;AACvB;AAIA,IAAM,gBAAN,MAAoB;AAAA,EAClB,cAAc;AACZ,oBAAgB,MAAM,SAAS,MAAM;AACrC,SAAK,QAAQ,CAAC;AAAA,EAChB;AAAA;AAAA,EAGA,IAAI,KAAK;AACP,SAAK,MAAM,KAAK,GAAG;AACnB,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,OAAO;AACL,SAAK,MAAM,QAAQ,OAAK;AACtB,UAAI;AACF,UAAE,KAAK;AAAA,MACT,SAAS,KAAK;AACZ,gBAAQ,IAAI,2BAA2B,GAAG,EAAE;AAAA,MAC9C;AAAA,IACF,CAAC;AACD,SAAK,QAAQ,CAAC;AAAA,EAChB;AACF;;;AClCA,6BAAyB;AAGzB,IAAM,eAAe;AACrB,IAAM,kBAAkB;AACxB,SAAS,WAAW,QAAQ,UAAU,MAAM;AAC1C,SAAO,KAAK,UAAU,CAAC,QAAQ,UAAU,IAAI,CAAC;AAChD;AACA,IAAM,gBAAN,MAAoB;AAAA,EAClB,YAAY,SAAS,QAAQ;AAC3B,oBAAgB,MAAM,cAAc,MAAM;AAC1C,oBAAgB,MAAM,aAAa,MAAM;AACzC,oBAAgB,MAAM,YAAY,IAAI,gCAAS,CAAC;AAChD,oBAAgB,MAAM,WAAW,oBAAI,IAAI,CAAC;AAC1C,SAAK,aAAa;AAClB,SAAK,YAAY;AAAA,EACnB;AAAA,EACA,UAAU,WAAW;AACnB,WAAO,KAAK,QAAQ,IAAI,SAAS;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,QAAQ,KAAK,WAAW;AAC5B,QAAI,IAAI,WAAW,UAAU,QAAQ;AACnC,YAAM,IAAI,MAAM,wCAAwC;AAAA,IAC1D;AAGA,SAAK,MAAM;AAGX,UAAM,UAAU,UAAU,IAAI,gBAAc;AAC1C,YAAM,MAAM,IAAI,IAAI,aAAa,UAAU;AAC3C,aAAO,OAAG,IAAI,QAAQ;AAAA,QACpB,MAAM,IAAI;AAAA,QACV,YAAY,CAAC,aAAa,SAAS;AAAA,QACnC,iBAAiB;AAAA,QACjB,sBAAsB;AAAA,QACtB,sBAAsB;AAAA,MACxB,CAAC;AAAA,IACH,CAAC;AAGD,UAAM,QAAQ,QAAQ,IAAI,YAAU;AAClC,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,eAAO,GAAG,WAAW,OAAO;AAC5B,mBAAW,MAAM;AACf,iBAAO,IAAI,MAAM,oBAAoB,CAAC;AAAA,QACxC,GAAG,eAAe;AAAA,MACpB,CAAC;AAAA,IACH,CAAC;AACD,UAAM,QAAQ,IAAI,KAAK;AAGvB,YAAQ,QAAQ,CAAC,QAAQ,MAAM;AAE7B,YAAM,WAAW,IAAI,CAAC;AACtB,aAAO,GAAG,QAAQ,OAAO,KAAK,OAAO;AAEnC,YAAI,IAAI,WAAW,UAAU;AAC3B,kBAAQ,IAAI,4CAA4C,QAAQ,SAAS,IAAI,MAAM,EAAE;AACrF;AAAA,QACF;AACA,YAAI,IAAI,YAAY,KAAK,YAAY;AACnC,kBAAQ,IAAI,6CAA6C,KAAK,UAAU,SAAS,IAAI,OAAO,EAAE;AAC9F;AAAA,QACF;AAGA,cAAM,IAAI;AAAA,UACR,QAAQ,IAAI;AAAA,UACZ,MAAM,cAAc,IAAI,QAAQ;AAAA,UAChC,UAAU,IAAI;AAAA,UACd,MAAM,IAAI;AAAA,QACZ;AACA,cAAM,IAAI,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,IAAI;AACjD,aAAK,SAAS,KAAK,GAAG,CAAC;AAGvB,YAAI,GAAI,IAAG;AAAA,MACb,CAAC;AAGD,WAAK,QAAQ,IAAI,UAAU,MAAM;AAAA,IACnC,CAAC;AAAA,EACH;AAAA;AAAA,EAGA,QAAQ;AACN,SAAK,QAAQ,QAAQ,YAAU,OAAO,WAAW,CAAC;AAClD,SAAK,QAAQ,MAAM;AAAA,EACrB;AAAA,EACA,MAAM,KAAK,IAAI,OAAO,OAAO;AAC3B,UAAM,SAAS,KAAK,QAAQ,IAAI,EAAE;AAClC,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI,MAAM,kBAAkB;AAAA,IACpC;AACA,UAAM,MAAM;AAAA,MACV,UAAU,cAAc,KAAK;AAAA,MAC7B,UAAU;AAAA,MACV,WAAW;AAAA,MACX,QAAQ,KAAK;AAAA,MACb,SAAS,KAAK;AAAA,IAChB;AACA,WAAO,KAAK,YAAY,GAAG;AAAA,EAC7B;AAAA,EACA,MAAM,QAAQ,MAAM,OAAO;AACzB,UAAM,IAAI,WAAW,MAAM,KAAK,WAAW,KAAK;AAChD,UAAM,MAAM,MAAM,KAAK,SAAS,IAAI,GAAG,YAAY;AACnD,QAAI,CAAC,KAAK;AACR,YAAM,IAAI,MAAM,SAAS;AAAA,IAC3B;AACA,WAAO,IAAI;AAAA,EACb;AACF;AAEA,eAAe,YAAY,QAAQ,SAAS,WAAW,QAAQ,YAAY,kBAAkB,WAAW,WAAW,KAAK,YAAY,mBAAmB;AACrJ,QAAM,UAAU,WAAW,MAAM;AACjC,QAAM,YAAY,iBAAiB,MAAM,EAAE,IAAI,QAAM,GAAG,SAAS,GAAG,IAAI,GAAG,MAAM,GAAG,EAAE,IAAI,EAAE;AAG5F,UAAQ,KAAK,SAAS;AACtB,YAAU,KAAK,aAAa,UAAU,EAAE,EAAE;AAC1C,QAAM,OAAO;AAAA,IACX;AAAA,IACA,KAAK,cAAc,GAAG;AAAA,IACtB,cAAc;AAAA,IACd;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,QAAM,MAAM,IAAI,IAAI,QAAQ,MAAM;AAClC,QAAM,OAAO,MAAM,MAAM,KAAK;AAAA,IAC5B,QAAQ;AAAA,IACR,SAAS;AAAA,MACP,gBAAgB;AAAA,IAClB;AAAA,IACA,MAAM,KAAK,UAAU,IAAI;AAAA,EAC3B,CAAC;AACD,MAAI,CAAC,KAAK,IAAI;AACZ,UAAM,UAAU,MAAM,KAAK,KAAK,GAAG;AACnC,UAAM,IAAI,MAAM,MAAM;AAAA,EACxB;AACF;AAIA,SAAS,kBAAkB;AACzB,QAAM,MAAM,IAAI,WAAW,EAAE;AAC7B,SAAO,gBAAgB,GAAG;AAC1B,SAAO;AACT;AAsBA,eAAe,KAAK,SAAS,SAAS,YAAY,YAAY,kBAAkB,cAAc,UAAU,QAAQ,KAAK,sBAAsB,QAAW;AAEpJ,QAAM,KAAK,IAAI,cAAc,SAAS,YAAY;AAClD,QAAM,GAAG,QAAQ,YAAY,gBAAgB;AAG7C,aAAW,QAAQ,CAAC,GAAG,MAAM;AAC3B,UAAM,SAAS,GAAG,UAAU,CAAC;AAC7B,QAAI,WAAW,QAAW;AACxB,YAAM,IAAI,MAAM,2BAA2B,CAAC,EAAE;AAAA,IAChD;AACA,gBAAY,IAAI,IAAI,iBAAiB,CAAC,CAAC,GAAG,SAAS,GAAG,QAAQ,YAAY,kBAAkB,cAAc,QAAQ,KAAK,YAAY,sBAAsB,oBAAoB,CAAC,IAAI,MAAS,EAAE,MAAM,WAAS;AAC1M,cAAQ,MAAM,UAAU,CAAC,KAAK,KAAK,EAAE;AAAA,IACvC,CAAC;AAAA,EACH,CAAC;AAGD,QAAM,OAAO,gBAAgB;AAG7B,QAAM,MAAM,IAAI,cAAc;AAC9B,MAAI;AAEF,UAAM,WAAW,IAAI,IAAI,IAAI,QAAQ,QAAQ,IAAI,CAAC;AAClD,UAAM,UAAU,IAAI,IAAI,QAAQ,SAAS,SAAS,cAAc,UAAU,MAAM,CAAC;AAGjF,UAAM,MAAM,IAAI,IAAI,MAAM,QAAQ,KAAK,UAAU,IAAI,IAAI,YAAY,UAAU,GAAG,SAAS,GAAG,CAAC;AAC/F,WAAO,IAAI,OAAO;AAAA,EACpB,UAAE;AAEA,QAAI,KAAK;AAET,OAAG,MAAM;AAAA,EACX;AACF;;;ACtMA,IAAAC,aAAe;AAEf,IAAAC,mBAAmB;;;ACjBnB,IAAAC,oBAAyB;;;ACDzB,IAAMC,wBAAuB;AAAA,EAC3B,SAAS;AAAA,EACT,SAAS;AAAA,EACT,MAAM;AAAA,EACN,MAAM;AAAA,EACN,SAAS;AACX;AACA,IAAMC,0BAAyB;AAAA,EAC7B,iBAAiB;AAAA,EACjB,kBAAkB;AACpB;AACA,IAAMC,0BAAyB;AAAA,EAC7B,CAACF,sBAAqB,OAAO,GAAG;AAAA,EAChC,CAACA,sBAAqB,OAAO,GAAG;AAAA,EAChC,CAACA,sBAAqB,IAAI,GAAG;AAAA,EAC7B,CAACA,sBAAqB,IAAI,GAAG;AAAA,EAC7B,CAACA,sBAAqB,OAAO,GAAG;AAClC;AAMA,IAAMG,6BAA4B;AAAA,EAChC,CAACC,sBAAqB,IAAI,GAAG;AAAA,IAC3B,oBAAoB;AAAA,IACpB,mBAAmB;AAAA,IACnB,mBAAmBC,wBAAuB;AAAA,EAC5C;AAAA,EACA,CAACD,sBAAqB,OAAO,GAAG;AAAA,IAC9B,oBAAoB;AAAA,IACpB,mBAAmB;AAAA,IACnB,mBAAmBC,wBAAuB;AAAA,EAC5C;AAAA,EACA,CAACD,sBAAqB,IAAI,GAAG;AAAA,IAC3B,oBAAoB;AAAA,IACpB,mBAAmB;AAAA,IACnB,mBAAmBC,wBAAuB;AAAA,EAC5C;AAAA,EACA,CAACD,sBAAqB,OAAO,GAAG;AAAA,IAC9B,oBAAoB;AAAA,IACpB,mBAAmB;AAAA,IACnB,mBAAmBC,wBAAuB;AAAA,EAC5C;AAAA,EACA,CAACD,sBAAqB,OAAO,GAAG;AAAA,IAC9B,oBAAoB;AAAA,IACpB,mBAAmB;AAAA,IACnB,mBAAmBC,wBAAuB;AAAA,EAC5C;AACF;AACA,IAAMC,eAAc;AAAA,EAClB,CAACF,sBAAqB,OAAO,GAAG;AAAA,EAChC,CAACA,sBAAqB,OAAO,GAAG;AAAA,EAChC,CAACA,sBAAqB,IAAI,GAAG;AAAA,EAC7B,CAACA,sBAAqB,IAAI,GAAG;AAAA,EAC7B,CAACA,sBAAqB,OAAO,GAAG;AAClC;AACA,IAAMG,cAAa;AAAA,EACjB,CAACF,wBAAuB,gBAAgB,GAAG;AAAA,EAC3C,CAACA,wBAAuB,eAAe,GAAG;AAAA,EAC1C,CAACD,sBAAqB,OAAO,GAAG;AAAA,EAChC,CAACA,sBAAqB,OAAO,GAAG;AAAA,EAChC,CAACA,sBAAqB,IAAI,GAAG;AAAA,EAC7B,CAACA,sBAAqB,IAAI,GAAG;AAAA,EAC7B,CAACA,sBAAqB,OAAO,GAAG;AAClC;AACA,IAAMI,gBAAe;AAAA,EACnB,CAACJ,sBAAqB,OAAO,GAAG;AAAA,EAChC,CAACA,sBAAqB,OAAO,GAAG;AAAA,EAChC,CAACA,sBAAqB,IAAI,GAAG;AAAA,EAC7B,CAACA,sBAAqB,IAAI,GAAG;AAAA,EAC7B,CAACA,sBAAqB,OAAO,GAAG;AAClC;;;ADnEA,mBAAkB;AAElB,IAAMK,aAAY,kBAAAC;AAIlB,SAAS,SAAS,KAAK;AAErB,SAAOC,WAAU,OAAO,GAAG;AAC7B;AAOA,SAAS,iBAAiB,MAAM;AAC9B,MAAI,gBAAgB;AACpB,MAAI,gBAAgB;AACpB,MAAI;AACJ,MAAI;AACF,cAAU,OAAO,IAAI;AACrB,oBAAgB;AAChB,oBAAgB,QAAQ;AACxB,UAAM,IAAI;AACV,YAAQ,QAAQ,GAAG,CAAC;AACpB,YAAQ,WAAW,CAAC;AACpB,WAAO;AAAA,EACT,SAAS,KAAK;AACZ,UAAM,QAAQ;AACd,WAAO;AAAA,KAEP,MAAM,SAAS;AAAA,IAEf,MAAM,SAAS;AAAA;AAAA,IAGf,MAAM,SAAS;AAAA,IAEf,MAAM,SAAS;AAAA,IAEf,iBAAiB,kBAAkB;AAAA,EACrC;AACF;AAEA,IAAM,cAAN,MAAkB;AAAA,EAChB,cAAc;AACZ,oBAAgB,MAAM,SAAS,oBAAI,IAAI,CAAC;AAAA,EAC1C;AAAA,EACA,QAAQ,KAAK;AACX,WAAO,KAAK,MAAM,IAAI,GAAG,KAAK;AAAA,EAChC;AAAA,EACA,QAAQ,KAAK,OAAO;AAClB,SAAK,MAAM,IAAI,KAAK,KAAK;AAAA,EAC3B;AAAA,EACA,WAAW,KAAK;AACd,SAAK,MAAM,OAAO,GAAG;AAAA,EACvB;AACF;AACA,IAAM,iBAAN,MAAqB;AAAA,EACnB,YAAY,UAAU,SAAS;AAC7B,oBAAgB,MAAM,WAAW,MAAM;AACvC,oBAAgB,MAAM,aAAa,MAAM;AACzC,SAAK,UAAU;AACf,SAAK,YAAY;AACjB,QAAI;AACF,UAAI,CAAC,QAAQ,QAAQ,QAAQ,GAAG;AAC9B,aAAK,WAAW;AAAA,MAClB;AAAA,IACF,SAAS,OAAO;AAAA,IAEhB;AAAA,EACF;AAAA,EACA,OAAO,YAAY,KAAK;AACtB,QAAI,aAAa,UAAU,SAAS,KAAK,UAAU,CAAC,MAAM,SAAY,UAAU,CAAC,IAAI;AACrF,QAAI,CAAC,KAAK,YAAY,IAAI,GAAG,GAAG;AAC9B,UAAI;AACJ,UAAI,eAAe,WAAW,iBAAiB,cAAc,GAAG;AAC9D,kBAAU,OAAO;AAAA,MACnB,WAAW,eAAe,aAAa,iBAAiB,gBAAgB,GAAG;AACzE,kBAAU,OAAO;AAAA,MACnB,OAAO;AACL,kBAAU,IAAI,YAAY;AAAA,MAC5B;AACA,WAAK,YAAY,IAAI,KAAK,IAAI,KAAK,KAAK,OAAO,CAAC;AAAA,IAClD;AACA,WAAO,KAAK,YAAY,IAAI,GAAG;AAAA,EACjC;AAAA,EACA,SAAS;AACP,WAAO,KAAK,QAAQ,QAAQ,KAAK,SAAS;AAAA,EAC5C;AAAA,EACA,aAAa;AACX,UAAM,YAAY,KAAK,SAAS;AAChC,SAAK,QAAQ,WAAW,KAAK,SAAS;AACtC,WAAO;AAAA,EACT;AAAA,EACA,WAAW;AACT,WAAO,KAAK,MAAM,KAAK,QAAQ,QAAQ,KAAK,SAAS,KAAK,IAAI;AAAA,EAChE;AAAA,EACA,IAAI,KAAK;AACP,UAAM,QAAQ,KAAK,MAAM,KAAK,QAAQ,QAAQ,KAAK,SAAS,KAAK,IAAI;AACrE,WAAO,MAAM,GAAG;AAAA,EAClB;AAAA,EACA,IAAI,KAAK,OAAO;AACd,UAAM,QAAQ,KAAK,MAAM,KAAK,QAAQ,QAAQ,KAAK,SAAS,KAAK,IAAI;AACrE,UAAM,GAAG,IAAI;AACb,SAAK,QAAQ,QAAQ,KAAK,WAAW,KAAK,UAAU,KAAK,CAAC;AAAA,EAC5D;AACF;AACA,gBAAgB,gBAAgB,eAAe,oBAAI,IAAI,CAAC;AAOxD,IAAM,oBAAoB,eAAc,eAAc,CAAC,GAAGC,uBAAsB,GAAGC,qBAAoB;;;AEpHvG,IAAAC,aAAe;AACf,IAAAC,mBAAsB;AACtB,sBAAqB;AAGrB,IAAM,UAAU,MAAM;AACpB,SAAO,IAAI,uBAAM,SAAS;AAC5B;AAKA,SAASC,aAAY,cAAc,IAAI;AAErC,QAAMC,UAAS,OAAO,eAAe,YAAY,YAAY,aAAa,WAAW,SAAS;AAC9F,MAAIA,WAAU,OAAOA,QAAO,oBAAoB,YAAY;AAC1D,WAAOA,QAAO,gBAAgB,IAAI,WAAW,WAAW,CAAC;AAAA,EAC3D;AACA,QAAM,IAAI,MAAM,wCAAwC;AAC1D;AACA,SAAS,sBAAsB;AAC7B,SAAO,OAAO,KAAKD,aAAY,EAAE,CAAC;AACpC;AACA,IAAM,oBAAoB,MAAM;AAC9B,QAAM,UAAU,eAAe,WAAW;AAC1C,QAAM,MAAM,QAAM,aAAa,QAAQ,UAAU,CAAC;AAClD,SAAO;AAAA,IACL,SAAS,QAAQ,WAAW;AAAA,IAC5B;AAAA,EACF;AACF;AACA,IAAM,uBAAuB,CAAC,kBAAkB,SAAS,aAAa,gBAAgB;AACpF,QAAM,YAAY,CAAC;AACnB,QAAM,iBAAiB,CAAC;AACxB,QAAM,eAAe,CAAC;AACtB,QAAM,sBAAsB,CAAC;AAC7B,WAAS,IAAI,GAAG,IAAI,SAAS,KAAK;AAChC,iBAAa,KAAK,CAAC;AACnB,QAAI,MAAM,aAAa;AAErB,gBAAU,KAAK,IAAI;AAEnB,qBAAe,KAAK,IAAI;AAAA,IAC1B,OAAO;AACL,YAAM,kBAAkB,YAAY,CAAC,IAAI;AACzC,gBAAU,KAAK,iBAAiB,eAAe,CAAC;AAChD,qBAAe,KAAK,IAAI,IAAI,iBAAiB,eAAe,CAAC,EAAE,MAAM;AACrE,0BAAoB,KAAK,YAAY,CAAC,CAAC;AAAA,IACzC;AAAA,EACF;AACA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AACA,eAAeE,kBAAiB,SAAS;AACvC,MAAI;AACF,UAAM,IAAI;AACV,UAAM,OAAO,KAAK,OAAO,EAAE,SAAS;AACpC,UAAM,QAAQ,QAAQ,GAAG,IAAI;AAC7B,UAAM,QAAQ,MAAM,QAAQ,QAAQ,IAAI;AACxC,QAAI,UAAU,MAAM;AAClB,YAAM,IAAI,MAAM,gBAAgB;AAAA,IAClC;AACA,WAAO;AAAA,EACT,SAAS,OAAO;AACd,WAAO;AAAA,EACT;AACF;AASA,SAAS,WAAW,OAAO;AACzB,QAAM,UAAU,MAAM,MAAM,GAAG,EAAE,CAAC;AAClC,SAAO,KAAK,MAAM,SAAS,OAAO,CAAC;AACrC;AACA,IAAM,sBAAsB,CAAC,YAAY,aAAa;AACpD,QAAM,MAAM,GAAG,UAAU,IAAI,QAAQ;AACrC,MAAI,UAAUC,WAAU,OAAO,KAAK,KAAK,MAAM,CAAC;AAChD,YAAU,QAAQ,QAAQ,MAAM,EAAE;AAClC,SAAO,IAAI,WAAAC,QAAG,SAAS,KAAK;AAC9B;AAQA,SAAS,qBAAqB,GAAG;AAC/B,SAAO,EAAE,YAAY,QAAQ,MAAM,UAAU;AAC/C;AACA,SAAS,gBAAgB,WAAW,GAAG;AACrC,MAAI,IAAI,UAAU,QAAQ;AACxB,UAAM,IAAI,MAAM,6BAA6B;AAAA,EAC/C;AACA,QAAM,oBAAoB,UAAU,MAAM,EAAE,KAAK,MAAM,KAAK,OAAO,IAAI,GAAG;AAC1E,SAAO,kBAAkB,MAAM,GAAG,CAAC,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK;AACvE;AACA,SAAS,SAAS,OAAO,KAAK,OAAO;AACnC,SAAO,IAAI,IAAI,MAAM,KAAK,MAAM,CAAC,CAAC,EAAE,KAAK,MAAM,CAAC;AAClD;AACA,SAAS,oBAAoB,OAAO,SAAS,aAAa,SAAS;AACjE,SAAO,QAAQ,OAAO,CAAC,GAAG,MAAM,MAAM,WAAW,EAAE,OAAO,CAAC,MAAM,QAAQ;AACvE,UAAM,OAAO,SAAS,OAAO,QAAQ,IAAI,GAAG,GAAG,QAAQ,WAAW,EAAE,IAAI,GAAG,CAAC;AAC5E,WAAO,KAAK,IAAI,IAAI,EAAE,KAAK,MAAM,CAAC;AAAA,EACpC,GAAG,IAAI,WAAAA,QAAG,CAAC,CAAC;AACd;AACA,SAAS,qBAAqB,OAAO,SAAS,SAAS;AACrD,QAAM,YAAY,QAAQ,IAAI,OAAK,IAAI,WAAAA,QAAG,CAAC,CAAC;AAC5C,QAAM,YAAY,IAAI,WAAAA,QAAG,OAAO;AAChC,SAAO,UAAU,IAAI,CAAC,QAAQ,MAAM,oBAAoB,OAAO,WAAW,GAAG,SAAS,CAAC;AACzF;AACA,IAAM,mBAAmB;AACzB,IAAM,mBAAmB;AAazB,SAAS,wBAAwBC,KAAI,eAAe,oBAAoB,qBAAqB,kBAAkB;AAC7G,QAAM,iBAAiB,qBAAqBA,KAAI,CAAC,kBAAkB,kBAAkB,GAAG,CAAC;AACzF,QAAM,iBAAiB,qBAAqBA,KAAI,eAAe,CAAC;AAChE,MAAI,cAAc,SAAS,kBAAkB,GAAG;AAC9C,UAAM,IAAI,MAAM,uEAAuE,aAAa,IAAI,kBAAkB,EAAE;AAAA,EAC9H;AACA,QAAM,qBAAqB,qBAAqBA,KAAI,CAAC,oBAAoB,GAAG,aAAa,GAAG,CAAC;AAG7F,QAAM,qBAAqB,eAAe,IAAI,CAAC,OAAO,MAAM,SAASA,KAAI,eAAe,CAAC,EAAE,IAAI,KAAK,GAAG,mBAAmB,IAAI,CAAC,CAAC,CAAC;AAGjI,QAAM,oBAAoB,SAASA,KAAI,eAAe,CAAC,GAAG,mBAAmB,CAAC,CAAC;AAC/E,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;AACA,SAAS,uBAAuB;AAC9B,SAAOF,WAAU,OAAO,KAAK,kBAAkB,EAAE,SAAS,KAAK,IAAI,KAAK,IAAI,GAAG,MAAM,CAAC;AACxF;AACA,SAAS,aAAa,UAAU,YAAY,QAAQ,UAAU,cAAc;AAC1E,SAAO,GAAG,QAAQ,GAAG,WAAW,UAAU,GAAG,UAAU,GAAG,WAAW,UAAU,GAAG,MAAM,GAAG,WAAW,UAAU,GAAG,QAAQ,GAAG,WAAW,UAAU,GAAG,YAAY;AACpK;AACA,SAAS,SAAS,KAAK;AACrB,MAAI,IAAI,WAAW,IAAI;AACrB,UAAM,IAAI,MAAM,8CAA8C,IAAI,MAAM,EAAE;AAAA,EAC5E;AACA,SAAO;AAAA,IACL,GAAG,OAAO,KAAK,IAAI,SAAS,GAAG,EAAE,CAAC;AAAA,IAClC,GAAG,OAAO,KAAK,IAAI,SAAS,IAAI,EAAE,CAAC;AAAA,IACnC,GAAG,IAAI,EAAE;AAAA,EACX;AACF;AACA,SAAS,mBAAmB,KAAK;AAC/B,MAAI,IAAI,YAAY,QAAQ,WAAW;AACrC,UAAM,IAAI,MAAM,6CAA6C,IAAI,OAAO,EAAE;AAAA,EAC5E;AACA,SAAO;AAAA,IACL,MAAM,OAAM,YAAW;AACrB,YAAM,MAAM,MAAM,IAAI,KAAK,SAAS,IAAI;AACxC,aAAO,SAAS,GAAG;AAAA,IACrB;AAAA,IACA,WAAW,YAAY;AACrB,YAAM,KAAK,QAAM,SAAS,WAAW,IAAI,UAAU,EAAE,SAAS,KAAK,CAAC;AACpE,aAAO,GAAG,OAAO,SAAS,EAAE,SAAS,CAAC;AAAA,IACxC;AAAA,EACF;AACF;AACA,IAAM,MAAM,gBAAAG,QAAS,UAAU,cAAc;AAC7C,IAAI,WAAW;;;AHpKf,IAAM,qBAAN,MAAyB;AAAA,EACvB,YAAY,SAAS;AACnB,QAAI;AACJ,oBAAgB,MAAM,SAAS;AAAA,MAC7B,cAAc;AAAA,IAChB,CAAC;AACD,oBAAgB,MAAM,WAAW,IAAI;AACrC,oBAAgB,MAAM,WAAW,MAAM;AACvC,oBAAgB,MAAM,gBAAgB,IAAI;AAC1C,oBAAgB,MAAM,QAAQ,IAAI;AAClC,oBAAgB,MAAM,kBAAkB,MAAM;AAC9C,oBAAgB,MAAM,kBAAkB,MAAM;AAC9C,oBAAgB,MAAM,mBAAmB,eAAe;AACxD,oBAAgB,MAAM,iBAAiB,KAAK;AAC5C,oBAAgB,MAAM,SAAS,KAAK;AACpC,oBAAgB,MAAM,WAAW,MAAM;AACvC,oBAAgB,MAAM,WAAW,MAAM;AACvC,oBAAgB,MAAM,YAAY,MAAM;AACxC,oBAAgB,MAAM,0BAA0B,CAAC;AACjD,oBAAgB,MAAM,kBAAkB,MAAM;AAC9C,oBAAgB,MAAM,mBAAmB,MAAM;AAC7C,WAAK,WAAW;AAChB,UAAI,CAAC,KAAK,MAAM,WAAW;AACzB,cAAM,aAAa,oBAAoB,oEAAoE;AAAA,MAC7G;AACA,YAAM,iBAAiB,KAAK,KAAK,SAAS,WAAW,KAAK,KAAK,MAAM;AACrE,aAAO,eAAe,IAAI,eAAa,UAAU,OAAO,gBAAgB,IAAI,EAAE,SAAS,KAAK,CAAC;AAAA,IAC/F,CAAC;AACD,QAAI,CAAC,QAAQ,kBAAkB;AAC7B,YAAM,aAAa,gBAAgB;AAAA,IACrC;AACA,SAAK,UAAU,QAAQ;AACvB,SAAK,WAAW,QAAQ,OAAO;AAC/B,UAAM,eAAe,KAAK,aAAa,QAAQ,MAAM;AACrD,QAAI,QAAQ,eAAe;AACzB,UAAI,UAAU;AACd,WAAK,gBAAgB;AAAA,IACvB,MAAO,KAAI,SAAS,OAAO;AAC3B,QAAI,OAAO,QAAQ,eAAe,UAAW,SAAQ,aAAa;AAClE,QAAI,CAAC,QAAQ,gBAAiB,SAAQ,kBAAkB,iBAAiB;AAEzE,QAAI,CAAC,QAAQ,YAAa,SAAQ,cAAc;AAChD,QAAI,CAAC,QAAQ,iBAAkB,SAAQ,mBAAmB;AAC1D,QAAI,CAAC,QAAQ,OAAQ,SAAQ,SAAS,QAAQ;AAC9C,QAAI,CAAC,QAAQ,iBAAkB,SAAQ,mBAAmB;AAC1D,QAAI,CAAC,QAAQ,QAAS,SAAQ,UAAU,eAAe,sBAAsB,IAAI,UAAU,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,SAAS,MAAM;AACpK,QAAI,CAAC,QAAQ,uBAAwB,SAAQ,yBAAyB;AACtE,QAAI,CAAC,QAAQ,kBAAmB,SAAQ,oBAAoB,QAAQ;AACpE,QAAI,QAAQ,0BAA0B,OAAW,SAAQ,wBAAwB;AACjF,SAAK,UAAU;AACf,SAAK,iBAAiB,IAAI,aAAa,KAAK,iBAAiB,QAAQ,OAAO;AAC5E,QAAI,CAAC,QAAQ,uBAAuB;AAClC,WAAK,iBAAiB,IAAI,eAAe;AAAA,QACvC,aAAa,QAAQ;AAAA,MACvB,CAAC;AAAA,IACH;AACA,UAAM,eAAe,KAAK,QAAQ,WAAW;AAAA,EAC/C;AAAA,EACA,IAAI,OAAO;AACT,QAAI,KAAK,SAAS,MAAM;AACtB,YAAM,aAAa,0BAA0B;AAAA,IAC/C;AACA,WAAO,KAAK;AAAA,EACd;AAAA,EACA,IAAI,UAAU;AACZ,WAAO,KAAK;AAAA,EACd;AAAA,EACA,IAAI,aAAa;AACf,QAAI;AACJ,YAAQ,cAAc,KAAK,WAAW,QAAQ,gBAAgB,UAAU,YAAY,aAAa,KAAK,MAAM,aAAa,CAAC;AAAA,EAC5H;AAAA,EACA,IAAI,cAAc;AAChB,WAAO,KAAK;AAAA,EACd;AAAA,EACA,IAAI,SAAS;AACX,QAAI;AAGF,YAAM;AAAA,QACJ;AAAA,MACF,IAAI;AACJ,UAAI,CAAC,KAAM,QAAO,eAAe;AACjC,UAAI,CAAC,KAAK,SAAU,QAAO,eAAe;AAC1C,UAAI,CAAC,KAAK,gBAAgB,CAAC,KAAK,MAAM,UAAW,QAAO,eAAe;AACvE,aAAO,eAAe;AAAA,IACxB,SAAS,GAAG;AAAA,IAAC;AACb,WAAO,eAAe;AAAA,EACxB;AAAA,EACA,IAAI,YAAY;AACd,QAAI;AACJ,YAAQ,uBAAuB,KAAK,oBAAoB,QAAQ,yBAAyB,SAAS,SAAS,qBAAqB;AAAA,EAClI;AAAA,EACA,IAAI,uBAAuB;AACzB,WAAO,KAAK,aAAa,QAAQ;AAAA,EACnC;AAAA,EACA,IAAI,WAAW;AACb,QAAI,sBAAsB;AAC1B,SAAK,uBAAuB,KAAK,MAAM,cAAc,QAAQ,yBAAyB,UAAU,qBAAqB,mBAAmB;AACtI,aAAO,KAAK,MAAM,SAAS;AAAA,IAC7B;AACA,YAAQ,eAAe,KAAK,WAAW,QAAQ,iBAAiB,WAAW,eAAe,aAAa,cAAc,QAAQ,iBAAiB,UAAU,aAAa,WAAW,KAAK,MAAM,SAAS,WAAW;AAAA,EACjN;AAAA,EACA,IAAI,aAAa;AACf,QAAI;AACJ,YAAQ,eAAe,KAAK,WAAW,QAAQ,iBAAiB,WAAW,eAAe,aAAa,cAAc,QAAQ,iBAAiB,UAAU,aAAa,aAAa,KAAK,MAAM,SAAS,aAAa;AAAA,EACrN;AAAA,EACA,IAAI,iBAAiB;AACnB,WAAO,KAAK,QAAQ,WAAW,QAAQ;AAAA,EACzC;AAAA,EACA,IAAI,2BAA2B;AAC7B,WAAO,KAAK,YAAY,QAAQ,WAAW,KAAK,QAAQ,6BAA6B,SAAY,OAAO,CAAC,CAAC,KAAK,QAAQ;AAAA,EACzH;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,sBAAsB,WAAW;AACrC,SAAK,WAAW;AAChB,UAAM,cAAc,IAAI,WAAAC,QAAG,UAAU,CAAC,GAAG,KAAK;AAC9C,UAAM,cAAc,MAAM,KAAK,qBAAqB,WAAW;AAC/D,UAAM,KAAK,KAAK,WAAW;AAAA,MACzB,WAAW;AAAA,IACb,CAAC;AACD,UAAM,YAAY,CAAC;AACnB,UAAM,aAAa,CAAC;AACpB,UAAM,eAAe,CAAC;AACtB,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACzC,YAAM,mBAAmB,IAAI,WAAAA,QAAG,UAAU,CAAC,GAAG,KAAK;AACnD,YAAM;AAAA,QACJ;AAAA,QACA;AAAA,MACF,IAAI,MAAM,KAAK,KAAK,YAAY,gBAAgB;AAChD,UAAI,WAAW,SAAS,QAAQ,GAAG;AAEjC,cAAM,KAAK,KAAK;AAChB,cAAM,aAAa,kBAAkB;AAAA,MACvC;AACA,iBAAW,KAAK,QAAQ;AACxB,mBAAa,KAAK,IAAI,WAAAA,QAAG,QAAQ,CAAC;AAClC,gBAAU,KAAK,QAAQ;AAAA,IACzB;AACA,UAAM,WAAW,sBAAsB,KAAK,KAAK,UAAU,WAAW,YAAY;AAElF,UAAM,KAAK,KAAK;AAChB,WAAO,SAAS,SAAS,OAAO,EAAE;AAAA,EACpC;AAAA,EACA,MAAM,KAAK,SAAS;AAAA,IAClB,sBAAsB;AAAA,EACxB,GAAG;AACD,QAAI,UAAU;AACd,SAAK,WAAW;AAChB,QAAI,OAAO,cAAc,OAAW,QAAO,YAAY;AACvD,UAAM,cAAc,iBAAiB,KAAK,QAAQ,iBAAiB,KAAK,OAAO;AAC/E,QAAI,KAAK,YAAY,SAAS,WAAW,KAAK,QAAQ,QAAQ;AAC5D,YAAM,aAAa,cAAc,2CAA2C;AAAA,IAC9E;AACA,SAAK,UAAU,IAAI,wBAAwB;AAAA,MACzC,gBAAgB;AAAA,QACd,kBAAkB,KAAK,QAAQ;AAAA,QAC/B,SAAS,KAAK,QAAQ;AAAA,QACtB,QAAQ,KAAK,aAAa,KAAK,QAAQ,MAAM,IAAI,QAAQ,WAAW,KAAK,QAAQ;AAAA,QACjF,SAAS,KAAK,QAAQ;AAAA,QACtB,kBAAkB,KAAK,QAAQ;AAAA,QAC/B,2BAA2B;AAAA,QAC3B,kBAAkB,KAAK,QAAQ;AAAA,QAC/B,SAAS,KAAK;AAAA,QACd,QAAQ,KAAK,QAAQ;AAAA,MACvB;AAAA,IACF,CAAC;AACD,SAAK,eAAe,IAAI,oBAAkB;AAAA,MACxC,SAAS,GAAG,IAAI,IAAI,YAAY,mBAAmB,CAAC,CAAC,EAAE,MAAM;AAAA,MAC7D,eAAe,KAAK;AAAA,IACtB,CAAC;AACD,UAAM,2BAA2B,IAAI,2BAAyB;AAC9D,SAAK,OAAO,IAAI,QAAQ;AAAA,MACtB,eAAe,KAAK;AAAA,MACpB,iBAAiB,KAAK;AAAA,MACtB,cAAc,KAAK;AAAA,MACnB,YAAY,KAAK,QAAQ;AAAA,MACzB,SAAS;AAAA,QACP,oBAAoB;AAAA,MACtB;AAAA,MACA,YAAY,KAAK;AAAA,IACnB,CAAC;AACD,QAAI,KAAK,gBAAgB;AACvB,YAAM,KAAK,QAAQ,KAAK;AAAA,QACtB,QAAQ;AAAA,QACR,cAAc;AAAA,MAChB,CAAC;AAAA,IACH,WAAW,KAAK,QAAQ,WAAW,QAAQ,OAAO;AAChD,YAAM,KAAK,QAAQ,KAAK,CAAC,CAAC;AAAA,IAC5B;AACA,SAAK,QAAQ;AAGb,QAAI,OAAO,wBAAwB,KAAK,QAAQ,WAAW,QAAQ,cAAc,WAAW,YAAY,QAAQ,aAAa,UAAU,SAAS,SAAS,KAAK,SAAS,QAAQ,MAAM,WAAW,YAAY,QAAQ,aAAa,UAAU,SAAS,SAAS,KAAK,SAAS,eAAe,IAAI;AAG5R,YAAM,KAAK,qBAAqB;AAGhC;AAAA,IACF,WAAW,OAAO,aAAa,KAAK,gBAAgB;AAElD,YAAM,YAAY,MAAM,KAAK,eAAe,IAAI,WAAW;AAC3D,UAAI,WAAW;AACb,aAAK,eAAe,YAAY;AAGhC,cAAM,gBAAgB,MAAM,KAAK,eAAe,iBAAiB,EAAE,MAAM,OAAM,QAAO;AACpF,cAAI,MAAM,2BAA2B,GAAG;AAAA,QAC1C,CAAC;AAGD,YAAI,eAAe;AACjB,gBAAM,KAAK,iBAAiB,aAAa;AAGzC;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,UAAM,KAAK,eAAe;AAAA,EAC5B;AAAA,EACA,MAAM,eAAe,QAAQ;AAC3B,SAAK,WAAW;AAChB,QAAI,KAAK,aAAa,KAAK,QAAQ,MAAM,GAAG;AAC1C,YAAM,aAAa,sBAAsB,mCAAmC,KAAK,QAAQ,MAAM,QAAQ;AAAA,IACzG;AACA,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACF,IAAI;AACJ,UAAM,sBAAsB,KAAK;AACjC,QAAI,0BAA0B,cAAc;AAC1C,YAAM,aAAa,cAAc,8DAA8D;AAAA,IACjG;AACA,QAAI,KAAK,mBAAmB,gBAAgB,yBAAyB;AACnE,YAAM,aAAa,cAAc,8CAA8C;AAAA,IACjF;AACA,QAAI;AAEF,YAAM,iBAAiB;AACvB,YAAM,kBAAkB;AACxB,UAAI;AACJ,UAAI,eAAe,oBAAoB;AACrC,YAAI;AAEJ,wBAAgB,MAAM,oBAAoB,aAAa,OAAO,kBAAkB;AAChF,YAAI,KAAK,eAAgB;AACzB,aAAK,YAAY;AAAA,UACf,YAAY,KAAK,eAAe,aAAa;AAAA,UAC7C,wBAAwB,wBAAwB,cAAc,eAAe,QAAQ,0BAA0B,SAAS,SAAS,sBAAsB;AAAA,UACvJ,UAAU,cAAc;AAAA,UACxB,YAAY,KAAK,eAAe,cAAc,YAAY,gBAAgB;AAAA,QAC5E,CAAC;AAAA,MACH,WAAW,gBAAgB,yBAAyB;AAClD,YAAI;AACJ,wBAAgB,MAAM,oBAAoB,sBAAsB;AAAA,UAC9D,uBAAuB,gBAAgB,yBAAyB,mBAAmB;AAAA,UACnF,oBAAoB,gBAAgB;AAAA,UACpC,yBAAyB,gBAAgB;AAAA,QAC3C,CAAC;AACD,YAAI,KAAK,eAAgB;AACzB,aAAK,YAAY;AAAA,UACf,YAAY,KAAK,eAAe,aAAa;AAAA,UAC7C,wBAAwB,yBAAyB,cAAc,eAAe,QAAQ,2BAA2B,SAAS,SAAS,uBAAuB;AAAA,UAC1J,UAAU,cAAc,SAAS,CAAC;AAAA,UAClC,YAAY,KAAK,eAAe,cAAc,YAAY,gBAAgB;AAAA,QAC5E,CAAC;AAAA,MACH;AACA,UAAI,iBAAiB,0BAA0B,cAAc,aAAa,SAAS;AACjF,YAAI,cAAc,SAAS,eAAe,MAAM;AAC9C,gBAAM,aAAa,cAAc,iFAAiF;AAAA,QACpH;AACA,cAAM,iBAAiB,cAAc,aAAa,QAAQ,SAAS,IAAI,GAAG;AAC1E,cAAM,KAAK,UAAU,gBAAgB,eAAe,IAAI;AAAA,MAC1D,OAAO;AACL,cAAM,KAAK,UAAU,cAAc,eAAe,KAAK;AAAA,MACzD;AAAA,IACF,SAAS,KAAK;AACZ,UAAI,MAAM,eAAe,GAAG;AAC5B,UAAI,eAAe,aAAW;AAC5B,YAAI,IAAI,SAAS,MAAM;AACrB,gBAAM,aAAa,QAAQ,OAAO,oBAAoB;AAAA,QACxD;AAAA,MACF;AACA,YAAM,aAAa,QAAQ,IAAI,OAAO;AAAA,IACxC;AAAA,EACF;AAAA,EACA,MAAM,aAAa,QAAQ;AACzB,SAAK,WAAW;AAChB,UAAM;AAAA,MACJ,wBAAwB;AAAA,IAC1B,IAAI;AACJ,QAAI,wBAAwB,GAAG;AAC7B,YAAM,aAAa,sBAAsB,uBAAuB,qBAAqB,2CAA2C;AAAA,IAClI;AACA,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI;AACJ,SAAK,QAAQ,eAAe;AAC5B,SAAK,QAAQ,aAAa;AAC1B,QAAI,0BAA0B,cAAc;AAC1C,YAAM,aAAa,cAAc,8DAA8D;AAAA,IACjG;AACA,QAAI;AACF,UAAI;AAEJ,YAAM,kBAAkB,CAAC;AACzB,eAAS,IAAI,GAAG,IAAI,uBAAuB,KAAK;AAC9C,wBAAgB,KAAK,KAAK,QAAQ,aAAa,KAAK,KAAK,QAAQ,CAAC,CAAC;AAAA,MACrE;AAGA,UAAI;AACJ,UAAI,CAAC,OAAO,aAAa;AAEvB,uBAAe,KAAK,QAAQ,mBAAmB,YAAY,UAAU,YAAY;AAAA,UAC/E,aAAa;AAAA,QACf,GAAG,SAAS,eAAc,eAAc,CAAC,GAAG,OAAO,mBAAmB,GAAG,OAAO,gBAAgB,CAAC;AAAA,MACnG,OAAO;AAEL,uBAAe,KAAK,QAAQ,mBAAmB,qBAAqB,UAAU,YAAY,CAAC;AAAA,UACzF,UAAU,OAAO;AAAA,UACjB;AAAA,UACA,qBAAqB,OAAO;AAAA,QAC9B,CAAC,CAAC;AAAA,MACJ;AAGA,YAAM,CAAC,aAAa,IAAI,MAAM,QAAQ,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC;AAC5E,YAAM,aAAa,KAAK,eAAe,aAAa;AACpD,WAAK,QAAQ,aAAa,IAAI,WAAAA,QAAG,YAAY,KAAK;AAClD,WAAK,YAAY;AAAA,QACf;AAAA,QACA,yBAAyB,yBAAyB,cAAc,eAAe,QAAQ,2BAA2B,SAAS,SAAS,uBAAuB,gBAAgB,CAAC;AAAA,QAC5K,UAAU,eAAc,eAAc,CAAC,GAAG,WAAW,OAAO,CAAC,GAAG,CAAC,GAAG;AAAA,UAClE;AAAA,UACA;AAAA,QACF,CAAC;AAAA,QACD,YAAY,KAAK,eAAe,cAAc,YAAY,gBAAgB;AAAA,MAC5E,CAAC;AACD,UAAI,0BAA0B,cAAc,aAAa,SAAS;AAChE,YAAI,cAAc,SAAS,eAAe,MAAM;AAC9C,gBAAM,aAAa,cAAc,iFAAiF;AAAA,QACpH;AACA,cAAM,iBAAiB,cAAc,aAAa,QAAQ,SAAS,IAAI,GAAG;AAC1E,cAAM,KAAK,UAAU,gBAAgB,eAAe,IAAI;AAAA,MAC1D,OAAO;AACL,cAAM,KAAK,UAAU,cAAc,eAAe,KAAK;AAAA,MACzD;AAAA,IACF,SAAS,KAAK;AACZ,UAAI,MAAM,eAAe,GAAG;AAC5B,UAAI,eAAe,aAAW;AAC5B,YAAI,IAAI,SAAS,MAAM;AACrB,gBAAMC,YAAW,aAAa,QAAQ,OAAO,oBAAoB;AACjE,UAAAA,UAAS,QAAQ,IAAI;AACrB,gBAAMA;AAAA,QACR;AAAA,MACF;AACA,YAAM,WAAW,aAAa,QAAQ,IAAI,OAAO;AACjD,eAAS,QAAQ,IAAI;AACrB,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EACA,kBAAkB,gBAAgB;AAChC,SAAK,iBAAiB;AAAA,EACxB;AAAA,EACA,MAAM,uBAAuB;AAC3B,SAAK,WAAW;AAChB,QAAI;AACF,YAAM,SAAS,MAAM,KAAK,QAAQ,mBAAmB,kBAAkB;AACvE,UAAI;AACJ,UAAI,OAAO,WAAW,aAAa,eAAe;AAChD,YAAI;AACJ,wBAAgB,OAAO;AACvB,YAAI,CAAC,eAAe;AAClB,gBAAM,aAAa,0BAA0B;AAAA,QAC/C;AACA,aAAK,YAAY;AAAA,UACf,YAAY,KAAK,eAAe,aAAa;AAAA,UAC7C,yBAAyB,yBAAyB,cAAc,eAAe,QAAQ,2BAA2B,SAAS,SAAS,uBAAuB,gBAAgB,CAAC;AAAA,UAC5K,UAAU,cAAc;AAAA,UACxB,YAAY,KAAK,eAAe,cAAc,YAAY,gBAAgB;AAAA,QAC5E,CAAC;AACD,cAAMC,YAAW,KAAK,YAAY;AAClC,aAAK,QAAQ,eAAeA,UAAS;AAAA,MACvC,WAAW,OAAO,WAAW,aAAa,yBAAyB;AACjE,YAAI;AACJ,wBAAgB,OAAO;AACvB,YAAI,CAAC,eAAe;AAClB,gBAAM,aAAa,mCAAmC;AAAA,QACxD;AACA,aAAK,YAAY;AAAA,UACf,YAAY,KAAK,eAAe,aAAa;AAAA,UAC7C,yBAAyB,yBAAyB,cAAc,eAAe,QAAQ,2BAA2B,SAAS,SAAS,uBAAuB,gBAAgB,CAAC;AAAA,UAC5K,UAAU,cAAc,SAAS,CAAC;AAAA,UAClC,YAAY,KAAK,eAAe,cAAc,YAAY,gBAAgB;AAAA,QAC5E,CAAC;AACD,cAAMA,YAAW,KAAK,YAAY;AAClC,aAAK,QAAQ,eAAeA,UAAS;AAAA,MACvC,OAAO;AACL,cAAM,aAAa,0BAA0B;AAAA,MAC/C;AACA,YAAM,WAAW,KAAK,YAAY;AAClC,UAAI,CAAC,KAAK,MAAM,YAAY;AAC1B,cAAM,aAAa,kBAAkB,mEAAmE;AAAA,MAC1G;AACA,WAAK,QAAQ,aAAa,IAAI,WAAAF,QAAG,KAAK,MAAM,YAAY,KAAK;AAC7D,WAAK,QAAQ,aAAa,SAAS;AACnC,YAAM,KAAK,UAAU;AAAA,IACvB,SAAS,OAAO;AACd,WAAK,WAAW;AAChB,UAAI,MAAM,wCAAwC,KAAK;AACvD,YAAM,aAAa,QAAQ,MAAM,OAAO;AAAA,IAC1C;AAAA,EACF;AAAA,EACA,MAAM,eAAe,WAAW;AAC9B,SAAK,WAAW;AAChB,QAAI;AAGF,UAAI,CAAC,KAAK,KAAK,cAAc;AAC3B,YAAI;AACJ,cAAM,mBAAmB,eAAe,eAAe,UAAU,SAAS,CAAC;AAC3E,cAAM,aAAa,iBAAiB,UAAU,EAAE,KAAK,EAAE,SAAS,KAAK,EAAE,SAAS,IAAI,GAAG;AACvF,cAAM,kBAAkB,wBAAwB,KAAK,KAAK,SAAS,gBAAgB,QAAQ,0BAA0B,WAAW,wBAAwB,sBAAsB,KAAK,KAAK,MAAM,OAAO,QAAQ,0BAA0B,SAAS,SAAS,sBAAsB,UAAU;AACzR,YAAI,CAAC,gBAAgB;AACnB,gBAAM,aAAa,yBAAyB,yDAAyD;AAAA,QACvG;AACA,cAAM,oBAAoB,MAAM,KAAK,qBAAqB,SAAS;AACnE,cAAM,KAAK,KAAK,oBAAoB,mBAAmB,IAAI;AAAA,MAC7D;AAGA,YAAM,KAAK,KAAK,eAAe;AAC/B,YAAM,KAAK,aAAa,SAAS;AAAA,IACnC,SAAS,KAAK;AACZ,UAAI,MAAM,eAAe,GAAG;AAC5B,UAAI,eAAe,aAAW;AAC5B,YAAI,IAAI,SAAS,MAAM;AACrB,gBAAM,aAAa,QAAQ,OAAO,oBAAoB;AAAA,QACxD;AAAA,MACF;AACA,YAAM,aAAa,QAAQ,IAAI,OAAO;AAAA,IACxC;AAAA,EACF;AAAA,EACA,kBAAkB,cAAc;AAC9B,SAAK,YAAY;AAAA,MACf,WAAW,KAAK,KAAK,UAAU,YAAY,EAAE,OAAO,KAAK,KAAK,UAAU,KAAK;AAAA,MAC7E;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,sBAAsB;AACpB,SAAK,WAAW;AAChB,QAAI,CAAC,KAAK,MAAM,WAAW;AACzB,YAAM,aAAa,oBAAoB,iEAAiE;AAAA,IAC1G;AACA,QAAI,CAAC,KAAK,MAAM,eAAe;AAC7B,YAAM,aAAa,yBAAyB,8EAA8E;AAAA,IAC5H;AACA,QAAI;AACF,aAAO;AAAA,QACL,WAAW,KAAK,MAAM;AAAA,QACtB,WAAW,KAAK,MAAM;AAAA,MACxB;AAAA,IACF,SAAS,KAAK;AACZ,UAAI,MAAM,eAAe,GAAG;AAC5B,YAAM,aAAa,QAAQ,IAAI,OAAO;AAAA,IACxC;AAAA,EACF;AAAA,EACA,MAAM,UAAU,iBAAiB,iBAAiB,MAAM;AACtD,SAAK,WAAW;AAChB,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,KAAK;AACT,UAAM,kBAAkB,oBAAoB,YAAY,KAAK,QAAQ,iBAAiB;AACtF,QAAI,CAAE,MAAM,KAAK,sBAAsB,eAAe,GAAI;AACxD,UAAI,KAAK,KAAK,0BAA0B,CAAC,EAAE,QAAQ;AACjD,cAAM,aAAa,uBAAuB;AAAA,MAC5C;AACA,YAAM,aAAa,kBAAkB;AAAA,IACvC;AACA,WAAO,KAAK,WAAW,YAAY;AACjC,UAAI;AACJ,UAAI,KAAK,aAAa,KAAK,QAAQ,MAAM,GAAG;AAC1C,sBAAc;AAAA,UACZ,aAAa;AAAA,UACb,gBAAgB;AAAA,UAChB,YAAY;AAAA,QACd;AAAA,MACF,OAAO;AAEL,cAAM,cAAc,eAAO,MAAM,UAAU,SAAS;AACpD,cAAM,cAAc,GAAG,YAAY,QAAQ,IAAI;AAC/C,sBAAc;AAAA,UACZ;AAAA,UACA,gBAAgB,YAAY,QAAQ;AAAA,UACpC,YAAY,YAAY,GAAG;AAAA,QAC7B;AAAA,MACF;AACA,YAAM,kBAAkB,IAAI,WAAAA,QAAG,MAAM,KAAK,aAAa;AAAA,QACrD,WAAW,aAAa;AAAA,QACxB,oBAAoB;AAAA,MACtB,CAAC,GAAG,KAAK;AACT,YAAM,KAAK,gBAAgB,eAAe;AAC1C,YAAM,KAAK,eAAe,IAAI,WAAAA,QAAG,iBAAiB,KAAK,CAAC;AACxD,YAAM,kBAAkBG,gBAAe,iBAAiB,cAAc;AACtE,YAAM,KAAK,aAAa,iBAAiB,eAAe;AACxD,YAAM,KAAK,0BAA0B,eAAe;AAGpD,UAAI;AACJ,UAAI,gBAAgB;AAClB,0BAAkB,MAAM,KAAK,aAAa,eAAc;AAAA,UACtD,WAAW,aAAa;AAAA,QAC1B,GAAG,eAAe,CAAC;AAAA,MACrB;AAGA,aAAO;AAAA,IACT,CAAC,EAAE,MAAM,YAAU;AACjB,UAAI,MAAM,uBAAuB,OAAO,OAAO;AAC/C,YAAM,MAAM,aAAa,QAAQ,OAAO,OAAO;AAC/C,UAAI,QAAQ,OAAO;AACnB,YAAM;AAAA,IACR,CAAC;AAAA,EACH;AAAA;AAAA,EAEA,MAAM,aAAa,oBAAoB;AACrC,SAAK,WAAW;AAChB,UAAM;AAAA,MACJ;AAAA,IACF,IAAI;AACJ,QAAI;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI;AACJ,QAAI,CAAC,oBAAoB,SAAS,SAAS,GAAG;AAC5C,YAAM,aAAa,qBAAqB,gCAAgC,SAAS,4BAA4B,mBAAmB,GAAG;AAAA,IACrI;AACA,QAAI,CAAC,WAAW;AACd,kBAAY,kBAAkB,EAAE;AAAA,IAClC;AACA,QAAI,CAAC,kBAAkB;AACrB,yBAAmB,8BAA8B;AAAA,IACnD;AACA,QAAI,CAAC,oBAAoB;AACvB,2BAAqB,CAAC;AAAA,IACxB;AACA,UAAM,YAAYA,gBAAe,WAAW,cAAc;AAC1D,QAAI,KAAK,gBAAgB,EAAE,SAAS,UAAU,OAAO,gBAAgB,IAAI,EAAE,SAAS,KAAK,CAAC,GAAG;AAC3F,YAAM,aAAa,uBAAuB;AAAA,IAC5C;AACA,WAAO,KAAK,WAAW,YAAY;AACjC,YAAM,KAAK,kBAAkB,WAAW,SAAS;AACjD,YAAM,KAAK,oBAAoB,SAAS;AACxC,YAAM,KAAK,qBAAqB;AAAA,QAC9B;AAAA,QACA;AAAA,QACA;AAAA,QACA,gBAAgB;AAAA,MAClB,CAAC;AACD,aAAO,qBAAqB,SAAS,EAAE,SAAS,KAAK;AAAA,IACvD,CAAC,EAAE,MAAM,YAAU;AACjB,UAAI,MAAM,0BAA0B,OAAO,OAAO;AAClD,YAAM,MAAM,aAAa,QAAQ,0BAA0B,OAAO,OAAO,EAAE;AAC3E,UAAI,QAAQ,OAAO;AACnB,YAAM;AAAA,IACR,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY;AACV,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,KAAK;AACT,WAAO,OAAO,KAAK,SAAS;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB;AACf,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,KAAK;AACT,WAAO,QAAM,SAAS,KAAK,KAAK,UAAU,UAAU,SAAS,KAAK,CAAC;AAAA,EACrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,mBAAmB;AACjB,UAAM,IAAI,KAAK,KAAK,SAAS,cAAc,KAAK,UAAU,CAAC,EAAE,UAAU;AACvE,WAAO,QAAQ,EAAE,cAAc,CAAC,EAAE,UAAU;AAAA,EAC9C;AAAA,EACA,MAAM,uBAAuB;AAC3B,SAAK,UAAU,MAAM,KAAK,YAAY;AAEtC,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,KAAK;AACT,UAAM,YAAY,KAAK,eAAe;AACtC,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,iBAAiB,KAAK,QAAQ,iBAAiB,KAAK,OAAO;AAC/D,QAAI,CAAC,KAAK,MAAM,WAAW;AACzB,YAAM,aAAa,oBAAoB,8CAA8C;AAAA,IACvF;AACA,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,MAAM,KAAK,KAAK,YAAY,KAAK,MAAM,WAAW;AAAA,MACpD,cAAc;AAAA,IAChB,CAAC;AACD,UAAM,WAAW,KAAK,YAAY;AAClC,QAAI,CAAC,aAAa,CAAC,uBAAuB;AACxC,YAAM,aAAa,+BAA+B;AAAA,IACpD;AAGA,UAAM,qBAAqB,qBAAqB;AAChD,UAAM,iBAAiB,aAAa,KAAK,UAAU,KAAK,YAAY,KAAK,KAAK,QAAQ,UAAU,kBAAkB;AAClH,UAAM,UAAU;AAChB,UAAM,cAAc,UAAU;AAG9B,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,MAAM,KAAK,QAAQ,aAAa,KAAK,KAAK,QAAQ,KAAK,KAAK,SAAS,UAAU,KAAK,KAAK,MAAM,CAAC;AACpG,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA,qBAAqB;AAAA,IACvB,IAAI,qBAAqB,uBAAuB,SAAS,aAAa,WAAW;AAGjF,UAAM,UAAU,MAAM,aAAa,gBAAgB,kBAAkB;AACrE,UAAM,YAAY,aAAa,MAAM,+BAA+B,aAAa;AACjF,UAAM,oBAAoB,UAAU,IAAI,QAAQ,EAAE,KAAK,UAAU,MAAM,CAAC;AACxE,UAAM,eAAe,KAAK,KAAK,oBAAoB,KAAK,MAAM,YAAY;AAC1E,UAAM,eAAe,kBAAkB,IAAI,YAAY,EAAE,KAAK,UAAU,MAAM,CAAC;AAC/E,UAAM,QAAQ,qBAAqB,YAAY,EAAE,SAAS,QAAQ;AAClE,QAAI,CAAC,gBAAgB;AACnB,YAAM,aAAa,sBAAsB;AAAA,IAC3C;AACA,UAAM;AAAA,MACJ;AAAA,IACF,IAAI;AACJ,QAAI,CAAC,YAAY;AACf,YAAM,aAAa,qBAAqB;AAAA,IAC1C;AAGA,UAAM,kBAAkB,OAAO,KAAK,UAAU,OAAO,SAAS,EAAE,SAAS,CAAC,CAAC,EAAE,SAAS,QAAQ;AAC9F,UAAM,SAAS,IAAI,OAAO,gBAAgB,aAAa,cAAc,WAAW,SAAS,OAAO,iBAAiB,MAAM,KAAK,OAAO;AACnI,UAAM,eAAe,CAAC;AACtB,aAAS,IAAI,GAAG,IAAI,8BAA8B,QAAQ,KAAK;AAC7D,YAAM,cAAc,8BAA8B,CAAC;AACnD,mBAAa,WAAW,IAAI,aAAa,OAAO,+BAA+B,eAAe,WAAW,EAAE,SAAS,KAAK;AAAA,IAC3H;AACA,WAAO,WAAW;AAAA,MAChB;AAAA,MACA,eAAe;AAAA,MACf,OAAO,qBAAqB,KAAK,gBAAgB,CAAC,EAAE,SAAS,QAAQ;AAAA,IACvE,CAAC;AACD,UAAM,OAAO,MAAM,EAAE,MAAM,SAAO;AAChC,aAAO,QAAQ;AAAA,QACb;AAAA,QACA,eAAe;AAAA,MACjB,CAAC;AACD,YAAM;AAAA,IACR,CAAC;AACD,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EACA,MAAM,KAAK,MAAM,SAAS,OAAO,qBAAqB;AACpD,QAAI,KAAK,gBAAgB;AACvB,YAAM,SAAS,MAAM,KAAK,eAAe;AAAA,QACvC,MAAM,WAAW,KAAK,IAAI;AAAA,QAC1B;AAAA,MACF,CAAC;AACD,UAAI,CAAC,OAAO,WAAW,OAAO,OAAO;AACnC,cAAM,MAAM,OAAO,SAAS,4BAA4B;AAAA,MAC1D;AAAA,IACF;AACA,SAAK,UAAU,MAAM,KAAK,YAAY;AACtC,QAAI,KAAK,YAAY,QAAQ,WAAW;AACtC,YAAM,MAAM,MAAM,KAAK,qBAAqB,MAAM,QAAQ,mBAAmB;AAC7E,aAAO,OAAO,OAAO,CAAC,IAAI,GAAG,IAAI,GAAG,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAAA,IAC3D,WAAW,KAAK,YAAY,QAAQ,SAAS;AAC3C,aAAO,KAAK,aAAa,MAAM,MAAM;AAAA,IACvC;AACA,UAAM,aAAa,QAAQ,mCAAmC,KAAK,OAAO,EAAE;AAAA,EAC9E;AAAA;AAAA,EAGA,MAAM,aAAa,WAAW,WAAW;AACvC,QAAI,CAAC,KAAK,MAAM,WAAW;AACzB,YAAM,aAAa,oBAAoB,wDAAwD;AAAA,IACjG;AACA,QAAI,CAAC,KAAK,KAAK,SAAS,YAAY;AAClC,YAAM,aAAa,kBAAkB;AAAA,IACvC;AACA,UAAM,KAAK,WAAW,YAAY;AAChC,YAAM,mBAAmB,KAAK,KAAK,SAAS,WAAW,KAAK,KAAK,MAAM,EAAE,UAAU;AACnF,UAAI,oBAAoB,GAAG;AACzB,cAAM,aAAa,uBAAuB,2BAA2B;AAAA,MACvE;AACA,YAAM,MAAM;AACZ,YAAM,WAAWA,gBAAe,KAAK,MAAM,WAAW,cAAc;AACpE,UAAI,IAAI,OAAO,QAAQ,GAAG;AACxB,cAAM,aAAa,2BAA2B,qCAAqC;AAAA,MACrF;AACA,YAAM,KAAK,KAAK,gBAAgB;AAAA,QAC9B,WAAW,KAAK,MAAM;AAAA,QACtB,iBAAiB;AAAA,QACjB,gBAAgB,KAAK;AAAA,MACvB,CAAC;AACD,YAAM,eAAe,IAAI,OAAO,gBAAgB,IAAI,EAAE,SAAS,KAAK;AACpE,YAAM,UAAU,KAAK,KAAK,SAAS,oBAAoB;AACvD,YAAM,UAAU,QAAQ,YAAY;AACpC,UAAI,SAAS;AACX,cAAM,QAAQ,IAAI,QAAQ,IAAI,OAAM,SAAQ;AAC1C,cAAI;AACJ,kBAAQ,aAAa,KAAK,UAAU,QAAQ,eAAe,SAAS,SAAS,WAAW,SAAS,uBAAuB,cAAc,IAAI;AAAA,QAC5I,CAAC,CAAC;AAAA,MACJ;AAGA,UAAI,WAAW;AACb,cAAM,cAAc,IAAI,WAAAH,QAAG,WAAW,KAAK;AAC3C,cAAM,mBAAmBG,gBAAe,aAAa,cAAc;AAEnE,YAAI,iBAAiB,OAAO,GAAG,GAAG;AAChC,gBAAM,KAAK,0BAA0B,WAAW;AAAA,QAClD;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,MAAM,SAAS;AACb,QAAI;AACJ,SAAK,wBAAwB,KAAK,oBAAoB,QAAQ,0BAA0B,UAAU,sBAAsB,WAAW;AACjI,YAAM,KAAK,eAAe,kBAAkB;AAAA,IAC9C;AAEA,UAAM,KAAK,eAAe,IAAI,aAAa,EAAE;AAC7C,SAAK,WAAW;AAChB,UAAM,KAAK,KAAK;AAAA,MACd,sBAAsB;AAAA,MACtB,WAAW;AAAA,IACb,CAAC;AAAA,EACH;AAAA,EACA,cAAc;AACZ,QAAI,CAAC,KAAK,MAAM,UAAU;AACxB,YAAM,aAAa,gBAAgB;AAAA,IACrC;AACA,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA,EACA,gBAAgB;AACd,SAAK,WAAW;AAChB,UAAM,cAAc,KAAK,KAAK,cAAc;AAC5C,UAAM,YAAY,KAAK,MAAM,YAAY,QAAM,SAAS,KAAK,KAAK,UAAU,KAAK,MAAM,UAAU,SAAS,KAAK,CAAC,IAAI;AACpH,UAAM,UAAU,KAAK,KAAK,SAAS,aAAa,KAAK,KAAK,SAAS,WAAW,KAAK,KAAK,MAAM,IAAI,CAAC;AACnG,UAAM,aAAa;AAAA;AAAA,MAEjB,iBAAiB,YAAY;AAAA,MAC7B,WAAW,YAAY;AAAA,MACvB,cAAc,QAAQ,SAAS;AAAA,MAC/B,mBAAmB,KAAK,KAAK,YAAY,EAAE,oBAAoB;AAAA,MAC/D,gBAAgB,YAAY;AAAA,MAC5B;AAAA,MACA,SAAS,KAAK;AAAA,IAChB;AACA,WAAO;AAAA,EACT;AAAA,EACA,MAAM,gBAAgB;AACpB,SAAK,WAAW;AAChB,QAAI,CAAC,KAAK,MAAM,WAAW;AACzB,YAAM,aAAa,oBAAoB,yDAAyD;AAAA,IAClG;AACA,QAAI;AAIF,YAAM,KAAK,KAAK,mBAAmB;AACnC,YAAM,KAAK,KAAK,6BAA6B;AAAA,IAC/C,SAAS,OAAO;AACd,UAAI,MAAM,uBAAuB,KAAK;AACtC,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EACA,MAAM,cAAc,YAAY;AAC9B,SAAK,WAAW;AAEhB,UAAM,KAAK,KAAK,6BAA6B;AAC7C,SAAK,QAAQ,aAAa;AAC1B,SAAK,KAAK,aAAa;AAAA,EACzB;AAAA;AAAA,EAGA,MAAM,gBAAgB,WAAW,UAAU,OAAO;AAChD,QAAI,CAAC,SAAS;AACZ,YAAM,iBAAiB,MAAM,KAAK,gBAAgB;AAClD,UAAI,gBAAgB;AAClB,cAAM,aAAa,QAAQ,8BAA8B;AAAA,MAC3D;AAAA,IACF;AACA,UAAM,WAAW,KAAK,KAAK,YAAY;AACvC,UAAM,WAAW,SAAS,OAAO,EAAE,SAAS,IAAI,qBAAqB;AACrE,UAAM,KAAK,eAAe,IAAI,UAAU,KAAK,UAAU;AAAA,MACrD,WAAW,UAAU,SAAS,KAAK,EAAE,SAAS,IAAI,GAAG;AAAA,IACvD,CAAC,CAAC;AAAA,EACJ;AAAA,EACA,MAAM,kBAAkB;AACtB,UAAM,WAAW,KAAK,KAAK,YAAY;AACvC,UAAM,WAAW,SAAS,OAAO,EAAE,SAAS,IAAI,qBAAqB;AACrE,UAAM,uBAAuB,MAAM,KAAK,eAAe,IAAI,QAAQ;AACnE,UAAM,iBAAiB,KAAK,MAAM,wBAAwB,IAAI;AAC9D,WAAO,eAAe;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,uBAAuB;AAC3B,QAAI,KAAK,YAAY,QAAQ,WAAW;AACtC,YAAM,aAAa,QAAQ,kEAAkE;AAAA,IAC/F;AACA,QAAI,CAAC,KAAK,MAAM,WAAW;AACzB,YAAM,aAAa,oBAAoB,wDAAwD;AAAA,IACjG;AACA,QAAI,CAAC,KAAK,MAAM,YAAY;AAC1B,YAAM,aAAa,qBAAqB,yDAAyD;AAAA,IACnG;AACA,UAAM,gBAAgB,MAAM,KAAK,KAAK,qBAAqB;AAAA,MACzD,WAAW,KAAK,MAAM;AAAA,MACtB,gBAAgB,KAAK,MAAM;AAAA,IAC7B,CAAC;AACD,UAAM,eAAe,KAAK,gBAAgB;AAC1C,UAAM,SAAS,cAAc,IAAI,YAAY,EAAE,KAAK,KAAK,KAAK,SAAS,CAAC;AACxE,WAAO,OAAO,SAAS,OAAO,qBAAqB;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,+BAA+B;AACnC,QAAI,KAAK,YAAY,QAAQ,SAAS;AACpC,YAAM,aAAa,QAAQ,gEAAgE;AAAA,IAC7F;AACA,QAAI,CAAC,KAAK,MAAM,UAAW,OAAM,aAAa,oBAAoB,iEAAiE;AACnI,QAAI,CAAC,KAAK,MAAM,WAAY,OAAM,aAAa,qBAAqB,kEAAkE;AACtI,QAAI;AACF,YAAM,oBAAoB,MAAM,KAAK,KAAK,6BAA6B;AAAA,QACrE,WAAW,KAAK,MAAM;AAAA,QACtB,gBAAgB,KAAK,MAAM;AAAA,MAC7B,CAAC;AACD,aAAO;AAAA,IACT,SAAS,OAAO;AACd,YAAM,aAAa,QAAQ,iCAAiC,KAAK,EAAE;AAAA,IACrE;AAAA,EACF;AAAA,EACA,YAAY,UAAU;AACpB,SAAK,QAAQ,eAAc,eAAc,CAAC,GAAG,KAAK,KAAK,GAAG,QAAQ;AAAA,EACpE;AAAA,EACA,MAAM,WAAW,GAAG;AAClB,SAAK,0BAA0B;AAC/B,SAAK,KAAK,aAAa;AACvB,QAAI;AACF,YAAM,IAAI,MAAM,EAAE;AAClB,UAAI,KAAK,2BAA2B,GAAG;AACrC,YAAI,CAAC,KAAK,QAAQ,YAAY;AAC5B,gBAAM,KAAK,cAAc;AAAA,QAC3B;AAAA,MACF;AACA,aAAO;AAAA,IACT,SAAS,OAAO;AACd,YAAM;AAAA,IACR,UAAE;AACA,WAAK,0BAA0B;AAC/B,UAAI,KAAK,2BAA2B,GAAG;AACrC,aAAK,KAAK,aAAa,KAAK,QAAQ;AAAA,MACtC;AAAA,IACF;AAAA,EACF;AAAA,EACA,MAAM,aAAa,QAAQ,WAAW,cAAc,aAAa,QAAQ;AACvE,QAAI,CAAC,KAAK,MAAM,YAAY;AAC1B,YAAM,aAAa,qBAAqB,yDAAyD;AAAA,IACnG;AACA,UAAM,KAAK,KAAK,aAAa;AAAA,MAC3B,KAAK,KAAK,KAAK;AAAA,MACf,WAAW,OAAO,KAAK,QAAQ,KAAK;AAAA,MACpC;AAAA,MACA;AAAA,IACF,GAAG;AAAA,MACD,gBAAgB,KAAK,MAAM;AAAA,IAC7B,CAAC;AAAA,EACH;AAAA,EACA,cAAc;AACZ,QAAI,CAAC,KAAK,KAAK,SAAS,aAAa,KAAK,KAAK,SAAS,UAAU,KAAK,KAAK,MAAM,MAAM,QAAW;AACjG,YAAM,aAAa,iBAAiB,gCAAgC,KAAK,KAAK,MAAM,EAAE;AAAA,IACxF;AACA,UAAM,WAAW,KAAK,KAAK,SAAS,UAAU,KAAK,KAAK,MAAM;AAC9D,WAAO;AAAA,EACT;AAAA,EACA,MAAM,UAAU,mBAAmB,kBAAkB,iBAAiB;AACpE,QAAI,mBAAmB,CAAC,kBAAkB;AACxC,YAAM,aAAa,QAAQ,kDAAkD;AAAA,IAC/E;AACA,QAAI,CAAC,KAAK,MAAM,YAAY;AAC1B,YAAM,aAAa,gBAAgB;AAAA,IACrC;AACA,UAAM,eAAe,MAAM,KAAK,kBAAkB,KAAK,MAAM,UAAU;AACvE,QAAI,YAAY;AAChB,QAAI,CAAC,cAAc;AACjB,UAAI,CAAC,aAAa,KAAK,0BAA0B;AAC/C,YAAI,KAAK,YAAY,QAAQ,SAAS;AACpC,gBAAM,IAAI,oBAAoB;AAC9B,sBAAY,EAAE,SAAS,KAAK;AAAA,QAC9B,WAAW,KAAK,YAAY,QAAQ,WAAW;AAC7C,gBAAM,IAAI,UAAU,WAAW,EAAE,WAAW;AAC5C,sBAAY,qBAAqB,CAAC,EAAE,SAAS,KAAK;AAAA,QACpD,OAAO;AACL,gBAAM,aAAa,QAAQ,sBAAsB;AAAA,QACnD;AAAA,MACF;AACA,UAAI,mBAAmB,oBAAoB,iBAAiB,SAAS,UAAU;AAC7E,cAAM,aAAa,QAAQ,gEAAgE;AAAA,MAC7F;AACA,YAAM,KAAK,cAAc,WAAW,eAAe;AAAA,IACrD,OAAO;AACL,UAAI,WAAW;AACb,cAAM,aAAa,uBAAuB;AAAA,MAC5C;AACA,YAAM,KAAK,mBAAmB;AAAA,IAChC;AAAA,EACF;AAAA;AAAA,EAGA,MAAM,cAAc,cAAc,UAAU;AAC1C,UAAM,KAAK,WAAW,YAAY;AAEhC,UAAI;AACJ,UAAI,KAAK,QAAQ,wBAAwB;AACvC,oBAAY,kBAAkB,EAAE;AAEhC,cAAM,kBAAkB,oBAAoB,KAAK,MAAM,YAAY,KAAK,QAAQ,iBAAiB;AACjG,cAAM,KAAK,0BAA0B,eAAe;AAAA,MACtD,OAAO;AACL,oBAAY,oBAAoB,KAAK,MAAM,YAAY,KAAK,QAAQ,iBAAiB;AAAA,MACvF;AACA,YAAM,iBAAiB,aAAa;AACpC,YAAM,YAAYA,gBAAe,WAAW,cAAc;AAC1D,UAAI,CAAC,cAAc;AACjB,cAAMC,QAAO,IAAI,oBAAG,KAAK,OAAO;AAChC,cAAM,iBAAiBA,MAAK,WAAW,EAAE,WAAW;AACpD,cAAM,KAAK,KAAK,WAAW;AAAA,UACzB;AAAA,UACA;AAAA,UACA;AAAA,QACF,CAAC;AAAA,MACH,OAAO;AACL,cAAM,KAAK,KAAK,WAAW;AAAA,UACzB,aAAa;AAAA,QACf,CAAC;AACD,cAAM,KAAK,KAAK,eAAe;AAC/B,cAAM,KAAK,aAAa,cAAc,WAAW,cAAc;AAAA,MACjE;AAGA,YAAM,KAAK,KAAK,eAAe;AAC/B,YAAM,KAAK,aAAa,SAAS;AAGjC,YAAM,KAAK,oBAAoB,SAAS;AACxC,UAAI,KAAK,QAAQ,wBAAwB;AACvC,cAAM,KAAK,qBAAqB;AAAA,UAC9B;AAAA,UACA,kBAAkB,8BAA8B;AAAA,UAChD,gBAAgB;AAAA,QAClB,CAAC;AAAA,MACH,OAAO;AACL,cAAM,KAAK,qBAAqB;AAAA,UAC9B;AAAA,UACA,kBAAkB,8BAA8B;AAAA,UAChD,gBAAgB;AAAA,QAClB,CAAC;AAAA,MACH;AACA,UAAI,gBAAgB,UAAU;AAC5B,cAAM,KAAK,KAAK,4BAA4B;AAAA,UAC1C,OAAO,CAAC;AAAA,YACN,SAAS;AAAA,UACX,CAAC;AAAA,UACD,SAAS,CAAC,IAAI,WAAAJ,QAAG,KAAK,MAAM,YAAY,KAAK,CAAC;AAAA,QAChD,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,MAAM,qBAAqB;AACzB,UAAM,KAAK,KAAK,WAAW;AAAA,MACzB,uBAAuB;AAAA,IACzB,CAAC;AACD,QAAI,KAAK,QAAQ,wBAAwB;AACvC;AAAA,IACF;AACA,UAAM,kBAAkB,oBAAoB,KAAK,MAAM,YAAY,KAAK,QAAQ,iBAAiB;AACjG,SAAK,MAAM,YAAY;AACvB,QAAI,MAAM,KAAK,sBAAsB,eAAe,GAAG;AAErD,YAAM,oBAAoB,MAAM,KAAK,qBAAqB,eAAe;AACzE,UAAI;AACF,cAAM,KAAK,KAAK,oBAAoB,mBAAmB,IAAI;AAC3D,cAAM,KAAK,KAAK,eAAe;AAC/B,cAAM,KAAK,aAAa,eAAe;AAAA,MACzC,SAAS,KAAK;AACZ,YAAI,MAAM,6CAA6C,GAAG;AAAA,MAC5D;AAAA,IACF,OAAO;AACL,UAAI;AACJ,YAAM,oBAAoB,QAAQ,cAAc,KAAK,UAAU,QAAQ,gBAAgB,SAAS,SAAS,YAAY,aAAa,eAAe;AACjJ,UAAI,kBAAkB,YAAY,iBAAiB;AAEjD,YAAI,KAAK,uBAAuB;AAAA,MAClC;AAAA,IACF;AAAA,EACF;AAAA,EACA,MAAM,aAAa,WAAW;AAC5B,QAAI,KAAK,MAAM,iBAAiB,GAAG;AACjC,UAAI,KAAK,0BAA0B;AACnC,WAAK,MAAM,eAAe;AAAA,IAC5B;AAEA,UAAM;AAAA,MACJ,UAAU;AAAA,IACZ,IAAI,MAAM,KAAK,KAAK,YAAY,SAAS;AACzC,UAAM,YAAY,KAAK,KAAK,UAAU,EAAE,OAAO,KAAK,KAAK,UAAU,KAAK;AACxE,SAAK,YAAY;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AACD,UAAM,KAAK,cAAc;AAAA,EAC3B;AAAA,EACA,aAAa;AACX,QAAI,CAAC,KAAK,OAAO;AACf,YAAM,aAAa,yBAAyB;AAAA,IAC9C;AAAA,EACF;AAAA,EACA,MAAM,iBAAiB,QAAQ;AAC7B,QAAI;AACF,WAAK,WAAW;AAChB,YAAM,YAAY,IAAI,WAAAA,QAAG,OAAO,WAAW,KAAK;AAChD,UAAI,CAAC,WAAW;AACd,cAAM,aAAa,yBAAyB;AAAA,MAC9C;AACA,YAAM,aAAa,OAAO,cAAc,OAAO;AAC/C,UAAI,CAAC,YAAY;AACf,cAAM,aAAa,QAAQ,oDAAoD;AAAA,MACjF;AACA,WAAK,QAAQ,aAAa,IAAI,WAAAA,QAAG,YAAY,KAAK;AAClD,WAAK,QAAQ,eAAe,OAAO,SAAS,qBAAqB,OAAO,SAAS;AACjF,WAAK,QAAQ,aAAa,OAAO,SAAS;AAC1C,YAAM,oBAAoB,MAAM,KAAK,qBAAqB,SAAS;AACnE,YAAM,KAAK,KAAK,WAAW;AAAA,QACzB,uBAAuB;AAAA,MACzB,CAAC;AACD,YAAM,KAAK,KAAK,oBAAoB,mBAAmB,IAAI;AAC3D,YAAM,KAAK,KAAK,eAAe;AAC/B,WAAK,YAAY;AAAA,QACf,WAAW,IAAI,WAAAA,QAAG,OAAO,WAAW,KAAK;AAAA,QACzC;AAAA,QACA,uBAAuB,OAAO,yBAAyB,CAAC;AAAA,QACxD,eAAe,OAAO;AAAA,QACtB,WAAW,KAAK,KAAK,UAAU,EAAE,OAAO,KAAK,KAAK,UAAU,KAAK;AAAA,QACjE,YAAY,OAAO;AAAA,QACnB,UAAU,OAAO;AAAA,MACnB,CAAC;AAAA,IACH,SAAS,KAAK;AACZ,UAAI,KAAK,+BAA+B,GAAG;AAAA,IAC7C;AAAA,EACF;AAAA,EACA,MAAM,gBAAgB;AACpB,QAAI,CAAC,KAAK,QAAQ,yBAAyB,CAAC,KAAK,gBAAgB;AAC/D,YAAM,IAAI,MAAM,iCAAiC;AAAA,IACnD;AACA,QAAI,KAAK,QAAQ,uBAAuB;AACtC;AAAA,IACF;AACA,QAAI;AACF,YAAM,YAAY,eAAe,yBAAyB;AAC1D,WAAK,eAAe,YAAY;AAChC,YAAM;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF,IAAI,KAAK;AACT,UAAI,CAAC,KAAK,MAAM,WAAW;AACzB,cAAM,aAAa,oBAAoB,uDAAuD;AAAA,MAChG;AACA,YAAM;AAAA,QACJ;AAAA,MACF,IAAI,MAAM,KAAK,KAAK,YAAY,KAAK,MAAM,WAAW;AAAA,QACpD,cAAc,KAAK,MAAM;AAAA,MAC3B,CAAC;AACD,UAAI,CAAC,cAAc,CAAC,aAAa,CAAC,YAAY,CAAC,aAAa,CAAC,UAAU;AACrE,cAAM,aAAa,gBAAgB;AAAA,MACrC;AACA,YAAM,UAAU;AAAA,QACd;AAAA,QACA,uBAAuB,yBAAyB,CAAC;AAAA,QACjD,WAAW,cAAc,QAAQ,cAAc,SAAS,SAAS,UAAU,SAAS,KAAK;AAAA,QACzF;AAAA,QACA,WAAW,OAAO,KAAK,SAAS,EAAE,SAAS,KAAK;AAAA,QAChD,YAAY,KAAK;AAAA,QACjB;AAAA,MACF;AACA,YAAM,KAAK,eAAe,cAAc,OAAO;AAE/C,YAAM,KAAK,eAAe,IAAI,aAAa,SAAS;AAAA,IACtD,SAAS,KAAK;AACZ,UAAI,MAAM,0BAA0B,GAAG;AAAA,IACzC;AAAA,EACF;AAAA,EACA,MAAM,kBAAkB,YAAY;AAClC,QAAI;AACJ,UAAM,eAAe,IAAI,WAAAA,QAAG,YAAY,KAAK;AAC7C,UAAM,WAAW,QAAQ,cAAc,KAAK,UAAU,QAAQ,gBAAgB,SAAS,SAAS,YAAY,aAAa,YAAY;AACrI,QAAI,YAAY,SAAS,YAAY,iBAAiB;AACpD,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA,EACA,MAAM,sBAAsB,WAAW;AACrC,QAAI;AACJ,SAAK,WAAW;AAChB,UAAM,oBAAoB,QAAQ,cAAc,KAAK,UAAU,QAAQ,gBAAgB,SAAS,SAAS,YAAY,aAAa,SAAS;AAC3I,QAAI,CAAC,qBAAqB,kBAAkB,YAAY,mBAAmB,kBAAkB,YAAY,iBAAiB;AACxH,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA,EACA,MAAM,qBAAqB,WAAW;AACpC,QAAI;AACJ,SAAK,WAAW;AAChB,UAAM,oBAAoB,QAAQ,cAAc,KAAK,UAAU,QAAQ,gBAAgB,SAAS,SAAS,YAAY,aAAa,SAAS;AAC3I,QAAI,CAAC,qBAAqB,kBAAkB,YAAY,iBAAiB;AACvE,YAAM,aAAa,gBAAgB;AAAA,IACrC;AACA,WAAO,aAAW,SAAS,iBAAiB;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,kBAAkB,mBAAmB,cAAc;AACvD,SAAK,WAAW;AAChB,QAAI,CAAC,KAAK,KAAK,SAAS,cAAc,CAAC,MAAM,QAAQ,KAAK,KAAK,SAAS,WAAW,KAAK,KAAK,MAAM,CAAC,GAAG;AACrG,YAAM,aAAa,kBAAkB,4EAA4E;AAAA,IACnH;AACA,QAAI,CAAC,KAAK,KAAK,SAAS,cAAc,OAAO,KAAK,KAAK,SAAS,WAAW,KAAK,KAAK,MAAM,MAAM,UAAU;AACzG,YAAM,aAAa,kBAAkB,4EAA4E;AAAA,IACnH;AACA,QAAI,CAAC,KAAK,MAAM,WAAW;AACzB,YAAM,aAAa,oBAAoB,kEAAkE;AAAA,IAC3G;AACA,QAAI,oBAAoB,QAAQ,iBAAiB,MAAM,IAAI;AACzD,YAAM,aAAa,qBAAqB,gCAAgC,iBAAiB,4BAA4B,mBAAmB,GAAG;AAAA,IAC7I;AACA,QAAI,KAAK,KAAK,SAAS,WAAW,KAAK,KAAK,MAAM,EAAE,UAAU,aAAa;AACzE,YAAM,aAAa,sBAAsB,4CAA4C,WAAW,qBAAqB;AAAA,IACvH;AAGA,UAAM,KAAK,KAAK,aAAa;AAAA,MAC3B,mBAAmB,KAAK,MAAM;AAAA,MAC9B,gBAAgB,KAAK;AAAA,MACrB;AAAA,MACA,aAAa;AAAA,MACb,eAAe,KAAK,MAAM,kBAAkB;AAAA;AAAA,IAC9C,CAAC;AAAA,EACH;AAAA,EACA,MAAM,mBAAmB;AACvB,QAAI;AACF,UAAI,aAAa;AACjB,YAAM,UAAU,cAAc,KAAK,UAAU,QAAQ,gBAAgB,SAAS,SAAS,YAAY,SAAS,0BAA0B,EAAE,gBAAgB;AACxJ,YAAM,UAAU,cAAc,KAAK,UAAU,QAAQ,gBAAgB,SAAS,SAAS,YAAY,OAAO,MAAM;AAChH,UAAI,QAAQ;AACZ,iBAAW,cAAc,QAAQ;AAC/B,YAAI,eAAe,kBAAkB,SAAS,GAAG;AAC/C,kBAAQ,OAAO,UAAU;AAAA,QAC3B;AAAA,MACF;AACA,UAAI,CAAC,OAAO;AACV,cAAM,aAAa,qBAAqB;AAAA,MAC1C;AACA,aAAO;AAAA,IACT,SAAS,KAAK;AACZ,UAAI,MAAM,6BAA6B,GAAG;AAC1C,YAAM,aAAa,QAAQ,IAAI,OAAO;AAAA,IACxC;AAAA,EACF;AAAA,EACA,MAAM,0BAA0B,WAAW;AACzC,QAAI,YAAY;AAChB,UAAM,KAAK,KAAK,4BAA4B;AAAA,MAC1C,OAAO,CAAC;AAAA,QACN,SAAS;AAAA,QACT,WAAW,KAAK,IAAI;AAAA,MACtB,CAAC;AAAA,MACD,SAAS,CAAC,SAAS;AAAA,IACrB,CAAC;AACD,QAAI,GAAG,aAAa,KAAK,UAAU,QAAQ,eAAe,UAAU,WAAW,YAAa,SAAQ,cAAc,KAAK,UAAU,QAAQ,gBAAgB,SAAS,SAAS,YAAY,6BAA6B;AAAA,EACtN;AAAA,EACA,MAAM,oBAAoB,WAAW;AACnC,QAAI,aAAa,aAAa;AAC9B,UAAM,gBAAgB,MAAM,KAAK,iBAAiB;AAGlD,YAAQ,cAAc,KAAK,UAAU,QAAQ,gBAAgB,SAAS,SAAS,YAAY,4BAA4B;AAAA,MACrH,OAAO,CAAC,aAAa;AAAA,MACrB,SAAS,CAAC,SAAS;AAAA,IACrB,CAAC;AACD,QAAI,GAAG,cAAc,KAAK,UAAU,QAAQ,gBAAgB,UAAU,YAAY,YAAa,SAAQ,cAAc,KAAK,UAAU,QAAQ,gBAAgB,SAAS,SAAS,YAAY,6BAA6B;AAAA,EACzN;AAAA,EACA,MAAM,qBAAqB,MAAM;AAC/B,QAAI;AACJ,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI;AACJ,QAAI;AAAA,MACF;AAAA,IACF,IAAI;AACJ,QAAI,CAAC,oBAAoB;AACvB,2BAAqB,CAAC;AAAA,IACxB;AACA,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,MAAM,KAAK,KAAK,YAAY,SAAS;AACzC,UAAM,cAAcG,gBAAe,WAAW,cAAc;AAC5D,UAAM,YAAY,YAAY,OAAO,gBAAgB,IAAI,EAAE,SAAS,KAAK;AACzE,UAAM,SAAS,eAAc,eAAc;AAAA,MACzC,QAAQ;AAAA,MACR,WAAW,KAAK,IAAI;AAAA,IACtB,GAAG,kBAAkB,GAAG,CAAC,GAAG;AAAA,MAC1B,eAAe;AAAA,IACjB,CAAC;AACD,YAAQ,cAAc,KAAK,UAAU,QAAQ,gBAAgB,SAAS,SAAS,YAAY,oBAAoB,WAAW,KAAK,UAAU,MAAM,GAAG,cAAc;AAAA,EAClK;AAAA,EACA,aAAa;AACX,SAAK,QAAQ;AACb,SAAK,OAAO;AACZ,SAAK,UAAU;AACf,SAAK,eAAe;AACpB,SAAK,QAAQ;AAAA,MACX,cAAc;AAAA,IAChB;AAAA,EACF;AAAA,EACA,eAAe,QAAQ;AACrB,WAAO,MAAM,cAAc,MAAM;AAAA,EACnC;AAAA,EACA,eAAe,aAAa;AAK1B,WAAO,YAAY,OAAO,aAAW,CAAC,CAAC,OAAO,EAAE,IAAI,aAAW,KAAK,UAAU;AAAA,MAC5E,MAAM,QAAQ;AAAA,MACd,KAAK,QAAQ;AAAA,IACf,CAAC,CAAC;AAAA,EACJ;AAAA,EACA,aAAa,QAAQ;AACnB,UAAM,OAAO;AACb,WAAO,SAAS,YAAY,SAAS;AAAA,EACvC;AAAA,EACA,MAAM,iBAAiB;AACrB,UAAM,YAAY,WAAW,KAAK,QAAQ,eAAe;AACzD,UAAM,gBAAgB;AAAA,MACpB,SAAS,KAAK,QAAQ;AAAA,MACtB,WAAW,KAAK,QAAQ;AAAA,MACxB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,cAAc,KAAK,QAAQ,YAAY,SAAS;AAAA,IAClD;AACA,UAAM,MAAM,IAAI,IAAI,GAAG,SAAS,qBAAqB;AACrD,QAAI,SAAS,IAAI,gBAAgB,aAAa,EAAE,SAAS;AACzD,UAAM,SAAS,MAAM,MAAM,GAAG;AAC9B,QAAI,OAAO,WAAW,KAAK;AAEzB,WAAK,WAAW;AAChB,YAAM,aAAa,MAAM,OAAO,KAAK;AACrC,YAAM,aAAa,QAAQ,WAAW,KAAK;AAAA,IAC7C;AACA,WAAO,OAAO,KAAK;AAAA,EACrB;AAAA,EACA,kBAAkB;AAChB,WAAO,KAAK,KAAK,oBAAoB,KAAK,MAAM,YAAY;AAAA,EAC9D;AAAA,EACA,MAAM,qBAAqB,MAAM,SAAS,OAAO,sBAAsB;AACrE,UAAM,cAAc,OAAOE,SAAQC,eAAc,YAAYC,gBAAe;AAC1E,YAAM;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,MACF,IAAI,MAAMF,QAAO,KAAK,WAAW,SAAS,QAAQ,GAAG,MAAM,IAAI,aAAa;AAAA,QAC1E,YAAAE;AAAA,MACF,CAAC;AAED,MAAAF,QAAO,QAAQ;AAAA,QACb,YAAAE;AAAA,QACA,eAAeD;AAAA,MACjB,CAAC;AACD,aAAO;AAAA,QACL,GAAG;AAAA,QACH,GAAG,qBAAqB,CAAC;AAAA,QACzB,GAAG,qBAAqB,CAAC;AAAA,MAC3B;AAAA,IACF;AACA,QAAI,CAAC,QAAQ;AACX,aAAOE,WAAU,IAAI;AAAA,IACvB;AACA,UAAM,wBAAwB,yBAAyB,QAAQ,yBAAyB,SAAS,SAAS,qBAAqB,YAAY,yBAAyB,QAAQ,yBAAyB,SAAS,SAAS,qBAAqB;AAC5O,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACF,IAAI,uBAAuB,uBAAuB,MAAM,KAAK,qBAAqB;AAClF,UAAM;AAAA,MACJ;AAAA,IACF,IAAI;AACJ,QAAI,CAAC,YAAY;AACf,YAAM,aAAa,qBAAqB;AAAA,IAC1C;AACA,QAAI;AACF,aAAO,MAAM,YAAY,QAAQ,cAAc,MAAM,UAAU;AAAA,IACjE,SAAS,OAAO;AACd,UAAI,CAAC,sBAAsB;AACzB,cAAM;AAAA,MACR;AAEA,YAAM;AAAA,QACJ,QAAQ;AAAA,QACR,cAAc;AAAA,MAChB,IAAI,MAAM,KAAK,qBAAqB;AACpC,YAAM,SAAS,MAAM,YAAY,WAAW,iBAAiB,MAAM,UAAU;AAC7E,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EACA,MAAM,aAAa,MAAM,SAAS,OAAO;AACvC,QAAI,QAAQ;AACV,YAAM,aAAa,QAAQ,uCAAuC;AAAA,IACpE;AACA,UAAM,cAAc,iBAAiB,KAAK,QAAQ,iBAAiB,SAAS;AAC5E,QAAI,CAAC,YAAY,uBAAuB;AACtC,YAAM,aAAa,QAAQ,oCAAoC;AAAA,IACjE;AAIA,UAAM,oBAAoB,YAAY,sBAAsB,IAAI,CAAC,IAAI,OAAO;AAAA,MAC1E,OAAO,YAAY,aAAa,CAAC;AAAA,MACjC,KAAK,GAAG,EAAE;AAAA,IACZ,EAAE;AAGF,UAAM,kBAAkB,KAAK,MAAM,kBAAkB,SAAS,CAAC,IAAI;AACnE,UAAM,YAAY,gBAAgB,mBAAmB,eAAe;AACpE,UAAM,gBAAgB,UAAU,IAAI,OAAK,EAAE,KAAK;AAChD,UAAM,eAAe,KAAK,IAAI,GAAG,UAAU,IAAI,QAAM,GAAG,KAAK,CAAC,IAAI;AAGlE,UAAMC,MAAK,IAAI,aAAa;AAC5B,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACF,IAAI,wBAAwBA,KAAI,eAAe,cAAc,KAAK,MAAM,aAAa;AAGrF,UAAM,YAAY,MAAM,KAAK,UAAU;AACvC,UAAM,iBAAiBA,IAAG,cAAc,SAAS,EAAE,UAAU;AAG7D,QAAI,KAAK,MAAM,iBAAiB,GAAG;AACjC,YAAM,aAAa,QAAQ,yCAAyC;AAAA,IACtE;AACA,UAAM;AAAA,MACJ;AAAA,IACF,IAAI,MAAM,KAAK,KAAK,YAAY,KAAK,MAAM,SAAS;AACpD,UAAM,sBAAsB,SAAS,IAAI,iBAAiB,EAAE,KAAKA,IAAG,CAAC;AACrE,UAAM,yBAAyBA,IAAG,eAAe,qBAAqB,MAAM,EAAE,SAAS,KAAK;AAG5F,UAAM,WAAW,KAAK,YAAY;AAClC,UAAM,eAAe,qBAAqB;AAC1C,UAAM,UAAU,aAAa,KAAK,UAAU,KAAK,YAAY,KAAK,KAAK,QAAQ,UAAU,YAAY;AAGrG,UAAM,aAAa,UAAU,IAAI,OAAK,EAAE,GAAG;AAC3C,UAAM,YAAYA,IAAG,cAAc,gBAAgB,MAAM,EAAE,SAAS,KAAK;AACzE,UAAM,wBAAwB,mBAAmB,IAAI,OAAKA,IAAG,eAAe,GAAG,MAAM,EAAE,SAAS,KAAK,CAAC;AACtG,UAAM,YAAY,MAAM,KAAK,KAAK,SAAS,SAAS,KAAK,YAAY,eAAe,YAAY,cAAc,wBAAwB,WAAW,MAAM,qBAAqB;AAC5K,QAAI,KAAK,cAAc,SAAS,EAAE;AAClC,WAAO,OAAO,KAAK,WAAW,KAAK;AAAA,EACrC;AAAA,EACA,MAAM,cAAc;AAClB,QAAI,KAAK,QAAS,QAAO,KAAK;AAC9B,QAAI,OAAO,KAAK,QAAQ,SAAS,YAAY;AAE3C,aAAO,KAAK,QAAQ,KAAK;AAAA,IAC3B,WAAW,KAAK,QAAQ,KAAK;AAC3B,aAAO,KAAK,QAAQ;AAAA,IACtB;AAAA,EACF;AACF;",
  "names": ["o", "_defineProperty", "module", "exports", "MapQueue", "deriveShareCoefficients", "fraction", "lagrangeCoefficient", "lagrangeCoefficients", "proms", "FactorKeyTypeShareDescription", "TssShareType", "english", "BN", "import_bn", "BN", "import_bn", "keccak256", "BN", "getPubKeyPoint", "COREKIT_STATUS", "import_bn", "import_json_stable_stringify", "stringify", "base64url", "BN", "Ed25519Curve", "EC", "ec", "constructor", "bufferToScalar", "b", "BN", "generateScalar", "genKeyPair", "getPrivate", "scalarToBuffer", "s", "buf", "toString", "toArrayLike", "pointToBuffer", "p", "x", "getX", "y", "getY", "length", "and", "eqn", "ec", "EC", "browserCrypto", "global", "crypto", "msCrypto", "subtle", "webkitSubtle", "EC_GROUP_ORDER", "Buffer", "from", "ZERO32", "alloc", "isScalar", "x", "Buffer", "isBuffer", "length", "isValidPrivateKey", "privateKey", "compare", "ZERO32", "EC_GROUP_ORDER", "randomBytes", "size", "arr", "Uint8Array", "browserCrypto", "getRandomValues", "Buffer", "from", "nodeCrypto", "getAes", "op", "iv", "key", "data", "subtle", "importAlgorithm", "name", "cryptoKey", "importKey", "encAlgorithm", "result", "Buffer", "from", "Uint8Array", "cipher", "nodeCrypto", "createCipheriv", "firstChunk", "update", "secondChunk", "final", "concat", "decipher", "createDecipheriv", "Error", "aesCbcEncrypt", "aesCbcDecrypt", "generatePrivate", "privateKey", "randomBytes", "isValidPrivateKey", "import_bn", "import_elliptic", "DELIMITERS", "ec", "BN", "ec", "additiveCoeff", "denormaliseCoeff", "DELIMITERS", "BN", "ec", "import_bn", "import_elliptic", "import_base64url", "TORUS_LEGACY_NETWORK", "TORUS_SAPPHIRE_NETWORK", "PROXY_CONTRACT_ADDRESS", "LEGACY_NETWORKS_ROUTE_MAP", "TORUS_LEGACY_NETWORK", "TORUS_SAPPHIRE_NETWORK", "NETWORK_MAP", "SIGNER_MAP", "METADATA_MAP", "base64url", "base64urlLib", "base64url", "TORUS_SAPPHIRE_NETWORK", "TORUS_LEGACY_NETWORK", "import_bn", "import_elliptic", "randomBytes", "crypto", "storageAvailable", "keccak256", "BN", "ec", "loglevel", "BN", "newError", "userInfo", "getPubKeyPoint", "ec$1", "client", "serverCoeffs", "signatures", "keccak256", "ec"]
}
