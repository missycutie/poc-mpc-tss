{
  "version": 3,
  "sources": ["../../@tkey/service-provider-base/dist/lib.esm/ServiceProviderBase.js", "../../@tkey/service-provider-torus/dist/lib.esm/TorusServiceProvider.js", "../../@tkey/tss/dist/lib.esm/util.js", "../../@tkey/tss/dist/lib.esm/provider.js", "../../@tkey/core/dist/lib.esm/authMetadata.js", "../../@tkey/core/dist/lib.esm/errors.js", "../../@tkey/core/dist/lib.esm/metadata.js", "../../@tkey/core/dist/lib.esm/lagrangeInterpolatePolynomial.js", "../../@tkey/core/dist/lib.esm/core.js", "../../@toruslabs/rss-client/dist/lib.esm/rss.js", "../../@toruslabs/rss-client/node_modules/@toruslabs/eccrypto/dist/lib.esm/index.js", "../../@toruslabs/rss-client/dist/lib.esm/utils.js", "../../@tkey/tss/dist/lib.esm/tss.js"],
  "sourcesContent": ["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { encrypt, decrypt, toPrivKeyECC, toPrivKeyEC, getPubKeyECC } from '@tkey/common-types';\nimport BN from 'bn.js';\n\nclass ServiceProviderBase {\n  constructor({\n    enableLogging = false,\n    postboxKey\n  }) {\n    _defineProperty(this, \"enableLogging\", void 0);\n    // For easy serialization\n    _defineProperty(this, \"postboxKey\", void 0);\n    _defineProperty(this, \"serviceProviderName\", void 0);\n    _defineProperty(this, \"migratableKey\", null);\n    this.enableLogging = enableLogging;\n    this.postboxKey = new BN(postboxKey, \"hex\");\n    this.serviceProviderName = \"ServiceProviderBase\";\n  }\n  static fromJSON(value) {\n    const {\n      enableLogging,\n      postboxKey,\n      serviceProviderName\n    } = value;\n    if (serviceProviderName !== \"ServiceProviderBase\") return undefined;\n    return new ServiceProviderBase({\n      enableLogging,\n      postboxKey\n    });\n  }\n  async encrypt(msg) {\n    const publicKey = this.retrievePubKey(\"ecc\");\n    return encrypt(publicKey, msg);\n  }\n  async decrypt(msg) {\n    return decrypt(toPrivKeyECC(this.postboxKey), msg);\n  }\n  retrievePubKeyPoint() {\n    return toPrivKeyEC(this.postboxKey).getPublic();\n  }\n  retrievePubKey(type) {\n    if (type === \"ecc\") {\n      return getPubKeyECC(this.postboxKey);\n    }\n    throw new Error(\"Unsupported pub key type\");\n  }\n  sign(msg) {\n    const tmp = new BN(msg, \"hex\");\n    const sig = toPrivKeyEC(this.postboxKey).sign(tmp.toString(\"hex\"));\n    return Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN(0).toString(16, 2), \"hex\").toString(\"base64\");\n  }\n  toJSON() {\n    return {\n      enableLogging: this.enableLogging,\n      postboxKey: this.postboxKey.toString(\"hex\"),\n      serviceProviderName: this.serviceProviderName\n    };\n  }\n}\nvar ServiceProviderBase$1 = ServiceProviderBase;\n\nexport { ServiceProviderBase$1 as default };\n", "import _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { ServiceProviderBase } from '@tkey/service-provider-base';\nimport { CustomAuth } from '@toruslabs/customauth';\nimport { Torus } from '@toruslabs/torus.js';\nimport BN from 'bn.js';\n\nclass TorusServiceProvider extends ServiceProviderBase {\n  constructor({\n    enableLogging = false,\n    postboxKey,\n    customAuthArgs\n  }) {\n    super({\n      enableLogging,\n      postboxKey\n    });\n    _defineProperty(this, \"customAuthInstance\", void 0);\n    _defineProperty(this, \"singleLoginKey\", void 0);\n    _defineProperty(this, \"torusKey\", void 0);\n    _defineProperty(this, \"migratableKey\", null);\n    // Migration of key from SFA to tKey\n    _defineProperty(this, \"customAuthArgs\", void 0);\n    this.customAuthArgs = customAuthArgs;\n    this.customAuthInstance = new CustomAuth(customAuthArgs);\n    this.serviceProviderName = \"TorusServiceProvider\";\n  }\n  static fromJSON(value) {\n    const {\n      enableLogging,\n      postboxKey,\n      customAuthArgs,\n      serviceProviderName\n    } = value;\n    if (serviceProviderName !== \"TorusServiceProvider\") return undefined;\n    return new TorusServiceProvider({\n      enableLogging,\n      postboxKey,\n      customAuthArgs\n    });\n  }\n  async init(params) {\n    return this.customAuthInstance.init(params);\n  }\n\n  /**\n   * Trigger login flow. Returns `null` in redirect mode.\n   */\n  async triggerLogin(params) {\n    const obj = await this.customAuthInstance.triggerLogin(params);\n\n    // `obj` maybe `null` in redirect mode.\n    if (obj) {\n      const localPrivKey = Torus.getPostboxKey(obj);\n      this.torusKey = obj;\n      if (!obj.metadata.upgraded) {\n        const {\n          finalKeyData,\n          oAuthKeyData\n        } = obj;\n        const privKey = finalKeyData.privKey || oAuthKeyData.privKey;\n        this.migratableKey = new BN(privKey, \"hex\");\n      }\n      this.postboxKey = new BN(localPrivKey, \"hex\");\n    }\n    return obj;\n  }\n\n  /**\n   * Trigger login flow. Returns `null` in redirect mode.\n   */\n  async triggerAggregateLogin(params) {\n    const obj = await this.customAuthInstance.triggerAggregateLogin(params);\n    if (obj) {\n      const localPrivKey = Torus.getPostboxKey(obj);\n      this.torusKey = obj;\n      if (!obj.metadata.upgraded) {\n        const {\n          finalKeyData,\n          oAuthKeyData\n        } = obj;\n        const privKey = finalKeyData.privKey || oAuthKeyData.privKey;\n        this.migratableKey = new BN(privKey, \"hex\");\n      }\n      this.postboxKey = new BN(localPrivKey, \"hex\");\n    }\n    return obj;\n  }\n  toJSON() {\n    return _objectSpread(_objectSpread({}, super.toJSON()), {}, {\n      serviceProviderName: this.serviceProviderName,\n      customAuthArgs: this.customAuthArgs\n    });\n  }\n}\nvar TorusServiceProvider$1 = TorusServiceProvider;\n\nexport { TorusServiceProvider$1 as default };\n", "import { Point } from '@tkey/common-types';\nimport BN from 'bn.js';\n\nconst kCombinations = (s, k) => {\n  let set = s;\n  if (typeof set === \"number\") {\n    set = Array.from({\n      length: set\n    }, (_, i) => i);\n  }\n  if (k > set.length || k <= 0) {\n    return [];\n  }\n  if (k === set.length) {\n    return [set];\n  }\n  if (k === 1) {\n    return set.reduce((acc, cur) => [...acc, [cur]], []);\n  }\n  const combs = [];\n  let tailCombs = [];\n  for (let i = 0; i <= set.length - k + 1; i += 1) {\n    tailCombs = kCombinations(set.slice(i + 1), k - 1);\n    for (let j = 0; j < tailCombs.length; j += 1) {\n      combs.push([set[i], ...tailCombs[j]]);\n    }\n  }\n  return combs;\n};\nfunction generateSalt(ec) {\n  return ec.genKeyPair().getPrivate().toString(\"hex\", 64);\n}\nfunction getLagrangeCoeffs(ecCurve, _allIndexes, _myIndex, _target = 0) {\n  const allIndexes = _allIndexes.map(i => new BN(i));\n  const myIndex = new BN(_myIndex);\n  const target = new BN(_target);\n  let upper = new BN(1);\n  let lower = new BN(1);\n  for (let j = 0; j < allIndexes.length; j += 1) {\n    if (myIndex.cmp(allIndexes[j]) !== 0) {\n      let tempUpper = target.sub(allIndexes[j]);\n      tempUpper = tempUpper.umod(ecCurve.curve.n);\n      upper = upper.mul(tempUpper);\n      upper = upper.umod(ecCurve.curve.n);\n      let tempLower = myIndex.sub(allIndexes[j]);\n      tempLower = tempLower.umod(ecCurve.curve.n);\n      lower = lower.mul(tempLower).umod(ecCurve.curve.n);\n    }\n  }\n  return upper.mul(lower.invm(ecCurve.curve.n)).umod(ecCurve.curve.n);\n}\nfunction lagrangeInterpolation(ecCurve, shares, nodeIndex) {\n  if (shares.length !== nodeIndex.length) {\n    return null;\n  }\n  let secret = new BN(0);\n  for (let i = 0; i < shares.length; i += 1) {\n    let upper = new BN(1);\n    let lower = new BN(1);\n    for (let j = 0; j < shares.length; j += 1) {\n      if (i !== j) {\n        upper = upper.mul(nodeIndex[j].neg());\n        upper = upper.umod(ecCurve.curve.n);\n        let temp = nodeIndex[i].sub(nodeIndex[j]);\n        temp = temp.umod(ecCurve.curve.n);\n        lower = lower.mul(temp).umod(ecCurve.curve.n);\n      }\n    }\n    let delta = upper.mul(lower.invm(ecCurve.curve.n)).umod(ecCurve.curve.n);\n    delta = delta.mul(shares[i]).umod(ecCurve.curve.n);\n    secret = secret.add(delta);\n  }\n  return secret.umod(ecCurve.curve.n);\n}\nfunction pointToHex(p) {\n  return {\n    x: p.x.toString(16, 64),\n    y: p.y.toString(16, 64)\n  };\n}\nfunction getPubKeyPoint(s, ec) {\n  const p = ec.g.mul(s);\n  return Point.fromElliptic(p);\n}\nconst DELIMITERS = {\n  Delimiter1: \"\\u001c\",\n  Delimiter2: \"\\u0015\",\n  Delimiter3: \"\\u0016\",\n  Delimiter4: \"\\u0017\"\n};\nfunction getExtendedVerifierId(verifierId, tssTag, tssNonce) {\n  return `${verifierId}${DELIMITERS.Delimiter2}${tssTag}${DELIMITERS.Delimiter3}${tssNonce}`;\n}\nfunction getEd25519SeedStoreDomainKey(tssTag) {\n  return tssTag ? `ed25519Seed/${tssTag}` : \"ed25519Seed\";\n}\n\nexport { DELIMITERS, generateSalt, getEd25519SeedStoreDomainKey, getExtendedVerifierId, getLagrangeCoeffs, getPubKeyPoint, kCombinations, lagrangeInterpolation, pointToHex };\n", "import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Point } from '@tkey/common-types';\nimport { TorusServiceProvider } from '@tkey/service-provider-torus';\nimport { getExtendedVerifierId } from './util.js';\n\nclass TSSTorusServiceProvider extends TorusServiceProvider {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"verifierName\", void 0);\n    _defineProperty(this, \"verifierId\", void 0);\n  }\n  async getRSSNodeDetails() {\n    if (!this.verifierId) throw new Error(\"no verifierId, not logged in\");\n    if (!this.verifierName) throw new Error(\"no verifierName, not logged in\");\n    const {\n      torusNodeRSSEndpoints: tssNodeEndpoints,\n      torusNodePub: torusPubKeys\n    } = await this.customAuthInstance.nodeDetailManager.getNodeDetails({\n      verifier: this.verifierName,\n      verifierId: this.verifierId\n    });\n    return {\n      serverEndpoints: tssNodeEndpoints,\n      serverPubKeys: torusPubKeys.map(key => {\n        return {\n          x: key.X,\n          y: key.Y\n        };\n      }),\n      serverThreshold: Math.ceil(tssNodeEndpoints.length / 2)\n    };\n  }\n  async getTSSPubKey(tssTag, tssNonce) {\n    if (!this.verifierName || !this.verifierId) throw new Error(\"verifier userinfo not found, not logged in yet\");\n    const nodeDetails = await this.customAuthInstance.nodeDetailManager.getNodeDetails({\n      verifier: this.verifierName,\n      verifierId: this.verifierId\n    });\n    const tssServerPub = await this.customAuthInstance.torus.getPublicAddress(nodeDetails.torusNodeSSSEndpoints, nodeDetails.torusNodePub, {\n      verifier: this.verifierName,\n      verifierId: this.verifierId,\n      extendedVerifierId: getExtendedVerifierId(this.verifierId, tssTag, tssNonce)\n    });\n    return {\n      pubKey: new Point(tssServerPub.finalKeyData.X, tssServerPub.finalKeyData.Y),\n      nodeIndexes: tssServerPub.nodesData.nodeIndexes || []\n    };\n  }\n  getVerifierNameVerifierId() {\n    return `${this.verifierName}\\u001c${this.verifierId}`;\n  }\n  async triggerLogin(params) {\n    const obj = await super.triggerLogin(params);\n    if (obj) {\n      const {\n        verifier,\n        verifierId\n      } = obj.userInfo;\n      this.verifierName = verifier;\n      this.verifierId = verifierId;\n    }\n    return obj;\n  }\n  async triggerAggregateLogin(params) {\n    const obj = await super.triggerAggregateLogin(params);\n    if (obj) {\n      const {\n        verifier,\n        verifierId\n      } = obj.userInfo[0];\n      this.verifierName = verifier;\n      this.verifierId = verifierId;\n    }\n    return obj;\n  }\n}\n\nexport { TSSTorusServiceProvider };\n", "import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { secp256k1, stripHexPrefix, toPrivKeyEC } from '@tkey/common-types';\nimport { keccak256 } from '@toruslabs/torus.js';\nimport stringify from 'json-stable-stringify';\nimport CoreError from './errors.js';\nimport Metadata from './metadata.js';\n\nclass AuthMetadata {\n  constructor(metadata, privKey) {\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"privKey\", void 0);\n    this.metadata = metadata;\n    this.privKey = privKey;\n  }\n  static fromJSON(value) {\n    const {\n      data,\n      sig\n    } = value;\n    if (!data) throw CoreError.metadataUndefined();\n    const m = Metadata.fromJSON(data);\n    if (!m.pubKey) throw CoreError.metadataPubKeyUnavailable();\n    const keyPair = secp256k1.keyFromPublic(m.pubKey.toSEC1(secp256k1));\n    if (!keyPair.verify(stripHexPrefix(keccak256(Buffer.from(stringify(data), \"utf8\"))), sig)) {\n      throw CoreError.default(\"Signature not valid for returning metadata\");\n    }\n    return new AuthMetadata(m);\n  }\n  toJSON() {\n    const data = this.metadata;\n    if (!this.privKey) throw CoreError.privKeyUnavailable();\n    const k = toPrivKeyEC(this.privKey);\n    const sig = k.sign(stripHexPrefix(keccak256(Buffer.from(stringify(data), \"utf8\"))));\n    return {\n      data,\n      sig: sig.toDER(\"hex\")\n    };\n  }\n}\nvar AuthMetadata$1 = AuthMetadata;\n\nexport { AuthMetadata$1 as default };\n", "import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { TkeyError } from '@tkey/common-types';\n\n/**\n * CoreError, extension for Error using CustomError\n * details: github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n *\n * Usage:\n * 1. throw CoreError.metadataUndefined() // regularly used errors\n * 2. throw CoreError.fromCode(1304); // throw via code\n * 3. throw new CoreError(1000, \"share indexes should be unique\"); // for scarce errors\n *\n * Guide:\n * 1000 - core\n * 2000 - security questions\n * 3000 - webstorage\n * 4000 - common types (code reserved for future implementation)\n * 5000 - private key\n * 6000 - seed phrase\n * 7000 - share serialization\n * 8000 - share transfer\n */\nclass CoreError extends TkeyError {\n  constructor(code, message) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", {\n      value: \"CoreError\"\n    });\n  }\n  static fromCode(code, extraMessage = \"\") {\n    return new CoreError(code, `${CoreError.messages[code]} ${extraMessage}`);\n  }\n  static default(extraMessage = \"\") {\n    return new CoreError(1000, `${CoreError.messages[1000]} ${extraMessage}`);\n  }\n\n  // Custom methods\n  // Metadata\n  static metadataUndefined(extraMessage = \"\") {\n    return CoreError.fromCode(1101, extraMessage);\n  }\n  static delete1OutOf1OnlyManualSync(extraMessage = \"\") {\n    return CoreError.fromCode(1601, extraMessage);\n  }\n  static metadataGetFailed(extraMessage = \"\") {\n    return CoreError.fromCode(1102, extraMessage);\n  }\n  static metadataPostFailed(extraMessage = \"\") {\n    return CoreError.fromCode(1103, extraMessage);\n  }\n\n  // TkeyData\n  static tkeyStoreInvalid(extraMessage = \"\") {\n    return CoreError.fromCode(1201, extraMessage);\n  }\n  static tkeyEncryptionFailed(extraMessage = \"\") {\n    return CoreError.fromCode(1202, extraMessage);\n  }\n  static tkeyDecryptionFailed(extraMessage = \"\") {\n    return CoreError.fromCode(1203, extraMessage);\n  }\n\n  // Shares\n  static privateKeyUnavailable(extraMessage = \"\") {\n    return CoreError.fromCode(1301, extraMessage);\n  }\n  static unableToReconstruct(extraMessage = \"\") {\n    return CoreError.fromCode(1302, extraMessage);\n  }\n  static incorrectReconstruction(extraMessage = \"\") {\n    return CoreError.fromCode(1303, extraMessage);\n  }\n  static encryptedShareStoreUnavailable(extraMessage = \"\") {\n    return CoreError.fromCode(1306, extraMessage);\n  }\n\n  // Metadata locks\n  static acquireLockFailed(extraMessage = \"\") {\n    return CoreError.fromCode(1401, extraMessage);\n  }\n  static releaseLockFailed(extraMessage = \"\") {\n    return CoreError.fromCode(1402, extraMessage);\n  }\n\n  // Authmetadata\n  static privKeyUnavailable(extraMessage = \"\") {\n    return CoreError.fromCode(1501, extraMessage);\n  }\n  static metadataPubKeyUnavailable(extraMessage = \"\") {\n    return CoreError.fromCode(1502, extraMessage);\n  }\n  static authMetadataGetUnavailable(extraMessage = \"\") {\n    return CoreError.fromCode(1503, extraMessage);\n  }\n  static authMetadataSetUnavailable(extraMessage = \"\") {\n    return CoreError.fromCode(1504, extraMessage);\n  }\n}\n_defineProperty(CoreError, \"messages\", {\n  1000: \"Custom\",\n  // Misc\n  1001: \"Unable to delete service provider share\",\n  1002: \"Wrong share index\",\n  1003: \"Unable to updateSDK\",\n  // metadata\n  1101: \"metadata not found, SDK likely not initialized\",\n  1102: \"getMetadata errored\",\n  1103: \"setMetadata errored\",\n  1104: \"previouslyFetchedCloudMetadata provided in initialization is outdated\",\n  1105: \"previouslyFetchedCloudMetadata.nonce should never be higher than the latestShareDetails, please contact support\",\n  // tkeystore\n  1201: \"Invalid tkeyStore\",\n  1202: \"Encryption failed\",\n  1203: \"Decryption failed\",\n  // shares\n  1301: \"Private key not available. Please reconstruct key first\",\n  1302: \"Unable to reconstruct\",\n  1303: \"reconstructed key is not pub key\",\n  1304: \"Share found in unexpected polynomial\",\n  1305: \"Input is not supported\",\n  1306: \"no encrypted share store for share exists\",\n  1307: \"Share doesn't exist\",\n  1308: \"Share was deleted\",\n  // lock\n  1401: \"Unable to acquire lock\",\n  1402: \"Unable to release lock\",\n  // auth metadata\n  1501: \"privkey unavailable\",\n  1502: \"metadata pubkey unavailable\",\n  1503: \"getAuthMetadata errored\",\n  1504: \"setAuthMetadata errored\",\n  1601: \"delete1OutOf1 requires manualSync=true\"\n});\nvar CoreError$1 = CoreError;\n\nexport { CoreError$1 as default };\n", "import _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Point, secp256k1, PublicPolynomial, decrypt, toPrivKeyECC, ShareStore, getPubKeyPoint, PublicShare, Share } from '@tkey/common-types';\nimport BN from 'bn.js';\nimport stringify from 'json-stable-stringify';\nimport CoreError from './errors.js';\nimport { polyCommitmentEval } from './lagrangeInterpolatePolynomial.js';\n\nclass Metadata {\n  constructor(input) {\n    _defineProperty(this, \"pubKey\", void 0);\n    _defineProperty(this, \"publicPolynomials\", void 0);\n    _defineProperty(this, \"publicShares\", void 0);\n    // Tuple of PolyID and array of ShareIndexes\n    _defineProperty(this, \"polyIDList\", void 0);\n    _defineProperty(this, \"generalStore\", void 0);\n    _defineProperty(this, \"tkeyStore\", void 0);\n    _defineProperty(this, \"scopedStore\", void 0);\n    _defineProperty(this, \"nonce\", void 0);\n    _defineProperty(this, \"tssKeyTypes\", void 0);\n    _defineProperty(this, \"tssNonces\", void 0);\n    _defineProperty(this, \"tssPolyCommits\", void 0);\n    _defineProperty(this, \"factorPubs\", void 0);\n    _defineProperty(this, \"factorEncs\", void 0);\n    this.publicPolynomials = {};\n    this.publicShares = {};\n    this.generalStore = {};\n    this.tkeyStore = {};\n    this.scopedStore = {};\n    this.pubKey = input;\n    this.polyIDList = [];\n    this.nonce = 0;\n    this.tssKeyTypes = {};\n    this.tssPolyCommits = {};\n    this.tssNonces = {};\n    this.factorPubs = {};\n    this.factorEncs = {};\n  }\n  static fromJSON(value) {\n    const {\n      pubKey,\n      polyIDList,\n      generalStore,\n      tkeyStore,\n      scopedStore,\n      nonce,\n      tssKeyTypes,\n      tssPolyCommits,\n      tssNonces,\n      factorPubs,\n      factorEncs\n    } = value;\n    const point = Point.fromSEC1(secp256k1, pubKey);\n    const metadata = new Metadata(point);\n    const unserializedPolyIDList = [];\n    if (generalStore) metadata.generalStore = generalStore;\n    if (tkeyStore) metadata.tkeyStore = tkeyStore;\n    if (scopedStore) metadata.scopedStore = scopedStore;\n    if (nonce) metadata.nonce = nonce;\n    if (tssKeyTypes) {\n      metadata.tssKeyTypes = {};\n      for (const key in tssKeyTypes) {\n        metadata.tssKeyTypes[key] = tssKeyTypes[key];\n      }\n    }\n    if (tssPolyCommits) {\n      metadata.tssPolyCommits = {};\n      for (const key in tssPolyCommits) {\n        metadata.tssPolyCommits[key] = tssPolyCommits[key].map(obj => new Point(obj.x, obj.y));\n      }\n    }\n    if (tssNonces) {\n      metadata.tssNonces = {};\n      for (const key in tssNonces) {\n        metadata.tssNonces[key] = tssNonces[key];\n      }\n    }\n    if (factorPubs) {\n      metadata.factorPubs = {};\n      for (const key in factorPubs) {\n        metadata.factorPubs[key] = factorPubs[key].map(obj => new Point(obj.x, obj.y));\n      }\n    }\n    if (factorEncs) metadata.factorEncs = factorEncs;\n    for (let i = 0; i < polyIDList.length; i += 1) {\n      const serializedPolyID = polyIDList[i];\n      const arrPolyID = serializedPolyID.split(\"|\");\n      const zeroIndex = arrPolyID.findIndex(v => v === \"0x0\");\n      const firstHalf = arrPolyID.slice(0, zeroIndex);\n      const secondHalf = arrPolyID.slice(zeroIndex + 1, arrPolyID.length);\n      // for publicPolynomials\n      const pubPolyID = firstHalf.join(\"|\");\n      const pointCommitments = [];\n      firstHalf.forEach(compressedCommitment => {\n        pointCommitments.push(Point.fromCompressedPub(compressedCommitment));\n      });\n      const publicPolynomial = new PublicPolynomial(pointCommitments);\n      metadata.publicPolynomials[pubPolyID] = publicPolynomial;\n\n      // for polyIDList\n      unserializedPolyIDList.push([pubPolyID, secondHalf]);\n    }\n    metadata.polyIDList = unserializedPolyIDList;\n    return metadata;\n  }\n  getShareIndexesForPolynomial(polyID) {\n    const matchingPolyIDs = this.polyIDList.filter(tuple => tuple[0] === polyID);\n    if (matchingPolyIDs.length < 1) {\n      throw CoreError.default(\"there is no matching polyID\");\n    } else if (matchingPolyIDs.length > 1) {\n      throw CoreError.default(\"there is more than one matching polyID\");\n    }\n    return matchingPolyIDs[0][1];\n  }\n  getLatestPublicPolynomial() {\n    return this.publicPolynomials[this.polyIDList[this.polyIDList.length - 1][0]];\n  }\n  addPublicShare(polynomialID, publicShare) {\n    if (!(polynomialID in this.publicShares)) {\n      this.publicShares[polynomialID] = {};\n    }\n    this.publicShares[polynomialID][publicShare.shareIndex.toString(\"hex\")] = publicShare;\n  }\n  setGeneralStoreDomain(key, obj) {\n    this.generalStore[key] = obj;\n  }\n  getGeneralStoreDomain(key) {\n    return this.generalStore[key];\n  }\n  deleteGeneralStoreDomain(key) {\n    delete this.generalStore[key];\n  }\n  setTkeyStoreDomain(key, arr) {\n    this.tkeyStore[key] = arr;\n  }\n  getTkeyStoreDomain(key) {\n    return this.tkeyStore[key];\n  }\n\n  // appends shares and public polynomial to metadata.\n  // should represent a generation of share or edit of threshold\n  addFromPolynomialAndShares(polynomial, shares) {\n    const publicPolynomial = polynomial.getPublicPolynomial();\n    const polyID = publicPolynomial.getPolynomialID();\n    this.publicPolynomials[polyID] = publicPolynomial;\n    const shareIndexArr = [];\n    if (Array.isArray(shares)) {\n      for (let i = 0; i < shares.length; i += 1) {\n        this.addPublicShare(publicPolynomial.getPolynomialID(), shares[i].getPublicShare());\n        shareIndexArr.push(shares[i].shareIndex.toString(\"hex\"));\n      }\n    } else {\n      for (const k in shares) {\n        if (Object.prototype.hasOwnProperty.call(shares, k)) {\n          this.addPublicShare(publicPolynomial.getPolynomialID(), shares[k].getPublicShare());\n          shareIndexArr.push(shares[k].shareIndex.toString(\"hex\"));\n        }\n      }\n    }\n    this.polyIDList.push([polyID, shareIndexArr]);\n  }\n  setScopedStore(domain, data) {\n    this.scopedStore[domain] = data;\n  }\n  async getEncryptedShare(shareStore) {\n    const pubShare = shareStore.share.getPublicShare();\n    const encryptedShareStore = this.scopedStore.encryptedShares;\n    if (!encryptedShareStore) {\n      throw CoreError.encryptedShareStoreUnavailable(`${shareStore}`);\n    }\n    const encryptedShare = encryptedShareStore[pubShare.shareCommitment.x.toString(\"hex\")];\n    if (!encryptedShare) {\n      throw CoreError.encryptedShareStoreUnavailable(`${shareStore}`);\n    }\n    const rawDecrypted = await decrypt(toPrivKeyECC(shareStore.share.share), encryptedShare);\n    return ShareStore.fromJSON(JSON.parse(rawDecrypted.toString()));\n  }\n  getShareDescription() {\n    return this.getGeneralStoreDomain(\"shareDescriptions\");\n  }\n  addShareDescription(shareIndex, description) {\n    const currentSD = this.getGeneralStoreDomain(\"shareDescriptions\") || {};\n    if (currentSD[shareIndex]) {\n      currentSD[shareIndex].push(description);\n    } else {\n      currentSD[shareIndex] = [description];\n    }\n    this.setGeneralStoreDomain(\"shareDescriptions\", currentSD);\n  }\n  deleteShareDescription(shareIndex, description) {\n    const currentSD = this.getGeneralStoreDomain(\"shareDescriptions\");\n    const index = currentSD[shareIndex].indexOf(description);\n    if (index > -1) {\n      currentSD[shareIndex].splice(index, 1);\n    } else {\n      throw CoreError.default(`No share description found for the given shareIndex: ${shareIndex} \n        and description: ${description}`);\n    }\n  }\n  updateShareDescription(shareIndex, oldDescription, newDescription) {\n    const currentSD = this.getGeneralStoreDomain(\"shareDescriptions\");\n    const index = currentSD[shareIndex].indexOf(oldDescription);\n    if (index > -1) {\n      currentSD[shareIndex][index] = newDescription;\n    } else {\n      throw CoreError.default(`No share description found for the given shareIndex:\n        ${shareIndex} and description: ${oldDescription}`);\n    }\n  }\n  shareToShareStore(share) {\n    const pubkey = getPubKeyPoint(share);\n    for (let i = this.polyIDList.length - 1; i >= 0; i -= 1) {\n      const el = this.polyIDList[i][0];\n      for (let t = 0; t < this.polyIDList[i][1].length; t += 1) {\n        const shareIndex = this.polyIDList[i][1][t];\n        // find pubshare in cache if its there\n        let pubShare;\n        if (this.publicShares[el]) {\n          if (this.publicShares[el][shareIndex]) {\n            pubShare = this.publicShares[el][shareIndex];\n          }\n        }\n\n        // if not reconstruct\n        if (!pubShare) {\n          pubShare = new PublicShare(shareIndex, polyCommitmentEval(this.publicPolynomials[el].polynomialCommitments, new BN(shareIndex, \"hex\")));\n        }\n        if (pubShare.shareCommitment.x.eq(pubkey.x) && pubShare.shareCommitment.y.eq(pubkey.y)) {\n          const tempShare = new Share(pubShare.shareIndex, share);\n          return new ShareStore(tempShare, el);\n        }\n      }\n    }\n    {\n      throw CoreError.fromCode(1307);\n    }\n  }\n  clone() {\n    return Metadata.fromJSON(JSON.parse(stringify(this)));\n  }\n  toJSON() {\n    // squash data to serialized polyID according to spec\n    const serializedPolyIDList = [];\n    for (let i = 0; i < this.polyIDList.length; i += 1) {\n      const polyID = this.polyIDList[i][0];\n      const shareIndexes = this.polyIDList[i][1];\n      const sortedShareIndexes = shareIndexes.sort((a, b) => new BN(a, \"hex\").cmp(new BN(b, \"hex\")));\n      const serializedPolyID = polyID.split(`|`).concat(\"0x0\").concat(...sortedShareIndexes).join(\"|\");\n      serializedPolyIDList.push(serializedPolyID);\n    }\n    return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n      pubKey: this.pubKey.toSEC1(secp256k1, true).toString(\"hex\"),\n      polyIDList: serializedPolyIDList,\n      scopedStore: this.scopedStore,\n      generalStore: this.generalStore,\n      tkeyStore: this.tkeyStore,\n      nonce: this.nonce\n    }, this.tssKeyTypes && {\n      tssKeyTypes: this.tssKeyTypes\n    }), this.tssNonces && {\n      tssNonces: this.tssNonces\n    }), this.tssPolyCommits && {\n      tssPolyCommits: this.tssPolyCommits\n    }), this.factorPubs && {\n      factorPubs: this.factorPubs\n    }), this.factorEncs && {\n      factorEncs: this.factorEncs\n    });\n  }\n\n  /**\n   * Updates the TSS metadata for the given tag.\n   */\n  updateTSSData(tssData) {\n    const {\n      tssKeyType,\n      tssTag,\n      tssNonce,\n      tssPolyCommits,\n      factorPubs,\n      factorEncs\n    } = tssData;\n    if (tssKeyType) this.tssKeyTypes[tssTag] = tssKeyType;\n    if (tssNonce !== undefined) this.tssNonces[tssTag] = tssNonce;\n    if (tssPolyCommits) this.tssPolyCommits[tssTag] = tssPolyCommits;\n    if (factorPubs) this.factorPubs[tssTag] = factorPubs;\n    if (factorEncs) this.factorEncs[tssTag] = factorEncs;\n  }\n}\nvar Metadata$1 = Metadata;\n\nexport { Metadata$1 as default };\n", "import { secp256k1, generatePrivateExcludingIndexes, Polynomial, Point } from '@tkey/common-types';\nimport BN from 'bn.js';\nimport CoreError from './errors.js';\n\nfunction generatePrivateBN() {\n  return secp256k1.genKeyPair().getPrivate();\n}\nconst generateEmptyBNArray = length => Array.from({\n  length\n}, () => new BN(0));\nconst denominator = (i, innerPoints) => {\n  let result = new BN(1);\n  const xi = innerPoints[i].x;\n  for (let j = innerPoints.length - 1; j >= 0; j -= 1) {\n    if (i !== j) {\n      let tmp = new BN(xi);\n      tmp = tmp.sub(innerPoints[j].x);\n      tmp = tmp.umod(secp256k1.curve.n);\n      result = result.mul(tmp);\n      result = result.umod(secp256k1.curve.n);\n    }\n  }\n  return result;\n};\nconst interpolationPoly = (i, innerPoints) => {\n  let coefficients = generateEmptyBNArray(innerPoints.length);\n  const d = denominator(i, innerPoints);\n  if (d.cmp(new BN(0)) === 0) {\n    throw CoreError.default(\"Denominator for interpolationPoly is 0\");\n  }\n  coefficients[0] = d.invm(secp256k1.curve.n);\n  for (let k = 0; k < innerPoints.length; k += 1) {\n    const newCoefficients = generateEmptyBNArray(innerPoints.length);\n    if (k !== i) {\n      let j;\n      if (k < i) {\n        j = k + 1;\n      } else {\n        j = k;\n      }\n      j -= 1;\n      for (; j >= 0; j -= 1) {\n        newCoefficients[j + 1] = newCoefficients[j + 1].add(coefficients[j]);\n        newCoefficients[j + 1] = newCoefficients[j + 1].umod(secp256k1.curve.n);\n        let tmp = new BN(innerPoints[k].x);\n        tmp = tmp.mul(coefficients[j]);\n        tmp = tmp.umod(secp256k1.curve.n);\n        newCoefficients[j] = newCoefficients[j].sub(tmp);\n        newCoefficients[j] = newCoefficients[j].umod(secp256k1.curve.n);\n      }\n      coefficients = newCoefficients;\n    }\n  }\n  return coefficients;\n};\nconst pointSort = innerPoints => {\n  const pointArrClone = [...innerPoints];\n  pointArrClone.sort((a, b) => a.x.cmp(b.x));\n  return pointArrClone;\n};\nconst lagrange = unsortedPoints => {\n  const sortedPoints = pointSort(unsortedPoints);\n  const polynomial = generateEmptyBNArray(sortedPoints.length);\n  for (let i = 0; i < sortedPoints.length; i += 1) {\n    const coefficients = interpolationPoly(i, sortedPoints);\n    for (let k = 0; k < sortedPoints.length; k += 1) {\n      let tmp = new BN(sortedPoints[i].y);\n      tmp = tmp.mul(coefficients[k]);\n      polynomial[k] = polynomial[k].add(tmp);\n      polynomial[k] = polynomial[k].umod(secp256k1.curve.n);\n    }\n  }\n  return new Polynomial(polynomial);\n};\nfunction lagrangeInterpolatePolynomial(points) {\n  return lagrange(points);\n}\nfunction lagrangeInterpolation(shares, nodeIndex) {\n  if (shares.length !== nodeIndex.length) {\n    throw CoreError.default(\"shares not equal to nodeIndex length in lagrangeInterpolation\");\n  }\n  let secret = new BN(0);\n  for (let i = 0; i < shares.length; i += 1) {\n    let upper = new BN(1);\n    let lower = new BN(1);\n    for (let j = 0; j < shares.length; j += 1) {\n      if (i !== j) {\n        upper = upper.mul(nodeIndex[j].neg());\n        upper = upper.umod(secp256k1.curve.n);\n        let temp = nodeIndex[i].sub(nodeIndex[j]);\n        temp = temp.umod(secp256k1.curve.n);\n        lower = lower.mul(temp).umod(secp256k1.curve.n);\n      }\n    }\n    let delta = upper.mul(lower.invm(secp256k1.curve.n)).umod(secp256k1.curve.n);\n    delta = delta.mul(shares[i]).umod(secp256k1.curve.n);\n    secret = secret.add(delta);\n  }\n  return secret.umod(secp256k1.curve.n);\n}\n\n// generateRandomPolynomial - determinisiticShares are assumed random\nfunction generateRandomPolynomial(degree, secret, deterministicShares) {\n  let actualS = secret;\n  if (!secret) {\n    actualS = generatePrivateExcludingIndexes([new BN(0)]);\n  }\n  if (!deterministicShares) {\n    const poly = [actualS];\n    for (let i = 0; i < degree; i += 1) {\n      const share = generatePrivateExcludingIndexes(poly);\n      poly.push(share);\n    }\n    return new Polynomial(poly);\n  }\n  if (!Array.isArray(deterministicShares)) {\n    throw CoreError.default(\"deterministic shares in generateRandomPolynomial should be an array\");\n  }\n  if (deterministicShares.length > degree) {\n    throw CoreError.default(\"deterministicShares in generateRandomPolynomial should be less or equal than degree to ensure an element of randomness\");\n  }\n  const points = {};\n  deterministicShares.forEach(share => {\n    points[share.shareIndex.toString(\"hex\")] = new Point(share.shareIndex, share.share);\n  });\n  for (let i = 0; i < degree - deterministicShares.length; i += 1) {\n    let shareIndex = generatePrivateExcludingIndexes([new BN(0)]);\n    while (points[shareIndex.toString(\"hex\")] !== undefined) {\n      shareIndex = generatePrivateExcludingIndexes([new BN(0)]);\n    }\n    points[shareIndex.toString(\"hex\")] = new Point(shareIndex, generatePrivateBN());\n  }\n  points[\"0\"] = new Point(new BN(0), actualS);\n  return lagrangeInterpolatePolynomial(Object.values(points));\n}\n\n//  2 + 3x = y | secret for index 1 is 5 >>> g^5 is the commitment | now we have g^2, g^3 and 1, |\nfunction polyCommitmentEval(polyCommitments, index) {\n  // convert to base points, this is badly written, its the only way to access the point rn zzz TODO: refactor\n  const basePtPolyCommitments = [];\n  for (let i = 0; i < polyCommitments.length; i += 1) {\n    const key = secp256k1.keyFromPublic({\n      x: polyCommitments[i].x.toString(\"hex\"),\n      y: polyCommitments[i].y.toString(\"hex\")\n    }, \"\");\n    basePtPolyCommitments.push(key.getPublic());\n  }\n  let shareCommitment = basePtPolyCommitments[0];\n  for (let i = 1; i < basePtPolyCommitments.length; i += 1) {\n    const factor = index.pow(new BN(i)).umod(secp256k1.n);\n    const e = basePtPolyCommitments[i].mul(factor);\n    shareCommitment = shareCommitment.add(e);\n  }\n  return new Point(shareCommitment.getX(), shareCommitment.getY());\n}\n\nexport { generatePrivateBN, generateRandomPolynomial, lagrangeInterpolatePolynomial, lagrangeInterpolation, polyCommitmentEval };\n", "import _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { ShareStore, Point, Share, KEY_NOT_FOUND, prettyPrintError, getPubKeyPoint, SHARE_DELETED, generatePrivateExcludingIndexes, encrypt, getPubKeyECC, decrypt, toPrivKeyECC, ONE_KEY_DELETE_NONCE } from '@tkey/common-types';\nimport { getEd25519ExtendedPublicKey } from '@toruslabs/torus.js';\nimport BN from 'bn.js';\nimport { getRandomBytes } from 'ethereum-cryptography/random';\nimport stringify from 'json-stable-stringify';\nimport AuthMetadata from './authMetadata.js';\nimport CoreError from './errors.js';\nimport { lagrangeInterpolation, lagrangeInterpolatePolynomial, generateRandomPolynomial, generatePrivateBN } from './lagrangeInterpolatePolynomial.js';\nimport Metadata from './metadata.js';\n\nconst ed25519SeedConst = \"ed25519Seed\";\n\n// TODO: handle errors for get and set with retries\n\nclass ThresholdKey {\n  constructor(args) {\n    _defineProperty(this, \"modules\", void 0);\n    _defineProperty(this, \"enableLogging\", void 0);\n    _defineProperty(this, \"serviceProvider\", void 0);\n    _defineProperty(this, \"storageLayer\", void 0);\n    _defineProperty(this, \"shares\", void 0);\n    _defineProperty(this, \"lastFetchedCloudMetadata\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"manualSync\", void 0);\n    _defineProperty(this, \"_localMetadataTransitions\", void 0);\n    _defineProperty(this, \"_refreshMiddleware\", void 0);\n    _defineProperty(this, \"_reconstructKeyMiddleware\", void 0);\n    _defineProperty(this, \"_shareSerializationMiddleware\", void 0);\n    _defineProperty(this, \"storeDeviceShare\", void 0);\n    _defineProperty(this, \"haveWriteMetadataLock\", void 0);\n    _defineProperty(this, \"serverTimeOffset\", 0);\n    // secp256k1 key\n    _defineProperty(this, \"privKey\", void 0);\n    _defineProperty(this, \"_ed25519Seed\", void 0);\n    const {\n      enableLogging = false,\n      modules = {},\n      serviceProvider,\n      storageLayer,\n      manualSync = false,\n      serverTimeOffset\n    } = args || {};\n    this.enableLogging = enableLogging;\n    this.serviceProvider = serviceProvider;\n    this.storageLayer = storageLayer;\n    this.modules = modules;\n    this.shares = {};\n    this.privKey = undefined;\n    this.manualSync = manualSync;\n    this._refreshMiddleware = {};\n    this._reconstructKeyMiddleware = {};\n    this._shareSerializationMiddleware = undefined;\n    this.storeDeviceShare = undefined;\n    this._localMetadataTransitions = [[], []];\n    this.setModuleReferences(); // Providing ITKeyApi access to modules\n    this.haveWriteMetadataLock = \"\";\n    this.serverTimeOffset = serverTimeOffset;\n  }\n  get secp256k1Key() {\n    if (typeof this.privKey !== \"undefined\") {\n      return this.privKey;\n    }\n    return null;\n  }\n  get ed25519Key() {\n    if (typeof this._ed25519Seed !== \"undefined\") {\n      return this._ed25519Seed;\n    }\n    return null;\n  }\n  set secp256k1Key(privKey) {\n    this.privKey = privKey;\n  }\n  set ed25519Key(seed) {\n    this._ed25519Seed = seed;\n  }\n  static async fromJSON(value, args) {\n    const {\n      enableLogging,\n      privKey,\n      metadata,\n      shares,\n      _localMetadataTransitions,\n      manualSync,\n      lastFetchedCloudMetadata,\n      serverTimeOffset\n    } = value;\n    const {\n      storageLayer,\n      serviceProvider,\n      modules\n    } = args;\n    const tb = new ThresholdKey({\n      enableLogging,\n      storageLayer,\n      serviceProvider,\n      modules,\n      manualSync,\n      serverTimeOffset\n    });\n    if (privKey) tb.privKey = new BN(privKey, \"hex\");\n    for (const key in shares) {\n      if (Object.prototype.hasOwnProperty.call(shares, key)) {\n        const shareStoreMapElement = shares[key];\n        for (const shareElementKey in shareStoreMapElement) {\n          if (Object.prototype.hasOwnProperty.call(shareStoreMapElement, shareElementKey)) {\n            const shareStore = shareStoreMapElement[shareElementKey];\n            shareStoreMapElement[shareElementKey] = ShareStore.fromJSON(shareStore);\n          }\n        }\n      }\n    }\n    tb.shares = shares;\n\n    // switch to deserialize local metadata transition based on Object.keys() of authMetadata, ShareStore's and, IMessageMetadata\n    const AuthMetadataKeys = Object.keys(JSON.parse(stringify(new AuthMetadata(new Metadata(new Point(\"0\", \"0\")), new BN(\"0\", \"hex\")))));\n    const ShareStoreKeys = Object.keys(JSON.parse(stringify(new ShareStore(new Share(\"0\", \"0\"), \"\"))));\n    const sampleMessageMetadata = {\n      message: \"Sample message\",\n      dateAdded: Date.now()\n    };\n    const MessageMetadataKeys = Object.keys(sampleMessageMetadata);\n    const localTransitionShares = [];\n    const localTransitionData = [];\n    _localMetadataTransitions[0].forEach((x, index) => {\n      if (x) {\n        localTransitionShares.push(new BN(x, \"hex\"));\n      } else {\n        localTransitionShares.push(undefined);\n      }\n      const keys = Object.keys(_localMetadataTransitions[1][index]);\n      if (keys.length === AuthMetadataKeys.length && keys.every(val => AuthMetadataKeys.includes(val))) {\n        const tempAuth = AuthMetadata.fromJSON(_localMetadataTransitions[1][index]);\n        tempAuth.privKey = privKey;\n        localTransitionData.push(tempAuth);\n      } else if (keys.length === ShareStoreKeys.length && keys.every(val => ShareStoreKeys.includes(val))) {\n        localTransitionData.push(ShareStore.fromJSON(_localMetadataTransitions[1][index]));\n      } else if (keys.length === MessageMetadataKeys.length && keys.every(val => MessageMetadataKeys.includes(val))) {\n        localTransitionData.push(_localMetadataTransitions[1][index]);\n      } else {\n        throw CoreError.default(\"fromJSON failed. Could not deserialise _localMetadataTransitions\");\n      }\n    });\n    if (metadata || lastFetchedCloudMetadata) {\n      let tempMetadata;\n      let tempCloud;\n      let shareToUseForSerialization;\n\n      // if service provider key is missing, we should initialize with one of the existing shares\n      // TODO: fix for deleted share\n      if (tb.serviceProvider.postboxKey.toString(\"hex\") === \"0\") {\n        const latestPolyIDOnCloud = Metadata.fromJSON(lastFetchedCloudMetadata).getLatestPublicPolynomial().getPolynomialID();\n        const shareIndexesExistInSDK = Object.keys(shares[latestPolyIDOnCloud]);\n        const randomIndex = shareIndexesExistInSDK[Math.floor(Math.random() * (shareIndexesExistInSDK.length - 1))];\n        if (shareIndexesExistInSDK.length >= 1) {\n          shareToUseForSerialization = shares[latestPolyIDOnCloud][randomIndex];\n        }\n      }\n      if (metadata) tempMetadata = Metadata.fromJSON(metadata);\n      if (lastFetchedCloudMetadata) tempCloud = Metadata.fromJSON(lastFetchedCloudMetadata);\n      await tb.initialize({\n        neverInitializeNewKey: true,\n        transitionMetadata: tempMetadata,\n        previouslyFetchedCloudMetadata: tempCloud,\n        previousLocalMetadataTransitions: [localTransitionShares, localTransitionData],\n        withShare: shareToUseForSerialization\n      });\n    } else {\n      await tb.initialize({\n        neverInitializeNewKey: true\n      });\n    }\n    return tb;\n  }\n  getStorageLayer() {\n    return this.storageLayer;\n  }\n  getMetadata() {\n    if (typeof this.metadata !== \"undefined\") {\n      return this.metadata;\n    }\n    throw CoreError.metadataUndefined();\n  }\n  async initialize(params) {\n    // setup initial params/states\n    const p = params || {};\n    if (p.delete1OutOf1 && !this.manualSync) throw CoreError.delete1OutOf1OnlyManualSync();\n    const {\n      withShare,\n      importKey,\n      importEd25519Seed,\n      neverInitializeNewKey,\n      transitionMetadata,\n      previouslyFetchedCloudMetadata,\n      previousLocalMetadataTransitions\n    } = p;\n    const previousLocalMetadataTransitionsExists = previousLocalMetadataTransitions && previousLocalMetadataTransitions[0].length > 0 && previousLocalMetadataTransitions[1].length > 0;\n    const reinitializing = transitionMetadata && previousLocalMetadataTransitionsExists; // are we reinitializing the SDK?\n    // in the case we're reinitializing whilst newKeyAssign has not been synced\n    const reinitializingWithNewKeyAssign = reinitializing && previouslyFetchedCloudMetadata === undefined;\n    let shareStore;\n    if (withShare instanceof ShareStore) {\n      shareStore = withShare;\n    } else if (typeof withShare === \"object\") {\n      shareStore = ShareStore.fromJSON(withShare);\n    } else if (!withShare) {\n      // default to use service provider\n      // first we see if a share has been kept for us\n      const spIncludeLocalMetadataTransitions = reinitializingWithNewKeyAssign;\n      const spLocalMetadataTransitions = reinitializingWithNewKeyAssign ? previousLocalMetadataTransitions : undefined;\n      const rawServiceProviderShare = await this.getGenericMetadataWithTransitionStates({\n        serviceProvider: this.serviceProvider,\n        includeLocalMetadataTransitions: spIncludeLocalMetadataTransitions,\n        _localMetadataTransitions: spLocalMetadataTransitions,\n        fromJSONConstructor: {\n          fromJSON(val) {\n            return val;\n          }\n        }\n      });\n      const noKeyFound = rawServiceProviderShare;\n      if (noKeyFound.message === KEY_NOT_FOUND) {\n        if (neverInitializeNewKey) {\n          throw CoreError.default(\"key has not been generated yet\");\n        }\n\n        // no metadata set, assumes new user\n        // check for serviceprovider migratableKey for import key from service provider for new user\n        // provided no importKey is provided ( importKey take precedent )\n        if (this.serviceProvider.migratableKey && !(importKey || importEd25519Seed)) {\n          // importkey from server provider need to be atomic, hence manual sync is required.\n          const tempStateManualSync = this.manualSync; // temp store manual sync flag\n          this.manualSync = true; // Setting this as true since _initializeNewKey has a check where for importkey from server provider need to be atomic, hence manual sync is required.\n          await this._initializeNewKey({\n            initializeModules: true,\n            importedKey: this.serviceProvider.migratableKey,\n            delete1OutOf1: true\n          });\n          if (!tempStateManualSync) await this.syncLocalMetadataTransitions(); // Only sync if we were not in manual sync mode, if manual sync is set by developer, they should handle it themselves\n          // restore manual sync flag\n          this.manualSync = tempStateManualSync;\n        } else {\n          await this._initializeNewKey({\n            initializeModules: true,\n            importedKey: importKey,\n            delete1OutOf1: p.delete1OutOf1,\n            importEd25519Seed\n          });\n        }\n\n        // return after created new tkey account ( skip other steps)\n        return this.getKeyDetails();\n      }\n      // else we continue with catching up share and metadata\n      shareStore = ShareStore.fromJSON(rawServiceProviderShare);\n    } else {\n      throw CoreError.default(\"Input is not supported\");\n    }\n\n    // We determine the latest metadata on the SDK and if there has been\n    // needed transitions to include\n    let currentMetadata;\n    let latestCloudMetadata;\n    // we fetch the latest metadata for the account from the share\n    let latestShareDetails;\n    try {\n      latestShareDetails = await this.catchupToLatestShare({\n        shareStore\n      });\n    } catch (error) {\n      // check if error is not the undefined error\n      // if so we don't throw immediately incase there is valid transition metadata\n      const err = error;\n      const noMetadataExistsForShare = err.code === 1503;\n      if (!noMetadataExistsForShare || !reinitializing) {\n        throw err;\n      }\n    }\n\n    // lets check if the cloud metadata has been updated or not from previously if we are reinitializing\n    if (reinitializing && !reinitializingWithNewKeyAssign) {\n      if (previouslyFetchedCloudMetadata.nonce < latestShareDetails.shareMetadata.nonce) {\n        throw CoreError.fromCode(1104);\n      } else if (previouslyFetchedCloudMetadata.nonce > latestShareDetails.shareMetadata.nonce) {\n        throw CoreError.fromCode(1105);\n      }\n      latestCloudMetadata = previouslyFetchedCloudMetadata;\n    } else {\n      latestCloudMetadata = latestShareDetails ? latestShareDetails.shareMetadata.clone() : undefined;\n    }\n\n    // If we've been provided with transition metadata we use that as the current metadata instead\n    // as we want to maintain state before and after serialization.\n    // (Given that the checks for cloud metadata pass)\n    if (reinitializing) {\n      currentMetadata = transitionMetadata;\n      this._localMetadataTransitions = previousLocalMetadataTransitions;\n    } else {\n      currentMetadata = latestShareDetails.shareMetadata;\n    }\n    this.lastFetchedCloudMetadata = latestCloudMetadata;\n    this.metadata = currentMetadata;\n    const latestShare = latestShareDetails ? latestShareDetails.latestShare : shareStore;\n    this.inputShareStore(latestShare);\n    if (importEd25519Seed && this.getEd25519PublicKey()) {\n      throw CoreError.default(\"Ed25119 key already exists\");\n    }\n\n    // initialize modules\n    await this.initializeModules();\n    return this.getKeyDetails();\n  }\n\n  /**\n   * catchupToLatestShare recursively loops fetches metadata of the provided share and checks if there is an encrypted share for it.\n   * @param shareStore - share to start of with\n   * @param polyID - if specified, polyID to refresh to if it exists\n   */\n  async catchupToLatestShare(params) {\n    const {\n      shareStore,\n      polyID,\n      includeLocalMetadataTransitions\n    } = params;\n    let shareMetadata;\n    try {\n      shareMetadata = await this.getAuthMetadata({\n        privKey: shareStore.share.share,\n        includeLocalMetadataTransitions\n      });\n    } catch (error) {\n      // delete share error\n      const err = error;\n      if (err && err.code === 1308) {\n        throw err;\n      }\n      const prettyError = await prettyPrintError(err);\n      throw CoreError.authMetadataGetUnavailable(`, ${prettyError.message}`);\n    }\n    try {\n      // if matches specified polyID return it\n      if (polyID) {\n        if (shareStore.polynomialID === polyID) {\n          return {\n            latestShare: shareStore,\n            shareMetadata\n          };\n        }\n      }\n      const nextShare = await shareMetadata.getEncryptedShare(shareStore);\n      return await this.catchupToLatestShare({\n        shareStore: nextShare,\n        polyID,\n        includeLocalMetadataTransitions\n      });\n    } catch (error) {\n      // delete share error\n      const err = error;\n      if (err && err.code === 1308) {\n        throw err;\n      }\n      return {\n        latestShare: shareStore,\n        shareMetadata\n      };\n    }\n  }\n  async reconstructKey(_reconstructKeyMiddleware = true) {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const pubPoly = this.metadata.getLatestPublicPolynomial();\n    const requiredThreshold = pubPoly.getThreshold();\n    const pubPolyID = pubPoly.getPolynomialID();\n\n    // check if we have enough shares to meet threshold\n    let sharesLeft = requiredThreshold;\n    // we don't just check the latest poly but\n    // we check if the shares on previous polynomials in our stores have the share indexes we require\n    const fullShareList = this.metadata.getShareIndexesForPolynomial(pubPolyID);\n    const shareIndexesRequired = {};\n    for (let i = 0; i < fullShareList.length; i += 1) {\n      shareIndexesRequired[fullShareList[i]] = true;\n    }\n    const sharesToInput = [];\n    for (let z = this.metadata.polyIDList.length - 1; z >= 0 && sharesLeft > 0; z -= 1) {\n      const sharesForPoly = this.shares[this.metadata.polyIDList[z][0]];\n      if (sharesForPoly) {\n        const shareIndexesForPoly = Object.keys(sharesForPoly);\n        for (let k = 0; k < shareIndexesForPoly.length && sharesLeft > 0; k += 1) {\n          if (shareIndexesForPoly[k] in shareIndexesRequired) {\n            const currentShareForPoly = sharesForPoly[shareIndexesForPoly[k]];\n            if (currentShareForPoly.polynomialID === pubPolyID) {\n              sharesToInput.push(currentShareForPoly);\n            } else {\n              const latestShareRes = await this.catchupToLatestShare({\n                shareStore: currentShareForPoly,\n                polyID: pubPolyID,\n                includeLocalMetadataTransitions: true\n              });\n              if (latestShareRes.latestShare.polynomialID === pubPolyID) {\n                sharesToInput.push(latestShareRes.latestShare);\n              } else {\n                throw new CoreError(1304, \"Share found in unexpected polynomial\"); // Share found in unexpected polynomial\n              }\n            }\n            delete shareIndexesRequired[shareIndexesForPoly[k]];\n            sharesLeft -= 1;\n          }\n        }\n      }\n    }\n\n    // Input shares to ensure atomicity\n    sharesToInput.forEach(share => {\n      this.inputShareStore(share);\n    });\n    if (sharesLeft > 0) {\n      throw CoreError.unableToReconstruct(` require ${requiredThreshold} but have ${requiredThreshold - sharesLeft}`);\n    }\n    const polyShares = Object.keys(this.shares[pubPolyID]);\n    const shareArr = [];\n    const shareIndexArr = [];\n    for (let i = 0; i < requiredThreshold; i += 1) {\n      shareArr.push(this.shares[pubPolyID][polyShares[i]].share.share);\n      shareIndexArr.push(this.shares[pubPolyID][polyShares[i]].share.shareIndex);\n    }\n    const privKey = lagrangeInterpolation(shareArr, shareIndexArr);\n    // check that priv key regenerated is correct\n    const reconstructedPubKey = getPubKeyPoint(privKey);\n    if (this.metadata.pubKey.x.cmp(reconstructedPubKey.x) !== 0) {\n      throw CoreError.incorrectReconstruction();\n    }\n    this.secp256k1Key = privKey;\n    const returnObject = {\n      allKeys: [privKey]\n    };\n    if (_reconstructKeyMiddleware && Object.keys(this._reconstructKeyMiddleware).length > 0) {\n      // retireve/reconstruct extra keys that live on metadata\n      await Promise.all(Object.keys(this._reconstructKeyMiddleware).map(async x => {\n        if (Object.prototype.hasOwnProperty.call(this._reconstructKeyMiddleware, x)) {\n          const extraKeys = await this._reconstructKeyMiddleware[x]();\n          returnObject[x] = extraKeys;\n          returnObject.allKeys.push(...extraKeys);\n        }\n      }));\n    }\n\n    // ed25519key\n    if (this.getEd25519PublicKey()) {\n      const seed = await this.retrieveEd25519Seed();\n      if (!seed) {\n        throw CoreError.default(\"Ed25519 seed not found\");\n      }\n      this._ed25519Seed = seed;\n    }\n    return _objectSpread({\n      secp256k1Key: privKey,\n      ed25519Seed: this._ed25519Seed\n    }, returnObject);\n  }\n  reconstructLatestPoly() {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const pubPoly = this.metadata.getLatestPublicPolynomial();\n    const pubPolyID = pubPoly.getPolynomialID();\n    const threshold = pubPoly.getThreshold();\n    const pointsArr = [];\n    const sharesForExistingPoly = Object.keys(this.shares[pubPolyID]);\n    if (sharesForExistingPoly.length < threshold) {\n      throw CoreError.unableToReconstruct(\"not enough shares to reconstruct poly\");\n    }\n    if (new Set(sharesForExistingPoly).size !== sharesForExistingPoly.length) {\n      throw CoreError.default(\"share indexes should be unique\");\n    }\n    for (let i = 0; i < threshold; i += 1) {\n      pointsArr.push(new Point(new BN(sharesForExistingPoly[i], \"hex\"), this.shares[pubPolyID][sharesForExistingPoly[i]].share.share));\n    }\n    return lagrangeInterpolatePolynomial(pointsArr);\n  }\n  async deleteShare(shareIndex) {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    if (!this.privKey) {\n      throw CoreError.privateKeyUnavailable();\n    }\n    const shareIndexToDelete = new BN(shareIndex, \"hex\");\n    const shareToDelete = this.outputShareStore(shareIndexToDelete);\n    if (shareIndexToDelete.cmp(new BN(\"1\", \"hex\")) === 0) {\n      throw new CoreError(1001, \"Unable to delete service provider share\");\n    }\n\n    // Get existing shares\n    const pubPoly = this.metadata.getLatestPublicPolynomial();\n    const previousPolyID = pubPoly.getPolynomialID();\n    const existingShareIndexes = this.metadata.getShareIndexesForPolynomial(previousPolyID);\n    const newShareIndexes = [];\n    existingShareIndexes.forEach(el => {\n      const bn = new BN(el, \"hex\");\n      if (bn.cmp(shareIndexToDelete) !== 0) {\n        newShareIndexes.push(bn.toString(\"hex\"));\n      }\n    });\n\n    // Update shares\n    if (existingShareIndexes.length === newShareIndexes.length) {\n      throw CoreError.default(\"Share index does not exist in latest polynomial\");\n    } else if (newShareIndexes.length < pubPoly.getThreshold()) {\n      throw CoreError.default(`Minimum ${pubPoly.getThreshold()} shares are required for tkey. Unable to delete share`);\n    }\n    const results = await this._refreshShares(pubPoly.getThreshold(), [...newShareIndexes], previousPolyID);\n    const newShareStores = results.shareStores;\n    await this.addLocalMetadataTransitions({\n      input: [{\n        message: SHARE_DELETED,\n        dateAdded: Date.now()\n      }],\n      privKey: [shareToDelete.share.share]\n    });\n    return {\n      newShareStores\n    };\n  }\n  async generateNewShare() {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    if (!this.secp256k1Key) {\n      throw CoreError.privateKeyUnavailable();\n    }\n    const pubPoly = this.metadata.getLatestPublicPolynomial();\n    const previousPolyID = pubPoly.getPolynomialID();\n    const existingShareIndexes = this.metadata.getShareIndexesForPolynomial(previousPolyID);\n    const existingShareIndexesBN = existingShareIndexes.map(el => new BN(el, \"hex\"));\n    const newShareIndex = new BN(generatePrivateExcludingIndexes(existingShareIndexesBN));\n    const results = await this._refreshShares(pubPoly.getThreshold(), [...existingShareIndexes, newShareIndex.toString(\"hex\")], previousPolyID);\n    const newShareStores = results.shareStores;\n    return {\n      newShareStores,\n      newShareIndex\n    };\n  }\n  getEd25519PublicKey() {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const result = this.metadata.getGeneralStoreDomain(ed25519SeedConst);\n    return result === null || result === void 0 ? void 0 : result.publicKey;\n  }\n  async retrieveEd25519Seed() {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    if (!this.privKey) {\n      throw CoreError.privateKeyUnavailable();\n    }\n    const result = this.metadata.getGeneralStoreDomain(ed25519SeedConst);\n    const seed = await this.decrypt(result.message);\n    this._ed25519Seed = seed;\n    return seed;\n  }\n  async addLocalMetadataTransitions(params) {\n    const {\n      privKey,\n      input\n    } = params;\n    this._localMetadataTransitions[0] = [...this._localMetadataTransitions[0], ...privKey];\n    this._localMetadataTransitions[1] = [...this._localMetadataTransitions[1], ...input];\n    if (!this.manualSync) await this.syncLocalMetadataTransitions();\n  }\n  async syncLocalMetadataTransitions() {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    if (!(Array.isArray(this._localMetadataTransitions[0]) && this._localMetadataTransitions[0].length > 0)) return;\n\n    // get lock\n    let acquiredLock = false;\n    if (this.lastFetchedCloudMetadata) {\n      await this.acquireWriteMetadataLock();\n      acquiredLock = true;\n    }\n    try {\n      await this.storageLayer.setMetadataStream({\n        input: this._localMetadataTransitions[1],\n        privKey: this._localMetadataTransitions[0],\n        serviceProvider: this.serviceProvider\n      });\n      this._localMetadataTransitions = [[], []];\n      this.lastFetchedCloudMetadata = this.metadata.clone();\n    } catch (error) {\n      const prettyError = await prettyPrintError(error);\n      throw CoreError.metadataPostFailed(prettyError.message);\n    } finally {\n      // release lock\n      if (acquiredLock) await this.releaseWriteMetadataLock();\n    }\n  }\n  async readMetadata(privKey) {\n    return this.storageLayer.getMetadata({\n      privKey\n    });\n  }\n\n  // Returns a new instance of metadata with a clean state. All the previous state will be reset.\n  async updateSDK(params) {\n    const tb = new ThresholdKey({\n      enableLogging: this.enableLogging,\n      modules: this.modules,\n      serviceProvider: this.serviceProvider,\n      storageLayer: this.storageLayer,\n      manualSync: this.manualSync\n    });\n    try {\n      await tb.initialize({\n        neverInitializeNewKey: true,\n        withShare: params && params.withShare\n      });\n    } catch (err) {\n      throw CoreError.fromCode(1103, `${err.message}`);\n    }\n\n    // Delete unnecessary polyIDs and shareStores\n    const allPolyIDList = tb.metadata.polyIDList;\n    let lastValidPolyID;\n    Object.keys(this.shares).forEach(x => {\n      if (allPolyIDList.find(id => id[0] === x)) {\n        lastValidPolyID = x;\n      } else {\n        delete this.shares[x];\n      }\n    });\n\n    // catchup to latest shareStore for all latest available shares.\n    // TODO: fix edge cases where shares are deleted in the newer polynomials\n    // TODO: maybe assign this.shares directly rather than output and inputsharestore.\n    const shareStoresForLastValidPolyID = Object.keys(this.shares[lastValidPolyID]).map(x => tb.inputShareStoreSafe(this.outputShareStore(x, lastValidPolyID)));\n    await Promise.all(shareStoresForLastValidPolyID);\n    return tb;\n  }\n\n  // NOTE: This API will be DEPRECATED in the future in favour of inputShareStoreSafe()\n  inputShareStore(shareStore) {\n    let ss;\n    if (shareStore instanceof ShareStore) {\n      ss = shareStore;\n    } else if (typeof shareStore === \"object\") {\n      ss = ShareStore.fromJSON(shareStore);\n    } else {\n      throw CoreError.default(\"can only add type ShareStore into shares\");\n    }\n    if (!(ss.polynomialID in this.shares)) {\n      this.shares[ss.polynomialID] = {};\n    }\n    this.shares[ss.polynomialID][ss.share.shareIndex.toString(\"hex\")] = ss;\n  }\n\n  // inputs a share ensuring that the share is the latest share AND metadata is updated to its latest state\n  async inputShareStoreSafe(shareStore, autoUpdateMetadata = false) {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    let ss;\n    if (shareStore instanceof ShareStore) {\n      ss = shareStore;\n    } else if (typeof shareStore === \"object\") {\n      ss = ShareStore.fromJSON(shareStore);\n    } else {\n      throw CoreError.default(\"can only add type ShareStore into shares\");\n    }\n    const polynomialId = this.metadata.getLatestPublicPolynomial().getPolynomialID();\n    if (ss.polynomialID !== polynomialId) {\n      const latestShareRes = await this.catchupToLatestShare({\n        shareStore: ss,\n        includeLocalMetadataTransitions: true\n      });\n      // check if the latest share is part of the current tkey instances\n      // to avoid random share getting input into metadata\n      if (!latestShareRes.shareMetadata.polyIDList.find(tuple => tuple[0] === polynomialId)) {\n        throw CoreError.fromCode(1307);\n      }\n      // if latest share's polynomial is not equal with tkey latest polynomial, tkey's metadata is outdated\n      if (polynomialId !== latestShareRes.latestShare.polynomialID) {\n        if (!autoUpdateMetadata) throw CoreError.default(`TKey SDK metadata seems to be outdated because shareIndex: ` + `${latestShareRes.latestShare.share.shareIndex.toString(\"hex\")} has a more recent metadata. Please call updateSDK first`);else this.metadata = latestShareRes.shareMetadata;\n      }\n      if (!(latestShareRes.latestShare.polynomialID in this.shares)) {\n        this.shares[latestShareRes.latestShare.polynomialID] = {};\n      }\n      this.shares[latestShareRes.latestShare.polynomialID][latestShareRes.latestShare.share.shareIndex.toString(\"hex\")] = latestShareRes.latestShare;\n    } else {\n      if (!(ss.polynomialID in this.shares)) {\n        this.shares[ss.polynomialID] = {};\n      }\n      this.shares[ss.polynomialID][ss.share.shareIndex.toString(\"hex\")] = ss;\n    }\n  }\n  outputShareStore(shareIndex, polyID) {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    let shareIndexParsed;\n    if (typeof shareIndex === \"number\") {\n      shareIndexParsed = new BN(shareIndex);\n    } else if (BN.isBN(shareIndex)) {\n      shareIndexParsed = shareIndex;\n    } else if (typeof shareIndex === \"string\") {\n      shareIndexParsed = new BN(shareIndex, \"hex\");\n    }\n    let polyIDToSearch;\n    if (polyID) {\n      polyIDToSearch = polyID;\n    } else {\n      polyIDToSearch = this.metadata.getLatestPublicPolynomial().getPolynomialID();\n    }\n    if (!this.metadata.getShareIndexesForPolynomial(polyIDToSearch).includes(shareIndexParsed.toString(\"hex\"))) {\n      throw new CoreError(1002, \"no such share index created\");\n    }\n    const shareFromStore = this.shares[polyIDToSearch][shareIndexParsed.toString(\"hex\")];\n    if (shareFromStore) return shareFromStore;\n    const poly = this.reconstructLatestPoly();\n    const shareMap = poly.generateShares([shareIndexParsed]);\n    return new ShareStore(shareMap[shareIndexParsed.toString(\"hex\")], polyIDToSearch);\n  }\n  getCurrentShareIndexes() {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const latestPolynomial = this.metadata.getLatestPublicPolynomial();\n    const latestPolynomialId = latestPolynomial.getPolynomialID();\n    const currentShareIndexes = Object.keys(this.shares[latestPolynomialId]);\n    return currentShareIndexes;\n  }\n  getKeyDetails() {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const poly = this.metadata.getLatestPublicPolynomial();\n    const previousPolyID = poly.getPolynomialID();\n    const requiredShares = poly.getThreshold() - Object.keys(this.shares[previousPolyID]).length;\n    let shareDescriptions = this.metadata.getShareDescription();\n    if (shareDescriptions) {\n      const existingShareIndexes = this.metadata.getShareIndexesForPolynomial(previousPolyID);\n      shareDescriptions = Object.keys(shareDescriptions).reduce((acc, index) => {\n        if (existingShareIndexes.indexOf(index) >= 0) acc[index] = shareDescriptions[index];\n        return acc;\n      }, {});\n    }\n    return {\n      pubKey: this.metadata.pubKey,\n      ed25519PublicKey: this.getEd25519PublicKey(),\n      requiredShares,\n      threshold: poly.getThreshold(),\n      totalShares: this.metadata.getShareIndexesForPolynomial(previousPolyID).length,\n      shareDescriptions\n    };\n  }\n\n  // Auth functions\n\n  generateAuthMetadata(params) {\n    const {\n      input\n    } = params;\n    const authMetadatas = [];\n    for (let i = 0; i < input.length; i += 1) {\n      authMetadatas.push(new AuthMetadata(input[i], this.privKey));\n    }\n    return authMetadatas;\n  }\n  setAuthMetadata(params) {\n    const {\n      input,\n      serviceProvider,\n      privKey\n    } = params;\n    const authMetadata = new AuthMetadata(input, this.privKey);\n    return this.storageLayer.setMetadata({\n      input: authMetadata,\n      serviceProvider,\n      privKey\n    });\n  }\n  async setAuthMetadataBulk(params) {\n    if (!this.privKey) {\n      throw CoreError.privateKeyUnavailable();\n    }\n    const {\n      input,\n      serviceProvider,\n      privKey\n    } = params;\n    const authMetadatas = [];\n    for (let i = 0; i < input.length; i += 1) {\n      authMetadatas.push(new AuthMetadata(input[i], this.privKey));\n    }\n    await this.addLocalMetadataTransitions({\n      input: authMetadatas,\n      serviceProvider,\n      privKey\n    });\n  }\n  async getAuthMetadata(params) {\n    const raw = await this.getGenericMetadataWithTransitionStates(_objectSpread(_objectSpread({}, params), {}, {\n      fromJSONConstructor: AuthMetadata\n    }));\n    const authMetadata = raw;\n    return authMetadata.metadata;\n  }\n\n  // fetches the latest metadata potentially searching in local transition states first\n  async getGenericMetadataWithTransitionStates(params) {\n    if (!(params.serviceProvider && params.serviceProvider.postboxKey.toString(\"hex\") !== \"0\" || params.privKey)) {\n      throw CoreError.default(\"require either serviceProvider or priv key in getGenericMetadataWithTransitionStates\");\n    }\n    if (params.includeLocalMetadataTransitions) {\n      const transitions = params._localMetadataTransitions ? params._localMetadataTransitions : this._localMetadataTransitions;\n      let index = null;\n      for (let i = transitions[0].length - 1; i >= 0; i -= 1) {\n        const x = transitions[0][i];\n        if (params.privKey && x && x.cmp(params.privKey) === 0) index = i;else if (params.serviceProvider && !x) index = i;\n        if (index !== null) break;\n      }\n      if (index !== null) {\n        return transitions[1][index];\n      }\n    }\n    let raw;\n    try {\n      raw = await this.storageLayer.getMetadata(params);\n    } catch (err) {\n      const prettyError = await prettyPrintError(err);\n      throw CoreError.metadataGetFailed(prettyError.message);\n    }\n    if (raw.message === SHARE_DELETED) {\n      throw CoreError.fromCode(1308);\n    }\n    return params.fromJSONConstructor.fromJSON(raw);\n  }\n\n  // Lock functions\n  async acquireWriteMetadataLock() {\n    if (this.haveWriteMetadataLock) return this.metadata.nonce;\n    if (!this.privKey) {\n      throw CoreError.privateKeyUnavailable();\n    }\n\n    // we check the metadata of a random share we have on the latest polynomial we know that reflects the cloud\n    // below we cater for if we have an existing share or need to create the share in the SDK\n    let randomShareStore;\n    const latestPolyIDOnCloud = this.lastFetchedCloudMetadata.getLatestPublicPolynomial().getPolynomialID();\n    const shareIndexesExistInSDK = Object.keys(this.shares[latestPolyIDOnCloud]);\n    const randomIndex = shareIndexesExistInSDK[Math.floor(Math.random() * (shareIndexesExistInSDK.length - 1))];\n    if (shareIndexesExistInSDK.length >= 1) {\n      randomShareStore = this.shares[latestPolyIDOnCloud][randomIndex];\n    } else {\n      randomShareStore = this.outputShareStore(randomIndex, latestPolyIDOnCloud);\n    }\n    const latestRes = await this.catchupToLatestShare({\n      shareStore: randomShareStore\n    });\n    const latestMetadata = latestRes.shareMetadata;\n\n    // read errors for what each means\n    if (latestMetadata.nonce > this.lastFetchedCloudMetadata.nonce) {\n      throw CoreError.acquireLockFailed(`unable to acquire write access for metadata due to \n      lastFetchedCloudMetadata (${this.lastFetchedCloudMetadata.nonce})\n           being lower than last written metadata nonce (${latestMetadata.nonce}). perhaps update metadata SDK (create new tKey and init)`);\n    } else if (latestMetadata.nonce < this.lastFetchedCloudMetadata.nonce) {\n      throw CoreError.acquireLockFailed(`unable to acquire write access for metadata due to \n      lastFetchedCloudMetadata (${this.lastFetchedCloudMetadata.nonce})\n      being higher than last written metadata nonce (${latestMetadata.nonce}). this should never happen as it \n      should only ever be updated by getting metadata)`);\n    }\n    const res = await this.storageLayer.acquireWriteLock({\n      privKey: this.privKey\n    });\n    if (res.status !== 1) throw CoreError.acquireLockFailed(`lock cannot be acquired from storage layer status code: ${res.status}`);\n\n    // increment metadata nonce for write session\n    // this.metadata.nonce += 1;\n    this.haveWriteMetadataLock = res.id;\n    return this.metadata.nonce;\n  }\n  async releaseWriteMetadataLock() {\n    if (!this.haveWriteMetadataLock) throw CoreError.releaseLockFailed(\"releaseWriteMetadataLock - don't have metadata lock to release\");\n    const res = await this.storageLayer.releaseWriteLock({\n      privKey: this.privKey,\n      id: this.haveWriteMetadataLock\n    });\n    if (res.status !== 1) throw CoreError.releaseLockFailed(`lock cannot be released from storage layer status code: ${res.status}`);\n    this.haveWriteMetadataLock = \"\";\n  }\n\n  // Module functions\n\n  async _syncShareMetadata(adjustScopedStore) {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const shareArray = this.getAllShareStoresForLatestPolynomial().map(x => x.share.share);\n    await this.syncMultipleShareMetadata(shareArray, adjustScopedStore);\n  }\n  async syncMultipleShareMetadata(shares, adjustScopedStore) {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    this.metadata.nonce += 1;\n    const newMetadataPromise = shares.map(async share => {\n      const newMetadata = this.metadata.clone();\n      let specificShareMetadata;\n      try {\n        specificShareMetadata = await this.getAuthMetadata({\n          privKey: share,\n          includeLocalMetadataTransitions: true\n        });\n      } catch (err) {\n        const prettyError = await prettyPrintError(err);\n        throw CoreError.authMetadataGetUnavailable(prettyError.message);\n      }\n      let scopedStoreToBeSet;\n      if (adjustScopedStore) {\n        scopedStoreToBeSet = adjustScopedStore(specificShareMetadata.scopedStore);\n      } else {\n        scopedStoreToBeSet = specificShareMetadata.scopedStore;\n      }\n      newMetadata.scopedStore = scopedStoreToBeSet;\n      return newMetadata;\n    });\n    const newMetadata = await Promise.all(newMetadataPromise);\n    return this.setAuthMetadataBulk({\n      input: newMetadata,\n      privKey: shares\n    });\n  }\n  _addRefreshMiddleware(moduleName, middleware) {\n    this._refreshMiddleware[moduleName] = middleware;\n  }\n  _addReconstructKeyMiddleware(moduleName, middleware) {\n    this._reconstructKeyMiddleware[moduleName] = middleware;\n  }\n  _addShareSerializationMiddleware(serialize, deserialize) {\n    this._shareSerializationMiddleware = {\n      serialize,\n      deserialize\n    };\n  }\n  _setDeviceStorage(storeDeviceStorage) {\n    if (this.storeDeviceShare) {\n      throw CoreError.default(\"storeDeviceShare already set\");\n    }\n    this.storeDeviceShare = storeDeviceStorage;\n  }\n  async addShareDescription(shareIndex, description, updateMetadata) {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    this.metadata.addShareDescription(shareIndex, description);\n    if (updateMetadata) {\n      await this._syncShareMetadata();\n    }\n  }\n  async deleteShareDescription(shareIndex, description, updateMetadata) {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    this.metadata.deleteShareDescription(shareIndex, description);\n    if (updateMetadata) {\n      await this._syncShareMetadata();\n    }\n  }\n  async updateShareDescription(shareIndex, oldDescription, newDescription, updateMetadata) {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    this.metadata.updateShareDescription(shareIndex, oldDescription, newDescription);\n    if (updateMetadata) {\n      await this._syncShareMetadata();\n    }\n  }\n  async encrypt(data) {\n    if (!this.privKey) throw CoreError.privateKeyUnavailable();\n    return encrypt(getPubKeyECC(this.privKey), data);\n  }\n  async decrypt(encryptedMessage) {\n    if (!this.privKey) throw CoreError.privateKeyUnavailable();\n    return decrypt(toPrivKeyECC(this.privKey), encryptedMessage);\n  }\n  async _setTKeyStoreItem(moduleName, data) {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const rawTkeyStoreItems = this.metadata.getTkeyStoreDomain(moduleName) || [];\n    const decryptedItems = await Promise.all(rawTkeyStoreItems.map(async x => {\n      const decryptedItem = await this.decrypt(x);\n      return JSON.parse(decryptedItem.toString());\n    }));\n    const encryptedData = await this.encrypt(Buffer.from(stringify(data)));\n    const duplicateItemIndex = decryptedItems.findIndex(x => x.id === data.id);\n    if (duplicateItemIndex > -1) {\n      rawTkeyStoreItems[duplicateItemIndex] = encryptedData;\n    } else {\n      rawTkeyStoreItems.push(encryptedData);\n    }\n\n    // update metadataStore\n    this.metadata.setTkeyStoreDomain(moduleName, rawTkeyStoreItems);\n    await this._syncShareMetadata();\n  }\n  async _deleteTKeyStoreItem(moduleName, id) {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const rawTkeyStoreItems = this.metadata.getTkeyStoreDomain(moduleName) || [];\n    const decryptedItems = await Promise.all(rawTkeyStoreItems.map(async x => {\n      const decryptedItem = await this.decrypt(x);\n      return JSON.parse(decryptedItem.toString());\n    }));\n    const finalItems = decryptedItems.filter(x => x.id !== id);\n    this.metadata.setTkeyStoreDomain(moduleName, finalItems);\n    await this._syncShareMetadata();\n  }\n  async getTKeyStore(moduleName) {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const rawTkeyStoreItems = this.metadata.getTkeyStoreDomain(moduleName) || [];\n    const decryptedItems = await Promise.all(rawTkeyStoreItems.map(async x => {\n      const decryptedItem = await this.decrypt(x);\n      return JSON.parse(decryptedItem.toString());\n    }));\n    return decryptedItems;\n  }\n  async getTKeyStoreItem(moduleName, id) {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const rawTkeyStoreItems = this.metadata.getTkeyStoreDomain(moduleName) || [];\n    const decryptedItems = await Promise.all(rawTkeyStoreItems.map(async x => {\n      const decryptedItem = await this.decrypt(x);\n      return JSON.parse(decryptedItem.toString());\n    }));\n    const item = decryptedItems.find(x => x.id === id);\n    return item;\n  }\n\n  // Import export shares\n  async outputShare(shareIndex, type) {\n    const {\n      share\n    } = this.outputShareStore(shareIndex).share;\n    if (!type) return share;\n    return this._shareSerializationMiddleware.serialize(share, type);\n  }\n  async inputShare(share, type) {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    let shareStore;\n    if (!type) shareStore = this.metadata.shareToShareStore(share);else {\n      const deserialized = await this._shareSerializationMiddleware.deserialize(share, type);\n      shareStore = this.metadata.shareToShareStore(deserialized);\n    }\n    const pubPoly = this.metadata.getLatestPublicPolynomial();\n    const pubPolyID = pubPoly.getPolynomialID();\n    const fullShareIndexesList = this.metadata.getShareIndexesForPolynomial(pubPolyID);\n    if (!fullShareIndexesList.includes(shareStore.share.shareIndex.toString(\"hex\"))) {\n      throw CoreError.default(\"Latest poly doesn't include this share\");\n    }\n    await this.inputShareStoreSafe(shareStore);\n  }\n  toJSON() {\n    return {\n      shares: this.shares,\n      enableLogging: this.enableLogging,\n      privKey: this.privKey ? this.privKey.toString(\"hex\") : undefined,\n      metadata: this.metadata,\n      lastFetchedCloudMetadata: this.lastFetchedCloudMetadata,\n      _localMetadataTransitions: this._localMetadataTransitions,\n      manualSync: this.manualSync,\n      serviceProvider: this.serviceProvider,\n      storageLayer: this.storageLayer\n    };\n  }\n  getAllShareStoresForLatestPolynomial() {\n    const pubPoly = this.metadata.getLatestPublicPolynomial();\n    const pubPolyID = pubPoly.getPolynomialID();\n    const existingShareIndexes = this.metadata.getShareIndexesForPolynomial(pubPolyID);\n    const threshold = pubPoly.getThreshold();\n    const pointsArr = [];\n    const sharesForExistingPoly = Object.keys(this.shares[pubPolyID]);\n    if (sharesForExistingPoly.length < threshold) {\n      throw CoreError.unableToReconstruct(\"not enough shares for polynomial reconstruction\");\n    }\n    for (let i = 0; i < threshold; i += 1) {\n      pointsArr.push(new Point(new BN(sharesForExistingPoly[i], \"hex\"), this.shares[pubPolyID][sharesForExistingPoly[i]].share.share));\n    }\n    const currentPoly = lagrangeInterpolatePolynomial(pointsArr);\n    const allExistingShares = currentPoly.generateShares(existingShareIndexes);\n    const shareArray = existingShareIndexes.map(shareIndex => {\n      return this.metadata.shareToShareStore(allExistingShares[shareIndex].share);\n    });\n    return shareArray;\n  }\n\n  /// Destructive method. All data will be wiped!\n  async CRITICAL_deleteTkey() {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    if (!this.privKey) {\n      throw CoreError.privateKeyUnavailable();\n    }\n    if (this._localMetadataTransitions[0].length > 0 || this._localMetadataTransitions[1].length > 0) {\n      throw CoreError.default(\"Please sync all local state before calling this function\");\n    }\n\n    // Construct all shares\n    const shareArray = this.getAllShareStoresForLatestPolynomial();\n    await this.addLocalMetadataTransitions({\n      input: [...Array(shareArray.length).fill({\n        message: SHARE_DELETED,\n        dateAdded: Date.now()\n      }), {\n        message: KEY_NOT_FOUND\n      }],\n      privKey: [...shareArray.map(x => x.share.share), undefined]\n    });\n    await this.syncLocalMetadataTransitions(); // forcesync\n\n    this.privKey = undefined;\n    this.metadata = undefined;\n    this.shares = {};\n    this.lastFetchedCloudMetadata = undefined;\n  }\n  getApi() {\n    return {\n      getMetadata: this.getMetadata.bind(this),\n      getStorageLayer: this.getStorageLayer.bind(this),\n      initialize: this.initialize.bind(this),\n      catchupToLatestShare: this.catchupToLatestShare.bind(this),\n      _syncShareMetadata: this._syncShareMetadata.bind(this),\n      _addRefreshMiddleware: this._addRefreshMiddleware.bind(this),\n      _addReconstructKeyMiddleware: this._addReconstructKeyMiddleware.bind(this),\n      _addShareSerializationMiddleware: this._addShareSerializationMiddleware.bind(this),\n      addShareDescription: this.addShareDescription.bind(this),\n      generateNewShare: this.generateNewShare.bind(this),\n      inputShareStore: this.inputShareStore.bind(this),\n      inputShareStoreSafe: this.inputShareStoreSafe.bind(this),\n      outputShareStore: this.outputShareStore.bind(this),\n      inputShare: this.inputShare.bind(this),\n      outputShare: this.outputShare.bind(this),\n      _setDeviceStorage: this._setDeviceStorage.bind(this),\n      encrypt: this.encrypt.bind(this),\n      decrypt: this.decrypt.bind(this),\n      getTKeyStore: this.getTKeyStore.bind(this),\n      getTKeyStoreItem: this.getTKeyStoreItem.bind(this),\n      _setTKeyStoreItem: this._setTKeyStoreItem.bind(this),\n      _deleteTKeyStoreItem: this._deleteTKeyStoreItem.bind(this),\n      deleteShare: this.deleteShare.bind(this)\n    };\n  }\n  setModuleReferences() {\n    Object.keys(this.modules).map(x => this.modules[x].setModuleReferences(this.getApi()));\n  }\n  async initializeModules() {\n    return Promise.all(Object.keys(this.modules).map(x => this.modules[x].initialize()));\n  }\n  async _refreshShares(threshold, newShareIndexes, previousPolyID) {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    if (!this.privKey) {\n      throw CoreError.privateKeyUnavailable();\n    }\n    if (threshold > newShareIndexes.length) {\n      throw CoreError.default(`threshold should not be greater than share indexes. ${threshold} > ${newShareIndexes.length}`);\n    }\n\n    // update metadata nonce\n    this.metadata.nonce += 1;\n    const poly = generateRandomPolynomial(threshold - 1, this.privKey);\n    const shares = poly.generateShares(newShareIndexes);\n    const existingShareIndexes = this.metadata.getShareIndexesForPolynomial(previousPolyID);\n    const pointsArr = [];\n    const sharesForExistingPoly = Object.keys(this.shares[previousPolyID]);\n    if (sharesForExistingPoly.length < threshold) {\n      throw CoreError.unableToReconstruct(\"not enough shares for polynomial reconstruction\");\n    }\n    for (let i = 0; i < threshold; i += 1) {\n      pointsArr.push(new Point(new BN(sharesForExistingPoly[i], \"hex\"), this.shares[previousPolyID][sharesForExistingPoly[i]].share.share));\n    }\n    const oldPoly = lagrangeInterpolatePolynomial(pointsArr);\n    const shareIndexesNeedingEncryption = [];\n    for (let index = 0; index < existingShareIndexes.length; index += 1) {\n      const shareIndexHex = existingShareIndexes[index];\n      // define shares that need encryption/relaying\n      if (newShareIndexes.includes(shareIndexHex)) {\n        shareIndexesNeedingEncryption.push(shareIndexHex);\n      }\n    }\n\n    // add metadata new poly to metadata\n    this.metadata.addFromPolynomialAndShares(poly, shares);\n\n    // change to share stores for public storing\n    const oldShareStores = {};\n    const newShareStores = {};\n    const polyID = poly.getPolynomialID();\n    newShareIndexes.forEach(shareIndexHex => {\n      newShareStores[shareIndexHex] = new ShareStore(shares[shareIndexHex], polyID);\n    });\n\n    // evaluate oldPoly for old shares and set new metadata with encrypted share for new polynomial\n\n    const m = this.metadata.clone();\n    const newScopedStore = {};\n    const sharesToPush = await Promise.all(shareIndexesNeedingEncryption.map(async shareIndex => {\n      const oldShare = oldPoly.polyEval(new BN(shareIndex, \"hex\"));\n      const encryptedShare = await encrypt(getPubKeyECC(oldShare), Buffer.from(JSON.stringify(newShareStores[shareIndex])));\n      newScopedStore[getPubKeyPoint(oldShare).x.toString(\"hex\")] = encryptedShare;\n      oldShareStores[shareIndex] = new ShareStore(new Share(shareIndex, oldShare), previousPolyID);\n      return oldShare;\n    }));\n    m.setScopedStore(\"encryptedShares\", newScopedStore);\n    const metadataToPush = Array(sharesToPush.length).fill(m);\n\n    // run refreshShare middleware\n    // If a shareIndex is left out during refresh shares, we assume that it being explicitly deleted.\n    for (const moduleName in this._refreshMiddleware) {\n      if (Object.prototype.hasOwnProperty.call(this._refreshMiddleware, moduleName)) {\n        const adjustedGeneralStore = this._refreshMiddleware[moduleName](this.metadata.getGeneralStoreDomain(moduleName), oldShareStores, newShareStores);\n        if (!adjustedGeneralStore) this.metadata.deleteGeneralStoreDomain(moduleName);else this.metadata.setGeneralStoreDomain(moduleName, adjustedGeneralStore);\n      }\n    }\n    const newShareMetadataToPush = [];\n    const newShareStoreSharesToPush = newShareIndexes.map(shareIndex => {\n      const me = this.metadata.clone();\n      newShareMetadataToPush.push(me);\n      return newShareStores[shareIndex].share.share;\n    });\n    const AuthMetadatas = this.generateAuthMetadata({\n      input: [...metadataToPush, ...newShareMetadataToPush]\n    });\n\n    // Combine Authmetadata and service provider ShareStore\n    await this.addLocalMetadataTransitions({\n      input: [...AuthMetadatas, newShareStores[\"1\"]],\n      privKey: [...sharesToPush, ...newShareStoreSharesToPush, undefined]\n    });\n\n    // update this.shares with these new shares\n    for (let index = 0; index < newShareIndexes.length; index += 1) {\n      const shareIndex = newShareIndexes[index];\n      this.inputShareStore(newShareStores[shareIndex]);\n    }\n    // await this.releaseWriteMetadataLock();\n    return {\n      shareStores: newShareStores\n    };\n  }\n  async _initializeNewKey({\n    determinedShare,\n    initializeModules,\n    importedKey,\n    importEd25519Seed,\n    delete1OutOf1\n  } = {}) {\n    if (!importedKey) {\n      const tmpPriv = generatePrivateBN();\n      this.secp256k1Key = tmpPriv;\n    } else {\n      this.secp256k1Key = importedKey;\n    }\n\n    // create a random poly and respective shares\n    // 1 is defined as the serviceProvider share\n    // 0 is for tKey\n    const shareIndexForDeviceStorage = generatePrivateExcludingIndexes([new BN(1), new BN(0)]);\n    const shareIndexes = [new BN(1), shareIndexForDeviceStorage];\n    let poly;\n    if (determinedShare) {\n      const shareIndexForDeterminedShare = generatePrivateExcludingIndexes([new BN(1), new BN(0)]);\n      poly = generateRandomPolynomial(1, this.privKey, [new Share(shareIndexForDeterminedShare, determinedShare)]);\n      shareIndexes.push(shareIndexForDeterminedShare);\n    } else {\n      poly = generateRandomPolynomial(1, this.privKey);\n    }\n    const shares = poly.generateShares(shareIndexes);\n\n    // create metadata to be stored\n    const metadata = new Metadata(getPubKeyPoint(this.privKey));\n    metadata.addFromPolynomialAndShares(poly, shares);\n    const serviceProviderShare = shares[shareIndexes[0].toString(\"hex\")];\n    const shareStore = new ShareStore(serviceProviderShare, poly.getPolynomialID());\n    this.metadata = metadata;\n\n    // setup ed25519 seed after metadata is set\n    // import/gen ed25519 seed\n    await this.setupEd25519Seed(importEd25519Seed);\n\n    // initialize modules\n    if (initializeModules) {\n      await this.initializeModules();\n    }\n    const metadataToPush = [];\n    const sharesToPush = shareIndexes.map(shareIndex => {\n      metadataToPush.push(this.metadata);\n      return shares[shareIndex.toString(\"hex\")].share;\n    });\n    const authMetadatas = this.generateAuthMetadata({\n      input: metadataToPush\n    });\n\n    // because this is the first time we're setting metadata there is no need to acquire a lock\n    // acquireLock: false. Force push\n    await this.addLocalMetadataTransitions({\n      input: [...authMetadatas, shareStore],\n      privKey: [...sharesToPush, undefined]\n    });\n    if (delete1OutOf1) {\n      await this.addLocalMetadataTransitions({\n        input: [{\n          message: ONE_KEY_DELETE_NONCE\n        }],\n        privKey: [this.serviceProvider.postboxKey]\n      });\n    }\n\n    // store metadata on metadata respective to shares\n    for (let index = 0; index < shareIndexes.length; index += 1) {\n      const shareIndex = shareIndexes[index];\n      // also add into our share store\n      this.inputShareStore(new ShareStore(shares[shareIndex.toString(\"hex\")], poly.getPolynomialID()));\n    }\n    if (this.storeDeviceShare) {\n      await this.storeDeviceShare(new ShareStore(shares[shareIndexes[1].toString(\"hex\")], poly.getPolynomialID()));\n    }\n    const result = {\n      secp256k1Key: this.privKey,\n      deviceShare: new ShareStore(shares[shareIndexes[1].toString(\"hex\")], poly.getPolynomialID()),\n      userShare: undefined\n    };\n    if (determinedShare) {\n      result.userShare = new ShareStore(shares[shareIndexes[2].toString(\"hex\")], poly.getPolynomialID());\n    }\n    return result;\n  }\n  async importEd25519Seed(seed) {\n    if (!this.privKey) {\n      throw CoreError.privateKeyUnavailable();\n    }\n    if (this.getEd25519PublicKey()) {\n      throw CoreError.default(\"Ed25519 key already exists\");\n    }\n\n    // derive key pair (scalar, public key point) from seed\n    const keyPair = getEd25519ExtendedPublicKey(seed);\n    this.metadata.setGeneralStoreDomain(ed25519SeedConst, {\n      message: await this.encrypt(seed),\n      publicKey: keyPair.point.encode(\"hex\", false)\n    });\n    this._ed25519Seed = seed;\n  }\n  async setupEd25519Seed(seed) {\n    if (!this.privKey) {\n      throw CoreError.privateKeyUnavailable();\n    }\n    let seedToUse = seed;\n    if (!seed) {\n      const newEd25519Seed = await getRandomBytes(32);\n      seedToUse = Buffer.from(newEd25519Seed);\n    }\n    await this.importEd25519Seed(seedToUse);\n  }\n}\nvar ThresholdKey$1 = ThresholdKey;\n\nexport { ThresholdKey$1 as default };\n", "import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { get, post } from '@toruslabs/http-helpers';\nimport BN from 'bn.js';\nimport { ec } from 'elliptic';\nimport log from 'loglevel';\nimport { ecPoint, ecCurveSecp256k1, hexPoint, getLagrangeCoeff, generatePolynomial, getShare, encrypt, decrypt, dotProduct } from './utils.js';\n\nfunction getEndpoint(endpoint, path, options_, customOptions) {\n  if (typeof endpoint === \"string\") {\n    return get(`${endpoint}${path}`, options_, customOptions);\n  }\n  return endpoint.get(path);\n}\nfunction postEndpoint(endpoint, path, data, options_, customOptions) {\n  if (typeof endpoint === \"string\") {\n    return post(`${endpoint}${path}`, data, options_, customOptions);\n  }\n  return endpoint.post(path, data);\n}\nclass RSSClient {\n  constructor(opts) {\n    _defineProperty(this, \"tssPubKey\", void 0);\n    _defineProperty(this, \"tempPrivKey\", void 0);\n    _defineProperty(this, \"tempPubKey\", void 0);\n    _defineProperty(this, \"serverEndpoints\", void 0);\n    _defineProperty(this, \"serverThreshold\", void 0);\n    _defineProperty(this, \"serverPubKeys\", void 0);\n    _defineProperty(this, \"ecCurve\", void 0);\n    _defineProperty(this, \"keyType\", void 0);\n    if (opts.keyType !== \"secp256k1\" && opts.keyType !== \"ed25519\") throw new Error(\"Invalid keyType, only secp256k1 or ed25519 is supported\");\n    this.keyType = opts.keyType;\n    this.ecCurve = new ec(this.keyType);\n    this.tssPubKey = ecPoint(this.ecCurve, opts.tssPubKey);\n    this.serverEndpoints = opts.serverEndpoints;\n    this.serverThreshold = opts.serverThreshold;\n    this.serverPubKeys = opts.serverPubKeys;\n    if (opts.tempKey) {\n      this.tempPrivKey = opts.tempKey;\n      this.tempPubKey = ecCurveSecp256k1.g.mul(opts.tempKey);\n    } else {\n      const kp = ecCurveSecp256k1.genKeyPair();\n      this.tempPrivKey = kp.getPrivate();\n      this.tempPubKey = kp.getPublic();\n    }\n  }\n  async import(opts) {\n    const {\n      importKey,\n      newLabel,\n      sigs,\n      dkgNewPub,\n      targetIndexes,\n      selectedServers,\n      factorPubs\n    } = opts;\n    if (factorPubs.length !== targetIndexes.length) throw new Error(\"inconsistent factorPubs and targetIndexes lengths\");\n    const serversInfo = {\n      pubkeys: this.serverPubKeys,\n      selected: selectedServers,\n      threshold: this.serverThreshold\n    };\n\n    // send requests to T servers (import only requires the T new servers)\n    const rssRound1Proms = selectedServers.map(ind => {\n      const serverEndpoint = this.serverEndpoints[ind - 1];\n      return postEndpoint(serverEndpoint, \"/rss_round_1\", {\n        round_name: \"rss_round_1\",\n        server_set: \"new\",\n        server_index: ind,\n        new_servers_info: serversInfo,\n        user_temp_pubkey: hexPoint(this.tempPubKey),\n        target_index: targetIndexes,\n        auth: {\n          label: newLabel,\n          // TODO: undesigned\n          sigs\n        },\n        key_type: this.keyType\n      });\n    });\n\n    // front end also generates hierarchical secret sharing\n    // - calculate lagrange coeffs\n    const _finalLagrangeCoeffs = targetIndexes.map(target => getLagrangeCoeff([0, 1], 0, target, this.ecCurve.n).umod(this.ecCurve.n));\n    const _masterPolys = [];\n    const _masterPolyCommits = [];\n    const _serverPolys = [];\n    const _serverPolyCommits = [];\n    const generateRandomScalar = () => this.ecCurve.genKeyPair().getPrivate();\n    for (let i = 0; i < _finalLagrangeCoeffs.length; i++) {\n      const _lc = _finalLagrangeCoeffs[i];\n      const _m = generatePolynomial(1, _lc.mul(importKey).umod(this.ecCurve.n), generateRandomScalar);\n      _masterPolys.push(_m);\n      _masterPolyCommits.push(_m.map(coeff => {\n        const _gCoeff = this.ecCurve.g.mul(coeff);\n        return hexPoint(_gCoeff);\n      }));\n      const _s = generatePolynomial(serversInfo.threshold - 1, getShare(_m, 1, this.ecCurve.n), generateRandomScalar);\n      _serverPolys.push(_s);\n      _serverPolyCommits.push(_s.map(coeff => hexPoint(this.ecCurve.g.mul(coeff))));\n    }\n    const _serverEncs = [];\n    const _userEncs = [];\n    for (let i = 0; i < _masterPolys.length; i++) {\n      _serverEncs.push([]); // for each target_index, create an array of server encryptions\n    }\n    // - generate N + 1 shares\n    for (let i = 0; i < targetIndexes.length; i++) {\n      const _masterPoly = _masterPolys[i];\n      _userEncs.push(await encrypt(Buffer.from(`04${hexPoint(this.tempPubKey).x.padStart(64, \"0\")}${hexPoint(this.tempPubKey).y.padStart(64, \"0\")}`, \"hex\"), Buffer.from(getShare(_masterPoly, 99, this.ecCurve.n).toString(16, 64), \"hex\")));\n      const _serverPoly = _serverPolys[i];\n      const _serverEnc = _serverEncs[i];\n      for (let j = 0; j < serversInfo.pubkeys.length; j++) {\n        const _pub = serversInfo.pubkeys[j];\n        _serverEnc.push(await encrypt(Buffer.from(`04${_pub.x.padStart(64, \"0\")}${_pub.y.padStart(64, \"0\")}`, \"hex\"), Buffer.from(getShare(_serverPoly, j + 1, this.ecCurve.n).toString(16, 64), \"hex\")));\n      }\n    }\n    const _data = [];\n    for (let i = 0; i < targetIndexes.length; i++) {\n      _data.push({\n        master_poly_commits: _masterPolyCommits[i],\n        server_poly_commits: _serverPolyCommits[i],\n        target_encryptions: {\n          user_enc: _userEncs[i],\n          server_encs: _serverEncs[i]\n        }\n      });\n    }\n\n    // add front end generated hierarchical sharing to the list\n    rssRound1Proms.push(new Promise(resolve => {\n      resolve({\n        target_index: targetIndexes,\n        data: _data\n      });\n    }));\n\n    // await responses\n    const rssRound1Responses = await Promise.all(rssRound1Proms);\n\n    // sum up all master poly commits and sum up all server poly commits\n    const sums = targetIndexes.map((_, i) => {\n      for (let j = 0; j < rssRound1Responses.length; j++) {\n        const rssRound1ResponseData = rssRound1Responses[j].data[i];\n        const {\n          master_poly_commits: masterPolyCommits,\n          server_poly_commits: serverPolyCommits\n        } = rssRound1ResponseData;\n        if (masterPolyCommits.length !== 2) throw new Error(\"incorrect number of coeffs for master poly commits\");\n        if (serverPolyCommits.length !== this.serverThreshold) throw new Error(\"incorrect number of coeffs for server poly commits\");\n      }\n      let sumMasterPolyCommits = [];\n      let sumServerPolyCommits = [];\n      for (let j = 0; j < rssRound1Responses.length; j++) {\n        const rssRound1ResponseData = rssRound1Responses[j].data[i];\n        const {\n          master_poly_commits: masterPolyCommits,\n          server_poly_commits: serverPolyCommits\n        } = rssRound1ResponseData;\n        if (sumMasterPolyCommits.length === 0 && sumServerPolyCommits.length === 0) {\n          sumMasterPolyCommits = masterPolyCommits.map(p => ecPoint(this.ecCurve, p));\n          sumServerPolyCommits = serverPolyCommits.map(p => ecPoint(this.ecCurve, p));\n          continue;\n        }\n        sumMasterPolyCommits = sumMasterPolyCommits.map((summedCommit, k) => {\n          return ecPoint(this.ecCurve, masterPolyCommits[k]).add(summedCommit);\n        });\n        sumServerPolyCommits = sumServerPolyCommits.map((summedCommit, k) => {\n          return ecPoint(this.ecCurve, serverPolyCommits[k]).add(summedCommit);\n        });\n      }\n      return {\n        mc: sumMasterPolyCommits,\n        sc: sumServerPolyCommits\n      };\n    });\n\n    // front end checks\n    targetIndexes.map((target, i) => {\n      const {\n        mc,\n        sc\n      } = sums[i];\n      // check master poly commits are consistent with tssPubKey\n      const temp1 = ecPoint(this.ecCurve, dkgNewPub).mul(getLagrangeCoeff([1, target], 1, 0, this.ecCurve.n));\n      const temp2 = mc[0].mul(getLagrangeCoeff([1, target], target, 0, this.ecCurve.n));\n      const _tssPubKey = temp1.add(temp2);\n      if (!_tssPubKey.eq(this.tssPubKey)) throw new Error(\"master poly commits inconsistent with tssPubKey\");\n\n      // check server poly commits are consistent with master poly commits\n      if (!mc[0].add(mc[1]).eq(sc[0])) throw new Error(\"server poly commits inconsistent with master poly commits\");\n      return null;\n    });\n\n    // front end checks if decrypted user shares are consistent with poly commits\n    const privKeyBuffer = Buffer.from(this.tempPrivKey.toString(16, 64), \"hex\");\n    const userShares = [];\n    for (let i = 0; i < targetIndexes.length; i++) {\n      const userEncs = rssRound1Responses.map(r => r.data[i].target_encryptions.user_enc);\n      const userDecs = await Promise.all(userEncs.map(encMsg => decrypt(privKeyBuffer, encMsg)));\n      const userShare = userDecs.map(userDec => new BN(userDec)).reduce((acc, d) => acc.add(d).umod(this.ecCurve.n), new BN(0));\n      const {\n        mc\n      } = sums[i];\n      const gU = this.ecCurve.g.mul(userShare);\n      const _gU = mc[0].add(mc[1].mul(new BN(99))); // master poly evaluated at x = 99\n      if (!gU.eq(_gU)) throw new Error(\"decrypted user shares inconsistent with poly commits\");\n      userShares.push(userShare);\n    }\n    const userFactorEncs = await Promise.all(userShares.map((userShare, i) => {\n      const pub = factorPubs[i];\n      return encrypt(Buffer.from(`04${pub.x.padStart(64, \"0\")}${pub.y.padStart(64, \"0\")}`, \"hex\"), Buffer.from(userShare.toString(16, 64), \"hex\"));\n    }));\n\n    // rearrange received serverEncs before sending them to new servers\n    const serverEncs = targetIndexes.map((_, i) => {\n      const serverEncsReceived = rssRound1Responses.map(r => r.data[i].target_encryptions.server_encs);\n      // flip the matrix\n      const serverEncsToSend = [];\n      for (let j = 0; j < this.serverEndpoints.length; j++) {\n        const serverEnc = [];\n\n        // Import only has T servers and the user, so it's T + 1\n        for (let k = 0; k < this.serverThreshold + 1; k++) {\n          serverEnc.push(serverEncsReceived[k][j]);\n        }\n        serverEncsToSend.push(serverEnc);\n      }\n      return serverEncsToSend;\n    });\n\n    // servers sum up their shares and encrypt it for factorPubs\n    const serverIndexes = this.serverEndpoints.map((_, i) => i + 1);\n    const serverFactorEncs = await Promise.all(serverIndexes.map(ind => {\n      // TODO: specify it's \"new\" server set for server indexes\n      const data = [];\n      targetIndexes.map((_, i) => {\n        const {\n          mc,\n          sc\n        } = sums[i];\n        const round2RequestData = {\n          master_commits: mc.map(hexPoint),\n          server_commits: sc.map(hexPoint),\n          server_encs: serverEncs[i][ind - 1],\n          factor_pubkeys: [factorPubs[i]] // TODO: must we do it like this?\n        };\n        data.push(round2RequestData);\n        return null;\n      });\n      const serverEndpoint = this.serverEndpoints[ind - 1];\n      return postEndpoint(serverEndpoint, \"/rss_round_2\", {\n        round_name: \"rss_round_2\",\n        server_index: ind,\n        target_index: targetIndexes,\n        data,\n        key_type: this.keyType\n      }).catch(e => log.error(e));\n    }));\n    if (serverFactorEncs.filter(s => s).length < this.serverThreshold) throw new Error(\"not enough servers responded\");\n    const factorEncs = [];\n    for (let i = 0; i < targetIndexes.length; i++) {\n      factorEncs.push({\n        targetIndex: targetIndexes[i],\n        factorPub: factorPubs[i],\n        serverFactorEncs: serverFactorEncs.map(s => s && s.data[i].encs[0]),\n        userFactorEnc: userFactorEncs[i]\n      });\n    }\n    return factorEncs;\n  }\n  async refresh(opts) {\n    const {\n      targetIndexes,\n      inputIndex,\n      selectedServers,\n      oldLabel,\n      newLabel,\n      sigs,\n      dkgNewPub,\n      inputShare,\n      factorPubs\n    } = opts;\n    if (factorPubs.length !== targetIndexes.length) throw new Error(\"inconsistent factorPubs and targetIndexes lengths\");\n    const serversInfo = {\n      pubkeys: this.serverPubKeys,\n      selected: selectedServers,\n      threshold: this.serverThreshold\n    };\n\n    // send requests to 2T servers\n    const rssRound1Proms = selectedServers.map(ind => {\n      const serverEndpoint = this.serverEndpoints[ind - 1];\n      return postEndpoint(serverEndpoint, \"/rss_round_1\", {\n        round_name: \"rss_round_1\",\n        server_set: \"old\",\n        server_index: ind,\n        old_servers_info: serversInfo,\n        new_servers_info: serversInfo,\n        old_user_share_index: inputIndex,\n        user_temp_pubkey: hexPoint(this.tempPubKey),\n        target_index: targetIndexes,\n        auth: {\n          label: oldLabel,\n          sigs\n        },\n        key_type: this.keyType\n      });\n    }).concat(selectedServers.map(ind => {\n      const serverEndpoint = this.serverEndpoints[ind - 1];\n      return postEndpoint(serverEndpoint, \"/rss_round_1\", {\n        round_name: \"rss_round_1\",\n        server_set: \"new\",\n        server_index: ind,\n        old_servers_info: serversInfo,\n        new_servers_info: serversInfo,\n        old_user_share_index: inputIndex,\n        user_temp_pubkey: hexPoint(this.tempPubKey),\n        target_index: targetIndexes,\n        auth: {\n          label: newLabel,\n          // TODO: undesigned\n          sigs\n        },\n        key_type: this.keyType\n      });\n    }));\n\n    // front end also generates hierarchical secret sharing\n    // - calculate lagrange coeffs\n    const _L = getLagrangeCoeff([1, inputIndex], inputIndex, 0, this.ecCurve.n);\n    const _finalLagrangeCoeffs = targetIndexes.map(target => _L.mul(getLagrangeCoeff([0, 1], 0, target, this.ecCurve.n)).umod(this.ecCurve.n));\n    const _masterPolys = [];\n    const _masterPolyCommits = [];\n    const _serverPolys = [];\n    const _serverPolyCommits = [];\n    const generateRandomScalar = () => this.ecCurve.genKeyPair().getPrivate();\n    for (let i = 0; i < _finalLagrangeCoeffs.length; i++) {\n      const _lc = _finalLagrangeCoeffs[i];\n      const _m = generatePolynomial(1, _lc.mul(inputShare).umod(this.ecCurve.n), generateRandomScalar);\n      _masterPolys.push(_m);\n      _masterPolyCommits.push(_m.map(coeff => {\n        const _gCoeff = this.ecCurve.g.mul(coeff);\n        return hexPoint(_gCoeff);\n      }));\n      const _s = generatePolynomial(serversInfo.threshold - 1, getShare(_m, 1, this.ecCurve.n), generateRandomScalar);\n      _serverPolys.push(_s);\n      _serverPolyCommits.push(_s.map(coeff => hexPoint(this.ecCurve.g.mul(coeff))));\n    }\n    const _serverEncs = [];\n    const _userEncs = [];\n    for (let i = 0; i < _masterPolys.length; i++) {\n      _serverEncs.push([]); // for each target_index, create an array of server encryptions\n    }\n    // - generate N + 1 shares\n    for (let i = 0; i < targetIndexes.length; i++) {\n      const _masterPoly = _masterPolys[i];\n      _userEncs.push(await encrypt(Buffer.from(`04${hexPoint(this.tempPubKey).x.padStart(64, \"0\")}${hexPoint(this.tempPubKey).y.padStart(64, \"0\")}`, \"hex\"), Buffer.from(getShare(_masterPoly, 99, this.ecCurve.n).toString(16, 64), \"hex\")));\n      const _serverPoly = _serverPolys[i];\n      const _serverEnc = _serverEncs[i];\n      for (let j = 0; j < serversInfo.pubkeys.length; j++) {\n        const _pub = serversInfo.pubkeys[j];\n        _serverEnc.push(await encrypt(Buffer.from(`04${_pub.x.padStart(64, \"0\")}${_pub.y.padStart(64, \"0\")}`, \"hex\"), Buffer.from(getShare(_serverPoly, j + 1, this.ecCurve.n).toString(16, 64), \"hex\")));\n      }\n    }\n    const _data = [];\n    for (let i = 0; i < targetIndexes.length; i++) {\n      _data.push({\n        master_poly_commits: _masterPolyCommits[i],\n        server_poly_commits: _serverPolyCommits[i],\n        target_encryptions: {\n          user_enc: _userEncs[i],\n          server_encs: _serverEncs[i]\n        }\n      });\n    }\n\n    // add front end generated hierarchical sharing to the list\n    rssRound1Proms.push(new Promise(resolve => {\n      resolve({\n        target_index: targetIndexes,\n        data: _data\n      });\n    }));\n\n    // await responses\n    const rssRound1Responses = await Promise.all(rssRound1Proms);\n\n    // sum up all master poly commits and sum up all server poly commits\n    const sums = targetIndexes.map((_, i) => {\n      for (let j = 0; j < rssRound1Responses.length; j++) {\n        const rssRound1ResponseData = rssRound1Responses[j].data[i];\n        const {\n          master_poly_commits: masterPolyCommits,\n          server_poly_commits: serverPolyCommits\n        } = rssRound1ResponseData;\n        if (masterPolyCommits.length !== 2) throw new Error(\"incorrect number of coeffs for master poly commits\");\n        if (serverPolyCommits.length !== this.serverThreshold) throw new Error(\"incorrect number of coeffs for server poly commits\");\n      }\n      let sumMasterPolyCommits = [];\n      let sumServerPolyCommits = [];\n      for (let j = 0; j < rssRound1Responses.length; j++) {\n        const rssRound1ResponseData = rssRound1Responses[j].data[i];\n        const {\n          master_poly_commits: masterPolyCommits,\n          server_poly_commits: serverPolyCommits\n        } = rssRound1ResponseData;\n        if (sumMasterPolyCommits.length === 0 && sumServerPolyCommits.length === 0) {\n          sumMasterPolyCommits = masterPolyCommits.map(p => ecPoint(this.ecCurve, p));\n          sumServerPolyCommits = serverPolyCommits.map(p => ecPoint(this.ecCurve, p));\n          continue;\n        }\n        sumMasterPolyCommits = sumMasterPolyCommits.map((summedCommit, k) => {\n          return ecPoint(this.ecCurve, masterPolyCommits[k]).add(summedCommit);\n        });\n        sumServerPolyCommits = sumServerPolyCommits.map((summedCommit, k) => {\n          return ecPoint(this.ecCurve, serverPolyCommits[k]).add(summedCommit);\n        });\n      }\n      return {\n        mc: sumMasterPolyCommits,\n        sc: sumServerPolyCommits\n      };\n    });\n\n    // front end checks\n    targetIndexes.map((target, i) => {\n      const {\n        mc,\n        sc\n      } = sums[i];\n      // check master poly commits are consistent with tssPubKey\n      const temp1 = ecPoint(this.ecCurve, dkgNewPub).mul(getLagrangeCoeff([1, target], 1, 0, this.ecCurve.n));\n      const temp2 = mc[0].mul(getLagrangeCoeff([1, target], target, 0, this.ecCurve.n));\n      const _tssPubKey = temp1.add(temp2);\n      if (!_tssPubKey.eq(this.tssPubKey)) throw new Error(\"master poly commits inconsistent with tssPubKey\");\n\n      // check server poly commits are consistent with master poly commits\n      if (!mc[0].add(mc[1]).eq(sc[0])) throw new Error(\"server poly commits inconsistent with master poly commits\");\n      return null;\n    });\n\n    // front end checks if decrypted user shares are consistent with poly commits\n    const privKeyBuffer = Buffer.from(this.tempPrivKey.toString(16, 64), \"hex\");\n    const userShares = [];\n    for (let i = 0; i < targetIndexes.length; i++) {\n      const userEncs = rssRound1Responses.map(r => r.data[i].target_encryptions.user_enc);\n      const userDecs = await Promise.all(userEncs.map(encMsg => decrypt(privKeyBuffer, encMsg)));\n      const userShare = userDecs.map(userDec => new BN(userDec)).reduce((acc, d) => acc.add(d).umod(this.ecCurve.n), new BN(0));\n      const {\n        mc\n      } = sums[i];\n      const gU = this.ecCurve.g.mul(userShare);\n      const _gU = mc[0].add(mc[1].mul(new BN(99))); // master poly evaluated at x = 99\n      if (!gU.eq(_gU)) throw new Error(\"decrypted user shares inconsistent with poly commits\");\n      userShares.push(userShare);\n    }\n    const userFactorEncs = await Promise.all(userShares.map((userShare, i) => {\n      const pub = factorPubs[i];\n      return encrypt(Buffer.from(`04${pub.x.padStart(64, \"0\")}${pub.y.padStart(64, \"0\")}`, \"hex\"), Buffer.from(userShare.toString(16, 64), \"hex\"));\n    }));\n\n    // rearrange received serverEncs before sending them to new servers\n    const serverEncs = targetIndexes.map((_, i) => {\n      const serverEncsReceived = rssRound1Responses.map(r => r.data[i].target_encryptions.server_encs);\n      // flip the matrix\n      const serverEncsToSend = [];\n      for (let j = 0; j < this.serverEndpoints.length; j++) {\n        const serverEnc = [];\n        for (let k = 0; k < this.serverThreshold * 2 + 1; k++) {\n          serverEnc.push(serverEncsReceived[k][j]);\n        }\n        serverEncsToSend.push(serverEnc);\n      }\n      return serverEncsToSend;\n    });\n\n    // servers sum up their shares and encrypt it for factorPubs\n    const serverIndexes = this.serverEndpoints.map((_, i) => i + 1);\n    const serverFactorEncs = await Promise.all(serverIndexes.map(ind => {\n      // TODO: specify it's \"new\" server set for server indexes\n      const data = [];\n      targetIndexes.map((_, i) => {\n        const {\n          mc,\n          sc\n        } = sums[i];\n        const round2RequestData = {\n          master_commits: mc.map(hexPoint),\n          server_commits: sc.map(hexPoint),\n          server_encs: serverEncs[i][ind - 1],\n          factor_pubkeys: [factorPubs[i]] // TODO: must we do it like this?\n        };\n        data.push(round2RequestData);\n        return null;\n      });\n      const serverEndpoint = this.serverEndpoints[ind - 1];\n      return postEndpoint(serverEndpoint, \"/rss_round_2\", {\n        round_name: \"rss_round_2\",\n        server_index: ind,\n        target_index: targetIndexes,\n        data,\n        key_type: this.keyType\n      }).catch(e => log.error(e));\n    }));\n    if (serverFactorEncs.filter(s => s).length < this.serverThreshold) throw new Error(\"not enough servers responded\");\n    const factorEncs = [];\n    for (let i = 0; i < targetIndexes.length; i++) {\n      factorEncs.push({\n        targetIndex: targetIndexes[i],\n        factorPub: factorPubs[i],\n        serverFactorEncs: serverFactorEncs.map(s => s && s.data[i].encs[0]),\n        userFactorEnc: userFactorEncs[i]\n      });\n    }\n    return factorEncs;\n  }\n}\nasync function recover(opts) {\n  const {\n    factorKey,\n    serverEncs,\n    userEnc,\n    selectedServers,\n    keyType\n  } = opts;\n  if (opts.keyType !== \"secp256k1\" && opts.keyType !== \"ed25519\") throw new Error(\"Invalid keyType, only secp256k1 or ed25519 is supported\");\n  const ecCurve = new ec(keyType);\n  const factorKeyBuf = Buffer.from(factorKey.toString(16, 64), \"hex\");\n  const prom1 = decrypt(factorKeyBuf, userEnc).then(buf => new BN(buf));\n  const prom2 = Promise.all(serverEncs.map(serverEnc => serverEnc && decrypt(factorKeyBuf, serverEnc).then(buf => new BN(buf))));\n  const [decryptedUserEnc, decryptedServerEncs] = await Promise.all([prom1, prom2]);\n  // use threshold number of factor encryptions from the servers to interpolate server share\n  const someDecrypted = decryptedServerEncs.filter((_, j) => selectedServers.indexOf(j + 1) >= 0);\n  const decryptedLCs = selectedServers.map(index => getLagrangeCoeff(selectedServers, index, 0, ecCurve.n));\n  const temp1 = decryptedUserEnc.mul(getLagrangeCoeff([1, 99], 99, 0, ecCurve.n));\n  const serverReconstructed = dotProduct(someDecrypted, decryptedLCs).umod(ecCurve.n);\n  const temp2 = serverReconstructed.mul(getLagrangeCoeff([1, 99], 1, 0, ecCurve.n));\n  const tssShare = temp1.add(temp2).umod(ecCurve.n);\n  return {\n    tssShare\n  };\n}\n\nexport { RSSClient, getEndpoint, postEndpoint, recover };\n", "import { ec as ec$1 } from 'elliptic';\n\nconst ec = new ec$1(\"secp256k1\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, n/no-unsupported-features/node-builtins\nconst browserCrypto = globalThis.crypto || globalThis.msCrypto || {};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;\nconst EC_GROUP_ORDER = Buffer.from(\"fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\", \"hex\");\nconst ZERO32 = Buffer.alloc(32, 0);\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || \"Assertion failed\");\n  }\n}\nfunction isScalar(x) {\n  return Buffer.isBuffer(x) && x.length === 32;\n}\nfunction isValidPrivateKey(privateKey) {\n  if (!isScalar(privateKey)) {\n    return false;\n  }\n  return privateKey.compare(ZERO32) > 0 &&\n  // > 0\n  privateKey.compare(EC_GROUP_ORDER) < 0; // < G\n}\n\n// Compare two buffers in constant time to prevent timing attacks.\nfunction equalConstTime(b1, b2) {\n  if (b1.length !== b2.length) {\n    return false;\n  }\n  let res = 0;\n  for (let i = 0; i < b1.length; i++) {\n    res |= b1[i] ^ b2[i]; // jshint ignore:line\n  }\n  return res === 0;\n}\n\n/* This must check if we're in the browser or\nnot, since the functions are different and does\nnot convert using browserify */\nfunction randomBytes(size) {\n  if (typeof browserCrypto.getRandomValues === \"undefined\") {\n    return Buffer.from(browserCrypto.randomBytes(size));\n  }\n  const arr = new Uint8Array(size);\n  browserCrypto.getRandomValues(arr);\n  return Buffer.from(arr);\n}\nasync function sha512(msg) {\n  if (!browserCrypto.createHash) {\n    const hash = await subtle.digest(\"SHA-512\", msg);\n    const result = new Uint8Array(hash);\n    return result;\n  }\n  const hash = browserCrypto.createHash(\"sha512\");\n  const result = hash.update(msg).digest();\n  return new Uint8Array(result);\n}\nfunction getAes(op) {\n  return async function (iv, key, data) {\n    if (subtle && subtle[op] && subtle.importKey) {\n      const importAlgorithm = {\n        name: \"AES-CBC\"\n      };\n      const cryptoKey = await subtle.importKey(\"raw\", key, importAlgorithm, false, [op]);\n      const encAlgorithm = {\n        name: \"AES-CBC\",\n        iv\n      };\n      // encrypt and decrypt ops are not implemented in react-native-quick-crypto yet.\n      const result = await subtle[op](encAlgorithm, cryptoKey, data);\n      return Buffer.from(new Uint8Array(result));\n    } else if (op === \"encrypt\" && browserCrypto.createCipheriv) {\n      // This is available if crypto is polyfilled in react native environment\n      const cipher = browserCrypto.createCipheriv(\"aes-256-cbc\", key, iv);\n      const firstChunk = cipher.update(data);\n      const secondChunk = cipher.final();\n      return Buffer.concat([firstChunk, secondChunk]);\n    } else if (op === \"decrypt\" && browserCrypto.createDecipheriv) {\n      const decipher = browserCrypto.createDecipheriv(\"aes-256-cbc\", key, iv);\n      const firstChunk = decipher.update(data);\n      const secondChunk = decipher.final();\n      return Buffer.concat([firstChunk, secondChunk]);\n    }\n    throw new Error(`Unsupported operation: ${op}`);\n  };\n}\nconst aesCbcEncrypt = getAes(\"encrypt\");\nconst aesCbcDecrypt = getAes(\"decrypt\");\nasync function hmacSha256Sign(key, msg) {\n  if (!browserCrypto.createHmac) {\n    const importAlgorithm = {\n      name: \"HMAC\",\n      hash: {\n        name: \"SHA-256\"\n      }\n    };\n    const cryptoKey = await subtle.importKey(\"raw\", new Uint8Array(key), importAlgorithm, false, [\"sign\", \"verify\"]);\n    const sig = await subtle.sign(\"HMAC\", cryptoKey, msg);\n    const result = Buffer.from(new Uint8Array(sig));\n    return result;\n  }\n  const hmac = browserCrypto.createHmac(\"sha256\", Buffer.from(key));\n  hmac.update(msg);\n  const result = hmac.digest();\n  return result;\n}\nasync function hmacSha256Verify(key, msg, sig) {\n  const expectedSig = await hmacSha256Sign(key, msg);\n  return equalConstTime(expectedSig, sig);\n}\n\n/**\n * Generate a new valid private key. Will use the window.crypto or window.msCrypto as source\n * depending on your browser.\n */\nconst generatePrivate = function () {\n  let privateKey = randomBytes(32);\n  while (!isValidPrivateKey(privateKey)) {\n    privateKey = randomBytes(32);\n  }\n  return privateKey;\n};\nconst getPublic = function (privateKey) {\n  // This function has sync API so we throw an error immediately.\n  assert(privateKey.length === 32, \"Bad private key\");\n  assert(isValidPrivateKey(privateKey), \"Bad private key\");\n  // XXX(Kagami): `elliptic.utils.encode` returns array for every\n  // encoding except `hex`.\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(\"array\"));\n};\n\n/**\n * Get compressed version of public key.\n */\nconst getPublicCompressed = function (privateKey) {\n  // jshint ignore:line\n  assert(privateKey.length === 32, \"Bad private key\");\n  assert(isValidPrivateKey(privateKey), \"Bad private key\");\n  // See https://github.com/wanderer/secp256k1-node/issues/46\n  const compressed = true;\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, \"array\"));\n};\n\n// NOTE(Kagami): We don't use promise shim in Browser implementation\n// because it's supported natively in new browsers (see\n// <http://caniuse.com/#feat=promises>) and we can use only new browsers\n// because of the WebCryptoAPI (see\n// <http://caniuse.com/#feat=cryptography>).\nconst sign = async function (privateKey, msg) {\n  assert(privateKey.length === 32, \"Bad private key\");\n  assert(isValidPrivateKey(privateKey), \"Bad private key\");\n  assert(msg.length > 0, \"Message should not be empty\");\n  assert(msg.length <= 32, \"Message is too long\");\n  return Buffer.from(ec.sign(msg, privateKey, {\n    canonical: true\n  }).toDER());\n};\nconst verify = async function (publicKey, msg, sig) {\n  assert(publicKey.length === 65 || publicKey.length === 33, \"Bad public key\");\n  if (publicKey.length === 65) {\n    assert(publicKey[0] === 4, \"Bad public key\");\n  }\n  if (publicKey.length === 33) {\n    assert(publicKey[0] === 2 || publicKey[0] === 3, \"Bad public key\");\n  }\n  assert(msg.length > 0, \"Message should not be empty\");\n  assert(msg.length <= 32, \"Message is too long\");\n  if (ec.verify(msg, sig, publicKey)) {\n    return null;\n  }\n  throw new Error(\"Bad signature\");\n};\nconst derive = async function (privateKeyA, publicKeyB) {\n  assert(Buffer.isBuffer(privateKeyA), \"Bad private key\");\n  assert(Buffer.isBuffer(publicKeyB), \"Bad public key\");\n  assert(privateKeyA.length === 32, \"Bad private key\");\n  assert(isValidPrivateKey(privateKeyA), \"Bad private key\");\n  assert(publicKeyB.length === 65 || publicKeyB.length === 33, \"Bad public key\");\n  if (publicKeyB.length === 65) {\n    assert(publicKeyB[0] === 4, \"Bad public key\");\n  }\n  if (publicKeyB.length === 33) {\n    assert(publicKeyB[0] === 2 || publicKeyB[0] === 3, \"Bad public key\");\n  }\n  const keyA = ec.keyFromPrivate(privateKeyA);\n  const keyB = ec.keyFromPublic(publicKeyB);\n  const Px = keyA.derive(keyB.getPublic()); // BN instance\n  return Buffer.from(Px.toArray());\n};\nconst deriveUnpadded = derive;\nconst derivePadded = async function (privateKeyA, publicKeyB) {\n  assert(Buffer.isBuffer(privateKeyA), \"Bad private key\");\n  assert(Buffer.isBuffer(publicKeyB), \"Bad public key\");\n  assert(privateKeyA.length === 32, \"Bad private key\");\n  assert(isValidPrivateKey(privateKeyA), \"Bad private key\");\n  assert(publicKeyB.length === 65 || publicKeyB.length === 33, \"Bad public key\");\n  if (publicKeyB.length === 65) {\n    assert(publicKeyB[0] === 4, \"Bad public key\");\n  }\n  if (publicKeyB.length === 33) {\n    assert(publicKeyB[0] === 2 || publicKeyB[0] === 3, \"Bad public key\");\n  }\n  const keyA = ec.keyFromPrivate(privateKeyA);\n  const keyB = ec.keyFromPublic(publicKeyB);\n  const Px = keyA.derive(keyB.getPublic()); // BN instance\n  return Buffer.from(Px.toString(16, 64), \"hex\");\n};\nconst encrypt = async function (publicKeyTo, msg, opts) {\n  opts = opts || {};\n  let ephemPrivateKey = opts.ephemPrivateKey || randomBytes(32);\n  // There is a very unlikely possibility that it is not a valid key\n  while (!isValidPrivateKey(ephemPrivateKey)) {\n    ephemPrivateKey = opts.ephemPrivateKey || randomBytes(32);\n  }\n  const ephemPublicKey = getPublic(ephemPrivateKey);\n  const Px = await deriveUnpadded(ephemPrivateKey, publicKeyTo);\n  const hash = await sha512(Px);\n  const iv = opts.iv || randomBytes(16);\n  const encryptionKey = hash.slice(0, 32);\n  const macKey = hash.slice(32);\n  const data = await aesCbcEncrypt(iv, Buffer.from(encryptionKey), msg);\n  const ciphertext = data;\n  const dataToMac = Buffer.concat([iv, ephemPublicKey, ciphertext]);\n  const mac = await hmacSha256Sign(Buffer.from(macKey), dataToMac);\n  return {\n    iv,\n    ephemPublicKey,\n    ciphertext,\n    mac\n  };\n};\nconst decrypt = async function (privateKey, opts, _padding) {\n  const padding = _padding !== null && _padding !== void 0 ? _padding : false;\n  const deriveLocal = padding ? derivePadded : deriveUnpadded;\n  const Px = await deriveLocal(privateKey, opts.ephemPublicKey);\n  const hash = await sha512(Px);\n  const encryptionKey = hash.slice(0, 32);\n  const macKey = hash.slice(32);\n  const dataToMac = Buffer.concat([opts.iv, opts.ephemPublicKey, opts.ciphertext]);\n  const macGood = await hmacSha256Verify(Buffer.from(macKey), dataToMac, opts.mac);\n  if (!macGood && padding === false) {\n    return decrypt(privateKey, opts, true);\n  } else if (!macGood && padding === true) {\n    throw new Error(\"bad MAC after trying padded\");\n  }\n  const msg = await aesCbcDecrypt(opts.iv, Buffer.from(encryptionKey), opts.ciphertext);\n  return Buffer.from(new Uint8Array(msg));\n};\n\nexport { decrypt, derive, derivePadded, deriveUnpadded, encrypt, generatePrivate, getPublic, getPublicCompressed, sign, verify };\n", "import { encrypt as encrypt$1, decrypt as decrypt$1 } from '@toruslabs/eccrypto';\nimport BN from 'bn.js';\nimport { ec } from 'elliptic';\n\nconst ecCurveSecp256k1 = new ec(\"secp256k1\");\nfunction randomSelection(arr, num) {\n  if (num > arr.length) throw new Error(\"trying to select more elements than available\");\n  const selected = [];\n  const slice = arr.slice();\n  while (selected.length < num) {\n    selected.push(slice.splice(Math.floor(Math.random() * slice.length), 1)[0]);\n  }\n  return selected;\n}\nfunction ecPoint(ecCurve, p) {\n  if (p.x === null && p.y === null) {\n    return ecCurve.curve.g.add(ecCurve.curve.g.neg());\n  }\n  return ecCurve.keyFromPublic({\n    x: p.x.padStart(64, \"0\"),\n    y: p.y.padStart(64, \"0\")\n  }).getPublic();\n}\nfunction hexPoint(p) {\n  if (p.isInfinity()) {\n    return {\n      x: null,\n      y: null\n    };\n  }\n  return {\n    x: p.getX().toString(16, 64),\n    y: p.getY().toString(16, 64)\n  };\n}\n// Wrappers around ECC encrypt/decrypt to use the hex serialization\nasync function encrypt(publicKey, msg) {\n  const encryptedDetails = await encrypt$1(publicKey, msg);\n  return {\n    ciphertext: encryptedDetails.ciphertext.toString(\"hex\"),\n    ephemPublicKey: encryptedDetails.ephemPublicKey.toString(\"hex\"),\n    iv: encryptedDetails.iv.toString(\"hex\"),\n    mac: encryptedDetails.mac.toString(\"hex\")\n  };\n}\nasync function decrypt(privKey, msg) {\n  const bufferEncDetails = {\n    ciphertext: Buffer.from(msg.ciphertext, \"hex\"),\n    ephemPublicKey: Buffer.from(msg.ephemPublicKey, \"hex\"),\n    iv: Buffer.from(msg.iv, \"hex\"),\n    mac: Buffer.from(msg.mac, \"hex\")\n  };\n  return decrypt$1(privKey, bufferEncDetails);\n}\nfunction generatePolynomial(degree, yIntercept, randomElement) {\n  const res = [];\n  let i = 0;\n  if (yIntercept !== undefined) {\n    res.push(yIntercept);\n    i++;\n  }\n  for (; i <= degree; i++) {\n    res.push(randomElement());\n  }\n  return res;\n}\nfunction getShare(polynomial, index, modulus) {\n  let res = new BN(0);\n  for (let i = 0; i < polynomial.length; i++) {\n    const term = polynomial[i].mul(new BN(index).pow(new BN(i)));\n    res = res.add(term.umod(modulus));\n  }\n  return res.umod(modulus);\n}\nfunction dotProduct(arr1, arr2, modulus) {\n  if (arr1.length !== arr2.length) {\n    throw new Error(\"arrays of different lengths\");\n  }\n  let sum = new BN(0);\n  for (let i = 0; i < arr1.length; i++) {\n    sum = sum.add(arr1[i].mul(arr2[i]));\n    if (modulus) {\n      sum = sum.umod(modulus);\n    }\n  }\n  return sum;\n}\nfunction getLagrangeCoeff(_allIndexes, _myIndex, _target, modulus) {\n  const allIndexes = _allIndexes.map(i => new BN(i));\n  const myIndex = new BN(_myIndex);\n  const target = new BN(_target);\n  let upper = new BN(1);\n  let lower = new BN(1);\n  for (let j = 0; j < allIndexes.length; j += 1) {\n    if (myIndex.cmp(allIndexes[j]) !== 0) {\n      let tempUpper = target.sub(allIndexes[j]);\n      tempUpper = tempUpper.umod(modulus);\n      upper = upper.mul(tempUpper);\n      upper = upper.umod(modulus);\n      let tempLower = myIndex.sub(allIndexes[j]);\n      tempLower = tempLower.umod(modulus);\n      lower = lower.mul(tempLower).umod(modulus);\n    }\n  }\n  return upper.mul(lower.invm(modulus)).umod(modulus);\n}\nfunction lagrangeInterpolation(shares, nodeIndex, modulus) {\n  if (shares.length !== nodeIndex.length) {\n    return null;\n  }\n  let secret = new BN(0);\n  for (let i = 0; i < shares.length; i += 1) {\n    let upper = new BN(1);\n    let lower = new BN(1);\n    for (let j = 0; j < shares.length; j += 1) {\n      if (i !== j) {\n        upper = upper.mul(nodeIndex[j].neg());\n        upper = upper.umod(modulus);\n        let temp = nodeIndex[i].sub(nodeIndex[j]);\n        temp = temp.umod(modulus);\n        lower = lower.mul(temp).umod(modulus);\n      }\n    }\n    let delta = upper.mul(lower.invm(modulus)).umod(modulus);\n    delta = delta.mul(shares[i]).umod(modulus);\n    secret = secret.add(delta);\n  }\n  return secret.umod(modulus);\n}\n\nexport { decrypt, dotProduct, ecCurveSecp256k1, ecPoint, encrypt, generatePolynomial, getLagrangeCoeff, getShare, hexPoint, lagrangeInterpolation, randomSelection };\n", "import _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { decrypt, Point, KeyType, encrypt, secp256k1 } from '@tkey/common-types';\nimport { TKey, CoreError } from '@tkey/core';\nimport { dotProduct, hexPoint, randomSelection, RSSClient, ecPoint } from '@toruslabs/rss-client';\nimport { getEd25519ExtendedPublicKey, getSecpKeyFromEd25519 } from '@toruslabs/torus.js';\nimport BN from 'bn.js';\nimport { ec } from 'elliptic';\nimport { keccak256 } from 'ethereum-cryptography/keccak';\nimport { generateSalt, getPubKeyPoint, kCombinations, getLagrangeCoeffs, getEd25519SeedStoreDomainKey, pointToHex, lagrangeInterpolation } from './util.js';\n\nconst TSS_MODULE = \"tssModule\";\nconst TSS_TAG_DEFAULT = \"default\";\nconst FACTOR_KEY_TYPE = \"secp256k1\";\nconst factorKeyCurve = new ec(FACTOR_KEY_TYPE);\nconst LEGACY_KEY_TYPE = \"secp256k1\";\nclass TKeyTSS extends TKey {\n  /**\n   * Constructs a new TKeyTSS instance using the given parameters.\n   */\n  constructor(args) {\n    super(args);\n    _defineProperty(this, \"serviceProvider\", null);\n    _defineProperty(this, \"_tssKeyType\", void 0);\n    _defineProperty(this, \"_tssCurve\", void 0);\n    _defineProperty(this, \"_tssTag\", void 0);\n    _defineProperty(this, \"_accountSalt\", void 0);\n    const {\n      serviceProvider,\n      storageLayer,\n      tssTag = \"default\",\n      tssKeyType\n    } = args;\n    if (serviceProvider.customAuthArgs.keyType !== tssKeyType) {\n      throw CoreError.default(`service provider keyType mismatch: ${serviceProvider.customAuthArgs.keyType} !== ${tssKeyType}`);\n    }\n    this.serviceProvider = serviceProvider;\n    this.storageLayer = storageLayer;\n    this._tssTag = tssTag;\n    this._tssKeyType = tssKeyType;\n    this._tssCurve = new ec(tssKeyType);\n  }\n  get tssTag() {\n    return this._tssTag;\n  }\n  get tssKeyType() {\n    return this._tssKeyType;\n  }\n  get tssCurve() {\n    return this._tssCurve;\n  }\n  set tssTag(tag) {\n    if ((this.metadata.tssKeyTypes[this.tssTag] || LEGACY_KEY_TYPE) !== this.tssKeyType) {\n      throw CoreError.default(`tssKeyType mismatch: ${this.metadata.tssKeyTypes[this.tssTag]} !== ${this.tssKeyType}`);\n    }\n    this._tssTag = tag;\n  }\n\n  /**\n   * Initializes this instance. If a TSS account does not exist, creates one\n   * under the given factor key. `skipTssInit` skips TSS account creation and\n   * can be used with `importTssKey` to just import an existing account instead.\n   * @returns The key details of TKey core.\n   */\n  async initialize(params) {\n    const keyDetails = await super.initialize(params);\n    if (!this.metadata.tssPolyCommits[this.tssTag] && !(params !== null && params !== void 0 && params.skipTssInit || params !== null && params !== void 0 && params.neverInitializeNewKey)) {\n      // if tss shares have not been created for this tssTag, create new tss sharing\n      const {\n        factorEncs,\n        factorPubs,\n        tssPolyCommits\n      } = await this._initializeNewTSSKey(this.tssTag, params.deviceTSSShare, params.factorPub, params.deviceTSSIndex);\n      this.metadata.updateTSSData({\n        tssKeyType: this._tssKeyType,\n        tssTag: this.tssTag,\n        tssNonce: 0,\n        tssPolyCommits,\n        factorPubs,\n        factorEncs\n      });\n      const accountSalt = generateSalt(this._tssCurve);\n      await this._setTKeyStoreItem(TSS_MODULE, {\n        id: \"accountSalt\",\n        value: accountSalt\n      });\n      this._accountSalt = accountSalt;\n    }\n    if (this.metadata.tssPolyCommits[this.tssTag] && (this.metadata.tssKeyTypes[this.tssTag] || LEGACY_KEY_TYPE) !== this.tssKeyType) {\n      throw CoreError.default(`tssKeyType mismatch: ${this.metadata.tssKeyTypes[this.tssTag]} !== ${this.tssKeyType}`);\n    }\n    return keyDetails;\n  }\n\n  /**\n   * Returns the encrypted data associated with the given factor public key.\n   */\n  getFactorEncs(factorPub) {\n    if (!this.metadata) throw CoreError.metadataUndefined();\n    if (!this.metadata.factorEncs) throw CoreError.default(\"no factor encs mapping\");\n    if (!this.metadata.factorPubs) throw CoreError.default(\"no factor pubs mapping\");\n    const factorPubs = this.metadata.factorPubs[this.tssTag];\n    if (!factorPubs) throw CoreError.default(`no factor pubs for this tssTag ${this.tssTag}`);\n    if (factorPubs.filter(f => f.x.cmp(factorPub.x) === 0 && f.y.cmp(factorPub.y) === 0).length === 0) throw CoreError.default(`factor pub ${factorPub} not found for tssTag ${this.tssTag}`);\n    if (!this.metadata.factorEncs[this.tssTag]) throw CoreError.default(`no factor encs for tssTag ${this.tssTag}`);\n    const factorPubID = factorPub.x.toString(16, 64);\n    return this.metadata.factorEncs[this.tssTag][factorPubID];\n  }\n\n  /**\n   * Returns the TSS share associated with the given factor private key.\n   */\n  async getTSSShare(factorKey, opts) {\n    const factorPub = getPubKeyPoint(factorKey, factorKeyCurve);\n    const factorEncs = this.getFactorEncs(factorPub);\n    const {\n      userEnc,\n      serverEncs,\n      tssIndex,\n      type\n    } = factorEncs;\n    const userDecryption = await decrypt(Buffer.from(factorKey.toString(16, 64), \"hex\"), userEnc);\n    const serverDecryptions = await Promise.all(serverEncs.map(factorEnc => {\n      if (factorEnc === null) return null;\n      return decrypt(Buffer.from(factorKey.toString(16, 64), \"hex\"), factorEnc);\n    }));\n    const tssShareBufs = [userDecryption].concat(serverDecryptions);\n    const tssShareBNs = tssShareBufs.map(buf => {\n      if (buf === null) return null;\n      return new BN(buf);\n    });\n    const ec = this._tssCurve;\n    const tssCommits = this.getTSSCommits().map(p => {\n      return ec.keyFromPublic({\n        x: p.x.toString(16, 64),\n        y: p.y.toString(16, 64)\n      }).getPublic();\n    });\n    const userDec = tssShareBNs[0];\n    const accountIndex = (opts === null || opts === void 0 ? void 0 : opts.accountIndex) || 0;\n    const coefficient = (opts === null || opts === void 0 ? void 0 : opts.coefficient) || new BN(1);\n    if (type === \"direct\") {\n      const tssSharePub = ec.g.mul(userDec);\n      const tssCommitA0 = tssCommits[0];\n      const tssCommitA1 = tssCommits[1];\n      const _tssSharePub = tssCommitA0.add(tssCommitA1.mul(new BN(tssIndex)));\n      if (tssSharePub.eq(_tssSharePub)) {\n        const adjustedShare = this.adjustTssShare(userDec, accountIndex, coefficient);\n        return {\n          tssIndex,\n          tssShare: adjustedShare\n        };\n      }\n      throw new Error(\"user decryption does not match tss commitments...\");\n    }\n\n    // if type === \"hierarchical\"\n    const serverDecs = tssShareBNs.slice(1); // 5 elems\n    const serverIndexes = new Array(serverDecs.length).fill(null).map((_, i) => i + 1);\n    const threshold = (opts === null || opts === void 0 ? void 0 : opts.threshold) || Math.ceil(serverDecs.length / 2);\n    const combis = kCombinations(serverDecs.length, threshold);\n    for (let i = 0; i < combis.length; i++) {\n      const combi = combis[i];\n      const selectedServerDecs = serverDecs.filter((_, j) => combi.indexOf(j) > -1);\n      if (selectedServerDecs.includes(null)) continue;\n      const selectedServerIndexes = serverIndexes.filter((_, j) => combi.indexOf(j) > -1);\n      const serverLagrangeCoeffs = selectedServerIndexes.map(x => getLagrangeCoeffs(ec, selectedServerIndexes, x));\n      const serverInterpolated = dotProduct(serverLagrangeCoeffs, selectedServerDecs, ec.n);\n      const lagrangeCoeffs = [getLagrangeCoeffs(ec, [1, 99], 1), getLagrangeCoeffs(ec, [1, 99], 99)];\n      const tssShare = dotProduct(lagrangeCoeffs, [serverInterpolated, userDec], ec.n);\n      const tssSharePub = ec.g.mul(tssShare);\n      const tssCommitA0 = tssCommits[0];\n      const tssCommitA1 = tssCommits[1];\n      let _tssSharePub = tssCommitA0;\n      for (let j = 0; j < tssIndex; j++) {\n        _tssSharePub = _tssSharePub.add(tssCommitA1);\n      }\n      if (tssSharePub.eq(_tssSharePub)) {\n        const adjustedShare = this.adjustTssShare(tssShare, accountIndex, coefficient);\n        return {\n          tssIndex,\n          tssShare: adjustedShare\n        };\n      }\n    }\n    throw new Error(\"could not find any combination of server decryptions that match tss commitments...\");\n  }\n\n  /**\n   * Returns the TSS public key and the curve points corresponding to secret key\n   * shares, as stored in Metadata.\n   */\n  getTSSCommits() {\n    if (!this.metadata) throw CoreError.metadataUndefined();\n    const tssPolyCommits = this.metadata.tssPolyCommits[this.tssTag];\n    if (!tssPolyCommits) throw CoreError.default(`tss poly commits not found for tssTag ${this.tssTag}`);\n    if (tssPolyCommits.length === 0) throw CoreError.default(\"tss poly commits is empty\");\n    return tssPolyCommits;\n  }\n\n  /**\n   * Returns the TSS public key.\n   */\n  getTSSPub(accountIndex) {\n    const ec = this._tssCurve;\n    const tssCommits = this.getTSSCommits();\n    if (accountIndex && accountIndex > 0) {\n      // Add account nonce to pub key.\n      const nonce = this.computeAccountNonce(accountIndex);\n      const noncePub = ec.keyFromPrivate(nonce.toString(\"hex\")).getPublic();\n      const pubKeyPoint = tssCommits[0].toEllipticPoint(ec);\n      const devicePubKeyPoint = pubKeyPoint.add(noncePub);\n      return Point.fromElliptic(devicePubKeyPoint);\n    }\n    return tssCommits[0];\n  }\n\n  /**\n   * Returns the node details for RSS.\n   */\n  async _getRssNodeDetails() {\n    const {\n      serverEndpoints,\n      serverPubKeys,\n      serverThreshold\n    } = await this.serviceProvider.getRSSNodeDetails();\n    if (!Array.isArray(serverEndpoints) || serverEndpoints.length === 0) throw new Error(\"service provider tss server endpoints are missing\");\n    if (!Array.isArray(serverPubKeys) || serverPubKeys.length === 0) throw new Error(\"service provider pub keys are missing\");\n    return {\n      serverEndpoints,\n      serverPubKeys,\n      serverThreshold: serverThreshold || Math.floor(serverEndpoints.length / 2) + 1\n    };\n  }\n\n  /**\n   * Imports an existing private key for threshold signing. A corresponding user\n   * key share will be stored under the specified factor key.\n   */\n  async importTssKey(params, serverOpts) {\n    const ec = this._tssCurve;\n    if (!this.secp256k1Key) throw CoreError.privateKeyUnavailable();\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const {\n      importKey,\n      factorPub,\n      newTSSIndex,\n      tag\n    } = params;\n    const oldTag = this.tssTag;\n    this._tssTag = tag;\n    try {\n      const {\n        selectedServers = [],\n        authSignatures = []\n      } = serverOpts || {};\n      if (!tag) throw CoreError.default(`invalid param, tag is required`);\n      if (!factorPub) throw CoreError.default(`invalid param, newFactorPub is required`);\n      if (!newTSSIndex) throw CoreError.default(`invalid param, newTSSIndex is required`);\n      if (authSignatures.length === 0) throw CoreError.default(`invalid param, authSignatures is required`);\n      const existingFactorPubs = this.metadata.factorPubs[tag];\n      if ((existingFactorPubs === null || existingFactorPubs === void 0 ? void 0 : existingFactorPubs.length) > 0) {\n        throw CoreError.default(`Duplicate account tag, please use a unique tag for importing key`);\n      }\n      const factorPubs = [factorPub];\n      const importScalar = await (async () => {\n        if (this._tssKeyType === KeyType.secp256k1) {\n          return new BN(importKey);\n        } else if (this._tssKeyType === KeyType.ed25519) {\n          // Store seed in metadata.\n          const domainKey = getEd25519SeedStoreDomainKey(this.tssTag || TSS_TAG_DEFAULT);\n          const result = this.metadata.getGeneralStoreDomain(domainKey);\n          if (result) {\n            throw new Error(\"Seed already exists\");\n          }\n          const {\n            scalar\n          } = getEd25519ExtendedPublicKey(importKey);\n          const encKey = Buffer.from(getSecpKeyFromEd25519(scalar).point.encodeCompressed(\"hex\"), \"hex\");\n          const msg = await encrypt(encKey, importKey);\n          this.metadata.setGeneralStoreDomain(domainKey, {\n            message: msg\n          });\n          return scalar;\n        }\n        throw new Error(\"Invalid key type\");\n      })();\n      if (!importScalar || importScalar.eq(new BN(\"0\"))) {\n        throw new Error(\"Invalid importedKey\");\n      }\n      const tssIndexes = [newTSSIndex];\n      const existingNonce = this.metadata.tssNonces[this.tssTag];\n      const newTssNonce = existingNonce && existingNonce > 0 ? existingNonce + 1 : 0;\n      const verifierAndVerifierID = this.serviceProvider.getVerifierNameVerifierId();\n      const label = `${verifierAndVerifierID}\\u0015${this.tssTag}\\u0016${newTssNonce}`;\n      const tssPubKey = hexPoint(ec.g.mul(importScalar));\n      const rssNodeDetails = await this._getRssNodeDetails();\n      const {\n        pubKey: newTSSServerPub,\n        nodeIndexes\n      } = await this.serviceProvider.getTSSPubKey(this.tssTag, newTssNonce);\n      let finalSelectedServers = selectedServers;\n      if ((nodeIndexes === null || nodeIndexes === void 0 ? void 0 : nodeIndexes.length) > 0) {\n        if (selectedServers.length) {\n          finalSelectedServers = nodeIndexes.slice(0, Math.min(selectedServers.length, nodeIndexes.length));\n        } else {\n          finalSelectedServers = nodeIndexes.slice(0, 3);\n        }\n      } else if ((selectedServers === null || selectedServers === void 0 ? void 0 : selectedServers.length) === 0) {\n        finalSelectedServers = randomSelection(new Array(rssNodeDetails.serverEndpoints.length).fill(null).map((_, i) => i + 1), Math.ceil(rssNodeDetails.serverEndpoints.length / 2));\n      }\n      const {\n        serverEndpoints,\n        serverPubKeys,\n        serverThreshold\n      } = rssNodeDetails;\n      const rssClient = new RSSClient({\n        serverEndpoints,\n        serverPubKeys,\n        serverThreshold,\n        tssPubKey,\n        keyType: this._tssKeyType\n      });\n      const refreshResponses = await rssClient.import({\n        importKey: importScalar,\n        dkgNewPub: pointToHex(newTSSServerPub),\n        selectedServers: finalSelectedServers,\n        factorPubs: factorPubs.map(f => pointToHex(f)),\n        targetIndexes: tssIndexes,\n        newLabel: label,\n        sigs: authSignatures\n      });\n      const secondCommit = newTSSServerPub.toEllipticPoint(ec).add(ecPoint(ec, tssPubKey).neg());\n      const newTSSCommits = [Point.fromJSON(tssPubKey), Point.fromJSON({\n        x: secondCommit.getX().toString(16, 64),\n        y: secondCommit.getY().toString(16, 64)\n      })];\n      const factorEncs = {};\n      for (let i = 0; i < refreshResponses.length; i++) {\n        const refreshResponse = refreshResponses[i];\n        factorEncs[refreshResponse.factorPub.x.padStart(64, \"0\")] = {\n          type: \"hierarchical\",\n          tssIndex: refreshResponse.targetIndex,\n          userEnc: refreshResponse.userFactorEnc,\n          serverEncs: refreshResponse.serverFactorEncs\n        };\n      }\n      this.metadata.updateTSSData({\n        tssKeyType: this._tssKeyType,\n        tssTag: this.tssTag,\n        tssNonce: newTssNonce,\n        tssPolyCommits: newTSSCommits,\n        factorPubs,\n        factorEncs\n      });\n      if (!this._accountSalt) {\n        const accountSalt = generateSalt(this._tssCurve);\n        await this._setTKeyStoreItem(TSS_MODULE, {\n          id: \"accountSalt\",\n          value: accountSalt\n        });\n        this._accountSalt = accountSalt;\n      }\n      await this._syncShareMetadata();\n    } catch (error) {\n      this._tssTag = oldTag;\n      throw error;\n    }\n  }\n\n  /**\n   * UNSAFE: USE WITH CAUTION\n   *\n   * Reconstructs and exports the TSS private key.\n   */\n  async _UNSAFE_exportTssKey(tssOptions) {\n    if (!this.metadata) throw CoreError.metadataUndefined(\"metadata is undefined\");\n    if (!this.secp256k1Key) throw new Error(\"Tkey is not reconstructed\");\n    if (!this.metadata.tssPolyCommits[this.tssTag]) throw new Error(`tss key has not been initialized for tssTag ${this.tssTag}`);\n    const {\n      factorKey,\n      selectedServers,\n      authSignatures,\n      accountIndex\n    } = tssOptions;\n    const {\n      tssIndex\n    } = await this.getTSSShare(factorKey);\n    // Assumption that there are only index 2 and 3 for tss shares\n    // create complement index share\n    const tempShareIndex = tssIndex === 2 ? 3 : 2;\n    const tempFactorKey = factorKeyCurve.genKeyPair().getPrivate();\n    const tempFactorPub = getPubKeyPoint(tempFactorKey, factorKeyCurve);\n    await this.addFactorPub({\n      existingFactorKey: factorKey,\n      newFactorPub: tempFactorPub,\n      newTSSIndex: tempShareIndex,\n      authSignatures,\n      selectedServers,\n      refreshShares: true\n    });\n    const {\n      tssShare: factorShare,\n      tssIndex: factorIndex\n    } = await this.getTSSShare(factorKey);\n    const {\n      tssShare: tempShare,\n      tssIndex: tempIndex\n    } = await this.getTSSShare(tempFactorKey);\n\n    // reconstruct final key using sss\n    const ec = this._tssCurve;\n    const tssKey = lagrangeInterpolation(ec, [tempShare, factorShare], [new BN(tempIndex), new BN(factorIndex)]);\n\n    // delete created tss share\n    await this.deleteFactorPub({\n      factorKey,\n      deleteFactorPub: tempFactorPub,\n      authSignatures,\n      selectedServers\n    });\n\n    // Derive key for account index.\n    const nonce = this.computeAccountNonce(accountIndex);\n    const derivedKey = tssKey.add(nonce).umod(this._tssCurve.n);\n    return derivedKey;\n  }\n\n  /**\n   * UNSAFE: USE WITH CAUTION\n   *\n   * Reconstructs the TSS private key and exports the ed25519 private key seed.\n   */\n  async _UNSAFE_exportTssEd25519Seed(tssOptions) {\n    const edScalar = await this._UNSAFE_exportTssKey(tssOptions);\n\n    // Try to export ed25519 seed. This is only available if import key was being used.\n    const domainKey = getEd25519SeedStoreDomainKey(this.tssTag || TSS_TAG_DEFAULT);\n    const result = this.metadata.getGeneralStoreDomain(domainKey);\n    const decKey = getSecpKeyFromEd25519(edScalar).scalar;\n    const seed = await decrypt(decKey.toArrayLike(Buffer, \"be\", 32), result.message);\n    return seed;\n  }\n\n  /**\n   * Runs the share refresh protocol for the TSS key shares.\n   * @param inputShare - The current user secret share.\n   * @param inputIndex - The user share index.\n   * @param factorPubs - The target factor keys.\n   * @param targetIndexes - The target indices to provide new shares for.\n   */\n  async _refreshTSSShares(updateMetadata, inputShare, inputIndex, factorPubs, targetIndexes, verifierNameVerifierId, serverOpts) {\n    if (!this.metadata) throw CoreError.metadataUndefined();\n    if (!this.metadata.tssPolyCommits) throw CoreError.default(`tss poly commits obj not found`);\n    const tssCommits = this.metadata.tssPolyCommits[this.tssTag];\n    if (!tssCommits) throw CoreError.default(`tss commits not found for tssTag ${this.tssTag}`);\n    if (tssCommits.length === 0) throw CoreError.default(`tssCommits is empty`);\n    const tssPubKeyPoint = tssCommits[0];\n    const tssPubKey = pointToHex(tssPubKeyPoint);\n    const {\n      serverEndpoints,\n      serverPubKeys,\n      serverThreshold,\n      selectedServers,\n      authSignatures\n    } = serverOpts;\n    const rssClient = new RSSClient({\n      serverEndpoints,\n      serverPubKeys,\n      serverThreshold,\n      tssPubKey,\n      keyType: this._tssKeyType\n    });\n    if (!this.metadata.factorPubs) throw CoreError.default(`factorPubs obj not found`);\n    if (!factorPubs) throw CoreError.default(`factorPubs not found for tssTag ${this.tssTag}`);\n    if (factorPubs.length === 0) throw CoreError.default(`factorPubs is empty`);\n    if (!this.metadata.tssNonces) throw CoreError.default(`tssNonces obj not found`);\n    const tssNonce = this.metadata.tssNonces[this.tssTag] || 0;\n    const oldLabel = `${verifierNameVerifierId}\\u0015${this.tssTag}\\u0016${tssNonce}`;\n    const newLabel = `${verifierNameVerifierId}\\u0015${this.tssTag}\\u0016${tssNonce + 1}`;\n    const {\n      pubKey: newTSSServerPub,\n      nodeIndexes\n    } = await this.serviceProvider.getTSSPubKey(this.tssTag, tssNonce + 1);\n    let finalSelectedServers = selectedServers;\n    if ((nodeIndexes === null || nodeIndexes === void 0 ? void 0 : nodeIndexes.length) > 0) {\n      finalSelectedServers = nodeIndexes.slice(0, Math.min(selectedServers.length, nodeIndexes.length));\n    }\n    const refreshResponses = await rssClient.refresh({\n      factorPubs: factorPubs.map(f => pointToHex(f)),\n      targetIndexes,\n      oldLabel,\n      newLabel,\n      sigs: authSignatures,\n      dkgNewPub: pointToHex(newTSSServerPub),\n      inputShare,\n      inputIndex,\n      selectedServers: finalSelectedServers\n    });\n    const secondCommit = newTSSServerPub.toEllipticPoint(this._tssCurve).add(ecPoint(this._tssCurve, tssPubKey).neg());\n    const newTSSCommits = [Point.fromJSON(tssPubKey), Point.fromJSON({\n      x: secondCommit.getX().toString(16, 64),\n      y: secondCommit.getY().toString(16, 64)\n    })];\n    const factorEncs = {};\n    for (let i = 0; i < refreshResponses.length; i++) {\n      const refreshResponse = refreshResponses[i];\n      factorEncs[refreshResponse.factorPub.x.padStart(64, \"0\")] = {\n        type: \"hierarchical\",\n        tssIndex: refreshResponse.targetIndex,\n        userEnc: refreshResponse.userFactorEnc,\n        serverEncs: refreshResponse.serverFactorEncs\n      };\n    }\n    this.metadata.updateTSSData({\n      tssKeyType: this._tssKeyType,\n      tssTag: this.tssTag,\n      tssNonce: tssNonce + 1,\n      tssPolyCommits: newTSSCommits,\n      factorPubs,\n      factorEncs\n    });\n    if (updateMetadata) await this._syncShareMetadata();\n  }\n\n  /**\n   * Derives the account nonce for the specified account index.\n   */\n  computeAccountNonce(index) {\n    if (!index || index === 0) {\n      return new BN(0);\n    }\n    if (this._tssKeyType === KeyType.ed25519) {\n      throw new Error(\"account index not supported with ed25519\");\n    }\n\n    // generation should occur during tkey.init, fails if accountSalt is absent\n    if (!this._accountSalt) {\n      throw Error(\"account salt undefined\");\n    }\n    let accountHash = keccak256(Buffer.from(`${index}${this._accountSalt}`));\n    if (accountHash.length === 66) accountHash = accountHash.slice(2);\n    return new BN(accountHash, \"hex\").umod(this._tssCurve.n);\n  }\n\n  /**\n   * Reconstructs the TKey and finalize intialization.\n   */\n  async reconstructKey(_reconstructKeyMiddleware) {\n    const k = await super.reconstructKey(_reconstructKeyMiddleware);\n    const accountSalt = await this.getTKeyStoreItem(TSS_MODULE, \"accountSalt\");\n    if (accountSalt && accountSalt.value) {\n      this._accountSalt = accountSalt.value;\n    } else {\n      const newSalt = generateSalt(this._tssCurve);\n      await this._setTKeyStoreItem(TSS_MODULE, {\n        id: \"accountSalt\",\n        value: newSalt\n      });\n      this._accountSalt = newSalt;\n      // this is very specific case where exisiting user do not have salt.\n      // sync metadata to cloud to ensure salt is stored incase of manual sync mode\n      // new user or importKey should not hit this cases\n      // NOTE this is not mistake, we force sync for this case\n      if (this.manualSync) await this.syncLocalMetadataTransitions();\n    }\n    return k;\n  }\n\n  /**\n   * Adds a factor key to the set of authorized keys.\n   *\n   * `refreshShares` - If this is true, then refresh the shares. If this is\n   * false, `newTSSIndex` must be the same as current factor key index.\n   */\n  async addFactorPub(args) {\n    if (!this.metadata) throw CoreError.metadataUndefined(\"metadata is undefined\");\n    if (!this.secp256k1Key) throw new Error(\"Tkey is not reconstructed\");\n    if (!this.metadata.tssPolyCommits[this.tssTag]) throw new Error(`tss key has not been initialized for tssTag ${this.tssTag}`);\n    const {\n      existingFactorKey,\n      newFactorPub,\n      newTSSIndex,\n      selectedServers,\n      authSignatures,\n      refreshShares\n    } = args;\n    const {\n      tssShare,\n      tssIndex\n    } = await this.getTSSShare(existingFactorKey);\n    if (tssIndex !== newTSSIndex && !refreshShares) {\n      throw CoreError.default(\"newTSSIndex does not match existing tssIndex, set refreshShares to true to refresh shares\");\n    }\n    if (!refreshShares) {\n      // Just copy data stored under factor key.\n      if (tssIndex !== newTSSIndex) {\n        throw CoreError.default(\"newTSSIndex does not match existing tssIndex, set refreshShares to true to refresh shares\");\n      }\n      const updatedFactorPubs = this.metadata.factorPubs[this.tssTag].concat([newFactorPub]);\n      const factorEncs = JSON.parse(JSON.stringify(this.metadata.factorEncs[this.tssTag]));\n      const factorPubID = newFactorPub.x.toString(16, 64);\n      factorEncs[factorPubID] = {\n        tssIndex,\n        type: \"direct\",\n        userEnc: await encrypt(newFactorPub.toSEC1(secp256k1, false), tssShare.toArrayLike(Buffer, \"be\", 32)),\n        serverEncs: []\n      };\n      this.metadata.updateTSSData({\n        tssKeyType: this.tssKeyType,\n        tssTag: this.tssTag,\n        factorPubs: updatedFactorPubs,\n        factorEncs\n      });\n    } else {\n      // Use RSS to create new TSS share and store it under new factor key.\n      const existingFactorPubs = this.metadata.factorPubs[this.tssTag];\n      const updatedFactorPubs = existingFactorPubs.concat([newFactorPub]);\n      const verifierId = this.serviceProvider.getVerifierNameVerifierId();\n      const rssNodeDetails = await this._getRssNodeDetails();\n      const randomSelectedServers = randomSelection(new Array(rssNodeDetails.serverEndpoints.length).fill(null).map((_, i) => i + 1), Math.ceil(rssNodeDetails.serverEndpoints.length / 2));\n      const finalServer = selectedServers || randomSelectedServers;\n      const existingTSSIndexes = existingFactorPubs.map(fb => this.getFactorEncs(fb).tssIndex);\n      const updatedTSSIndexes = existingTSSIndexes.concat([newTSSIndex]);\n      await this._refreshTSSShares(false, tssShare, tssIndex, updatedFactorPubs, updatedTSSIndexes, verifierId, _objectSpread(_objectSpread({}, rssNodeDetails), {}, {\n        selectedServers: finalServer,\n        authSignatures\n      }));\n    }\n    await this._syncShareMetadata();\n  }\n\n  /**\n   * Removes a factor key from the set of authorized keys and refreshes the TSS\n   * key shares.\n   */\n  async deleteFactorPub(args) {\n    if (!this.metadata) throw CoreError.metadataUndefined(\"metadata is undefined\");\n    if (!this.secp256k1Key) throw new Error(\"Tkey is not reconstructed\");\n    if (!this.metadata.tssPolyCommits[this.tssTag]) throw new Error(`tss key has not been initialized for tssTag ${this.tssTag}`);\n    const {\n      factorKey,\n      deleteFactorPub,\n      selectedServers,\n      authSignatures\n    } = args;\n    const existingFactorPubs = this.metadata.factorPubs[this.tssTag];\n    const {\n      tssShare,\n      tssIndex\n    } = await this.getTSSShare(factorKey);\n    const found = existingFactorPubs.filter(f => f.x.eq(deleteFactorPub.x) && f.y.eq(deleteFactorPub.y));\n    if (found.length === 0) throw CoreError.default(\"could not find factorPub to delete\");\n    if (found.length > 1) throw CoreError.default(\"found two or more factorPubs that match, error in metadata\");\n    const updatedFactorPubs = existingFactorPubs.filter(f => !f.x.eq(deleteFactorPub.x) || !f.y.eq(deleteFactorPub.y));\n    this.metadata.updateTSSData({\n      tssKeyType: this._tssKeyType,\n      tssTag: this.tssTag,\n      factorPubs: updatedFactorPubs\n    });\n    const rssNodeDetails = await this._getRssNodeDetails();\n    const randomSelectedServers = randomSelection(new Array(rssNodeDetails.serverEndpoints.length).fill(null).map((_, i) => i + 1), Math.ceil(rssNodeDetails.serverEndpoints.length / 2));\n    const finalServer = selectedServers || randomSelectedServers;\n    const updatedTSSIndexes = updatedFactorPubs.map(fb => this.getFactorEncs(fb).tssIndex);\n    await this._refreshTSSShares(false, tssShare, tssIndex, updatedFactorPubs, updatedTSSIndexes, this.serviceProvider.getVerifierNameVerifierId(), _objectSpread(_objectSpread({}, rssNodeDetails), {}, {\n      selectedServers: finalServer,\n      authSignatures\n    }));\n    await this._syncShareMetadata();\n  }\n\n  /**\n   * Adjusts a TSS key share based on account index and share coefficient.\n   */\n  adjustTssShare(share, accountIndex, coefficient) {\n    const nonce = this.computeAccountNonce(accountIndex);\n    return share.mul(coefficient).add(nonce).umod(this._tssCurve.n);\n  }\n\n  /**\n   * Initializes a new TSS key under the specified factor key and using the\n   * provided user share.\n   */\n  async _initializeNewTSSKey(tssTag, deviceTSSShare, factorPub, deviceTSSIndex) {\n    const ec = this._tssCurve;\n    let tss2;\n    const _tssIndex = deviceTSSIndex || 2; // TODO: fix\n    if (deviceTSSShare) {\n      tss2 = deviceTSSShare;\n    } else {\n      tss2 = this._tssCurve.genKeyPair().getPrivate();\n    }\n    const {\n      pubKey: tss1Pub\n    } = await this.serviceProvider.getTSSPubKey(tssTag, 0);\n    const tss1PubKey = tss1Pub.toEllipticPoint(ec);\n    const tss2PubKey = this._tssCurve.g.mul(tss2);\n    const L1_0 = getLagrangeCoeffs(ec, [1, _tssIndex], 1, 0);\n    const LIndex_0 = getLagrangeCoeffs(ec, [1, _tssIndex], _tssIndex, 0);\n    const a0Pub = tss1PubKey.mul(L1_0).add(tss2PubKey.mul(LIndex_0));\n    const a1Pub = tss1PubKey.add(a0Pub.neg());\n    const tssPolyCommits = [Point.fromElliptic(a0Pub), Point.fromElliptic(a1Pub)];\n    const factorPubs = [factorPub];\n    const factorEncs = {};\n    for (let i = 0; i < factorPubs.length; i++) {\n      const f = factorPubs[i];\n      const factorPubID = f.x.toString(16, 64);\n      factorEncs[factorPubID] = {\n        tssIndex: _tssIndex,\n        type: \"direct\",\n        userEnc: await encrypt(f.toSEC1(factorKeyCurve, false), Buffer.from(tss2.toString(16, 64), \"hex\")),\n        serverEncs: []\n      };\n    }\n    return {\n      tss2,\n      factorEncs,\n      factorPubs,\n      tssPolyCommits\n    };\n  }\n}\n\nexport { FACTOR_KEY_TYPE, LEGACY_KEY_TYPE, TKeyTSS, TSS_MODULE, TSS_TAG_DEFAULT, factorKeyCurve };\n"],
  "mappings": "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",
  "names": ["BN", "import_bn", "BN", "import_bn", "ec", "BN", "getPubKeyPoint", "import_json_stable_stringify", "import_bn", "import_bn", "BN", "lagrangeInterpolation", "BN", "stringify", "keccak256", "stringify", "import_bn", "import_json_stable_stringify", "BN", "stringify", "lagrangeInterpolation", "newMetadata", "import_bn", "import_elliptic", "ec$1", "hash", "result", "encrypt", "decrypt", "import_bn", "import_elliptic", "encrypt", "decrypt", "BN", "encrypt", "decrypt", "BN", "log", "import_bn", "import_elliptic", "getPubKeyPoint", "BN", "ec"]
}
